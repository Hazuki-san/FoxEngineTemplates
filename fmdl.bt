LittleEndian();

#include "common/common.bt"

#define COLOR_Header 0xDFEFAA
#define COLOR_FeatureHeader 0x7DE39E
#define COLOR_BufferHeader 0x00AAFF
#define COLOR_FmdlBoneDef 0xAED2E8
#define COLOR_FmdlMeshGroupHeader 0xB9E8DD
#define COLOR_FmdlMeshGroupDef 0xF7F205
#define COLOR_FmdlMeshDef 0x763765
#define COLOR_FmdlMaterialInstanceHeader 0x3C8D86
#define COLOR_FmdlBoneGroup 0x8A9872
#define COLOR_FmdlTextureRefUnit 0xED688E
#define COLOR_FmdlMaterialParameter 0x7C706F
#define COLOR_FmdlMaterialPlatformAliasUnit 0x939FC8
#define COLOR_FmdlMeshDataLayoutDesc 0x000080
#define COLOR_FmdlMeshBufferHeader 0x008000
#define COLOR_FmdlMeshBufferFormatElement 0x008080
#define COLOR_FmdlStringHeader 0x800000
#define COLOR_FmdlAABB 0x800080
#define COLOR_FmdlFileMeshBufferHeader 0x808000
#define COLOR_FmdlLodInfo 0x808080
#define COLOR_FmdlIBufferSlice 0x000040
#define COLOR_FmdlType18 0x0000c0
#define COLOR_FmdlType20 0x008040
#define COLOR_PathCode64 0x0080c0
#define COLOR_StrCode 0x800040
#define COLOR_FmdlMaterialParameterVector 0x8000c0


#define COLOR_Vertices 0x00c0c0
#define COLOR_BoneWeights 0x808040
#define COLOR_Normals 0x8080c0
#define COLOR_Colors 0x004000
#define COLOR_BoneIndices 0x004080
#define COLOR_Uv1 0x804000
#define COLOR_Uv2 0x804080
#define COLOR_Uv3 0x80c000
#define COLOR_Uv4 0x80c080
#define COLOR_UnknownWeights 0x004040
#define COLOR_UnknownIndices 0x0040c0
#define COLOR_Tangents 0x00c040
#define COLOR_Triangles 0x804040

enum <ubyte> FMDL_FEATURE_TYPE
{
	FMDL_FEATURE_TYPE_BONE_DEFS = 0,
	FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_HEADERS = 1,
	FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_DEFS = 2,
	FMDL_FEATURE_TYPE_MESH_DEFS = 3,
	FMDL_FEATURE_TYPE_MATERIAL_INSTANCE_HEADERS = 4,
	FMDL_FEATURE_TYPE_BONE_GROUPS = 5,
	FMDL_FEATURE_TYPE_TEXTURE_REFS = 6,
	FMDL_FEATURE_TYPE_MATERIAL_PARAMS = 7,
	FMDL_FEATURE_TYPE_MATERIAL_PLATFORM_ALIASES = 8,
	FMDL_FEATURE_TYPE_MESH_DATA_LAYOUT_DESCS = 9,
	FMDL_FEATURE_TYPE_MESH_BUFFER_HEADERS = 10,
	FMDL_FEATURE_TYPE_MESH_BUFFER_FORMAT_ELEMENTS = 11,
	FMDL_FEATURE_TYPE_STRING_HEADER = 12,
	FMDL_FEATURE_TYPE_AABBS = 13,
	FMDL_FEATURE_TYPE_FILE_MESH_BUFFER_HEADERS = 14,
	FMDL_FEATURE_TYPE_LOD_INFO = 16,
	FMDL_FEATURE_TYPE_IBUFFER_SLICES = 17,
	FMDL_FEATURE_TYPE_UNK_18 = 18,
	FMDL_FEATURE_TYPE_UNK_19 = 19,
	FMDL_FEATURE_TYPE_UNK_20 = 20,
	FMDL_FEATURE_TYPE_PATH_HASHES = 21,
	FMDL_FEATURE_TYPE_NAME_HASHES = 22,
};

enum <uint> FMDL_BUFFER_TYPE
{
	FMDL_BUFFER_TYPE_MATERIAL_PARAMS = 0,
	FMDL_BUFFER_TYPE_VERTICES = 2,
	FMDL_BUFFER_TYPE_STRINGS = 3
};

typedef struct
{
	FMDL_FEATURE_TYPE Type;
	ubyte CountOverflow;
	ushort EntryCount; // Entry count == CountOverflow * (UINT16_MAX + 1) + EntryCount
	uint DataOffset;
} FeatureHeader <optimize = false, bgcolor = COLOR_FeatureHeader>;
uint GetFeatureEntryCount(FeatureHeader& header)
{
	return (uint)header.CountOverflow * 0x10000 + header.EntryCount;
}

typedef struct
{
	FMDL_BUFFER_TYPE Type;
	uint DataOffset;
	uint DataSize;
} BufferHeader <bgcolor = COLOR_BufferHeader>;

typedef ushort _NameIndex;
typedef ushort _PathIndex;

struct FMDL_BONE_FLAGS
{
	ushort HasBoundingBox : 1;
	ushort B : 1;
	ushort C : 1;
	ushort   : 5;
};

typedef struct
{
	_NameIndex NameIndex;
	short ParentIndex;
	ushort AABBIndex;
	FMDL_BONE_FLAGS Flags; Assert(Flags.B == 0);

	FSkip(8);
	Vector4 LocalPosition;
	Vector4 WorldPosition;
} FmdlBoneDef <optimize = false, bgcolor = COLOR_FmdlBoneDef>;

struct FMDL_MESH_GROUP_HEADER_FLAGS
{
	ushort Invisible : 1;
	ushort A		 : 1;
	ushort B		 : 1;
	ushort		   : 5;
};

typedef struct
{
	_NameIndex NameIndex;
	FMDL_MESH_GROUP_HEADER_FLAGS Flags; Assert(Flags.B == 0);
	short ParentIndex;
	short Unknown0; // Assert(Unknown0 == -1); // Not read by the game.
} FmdlMeshGroupHeader <optimize = false, bgcolor = COLOR_FmdlMeshGroupHeader>;

typedef struct
{
	uint Unknown; Assert(Unknown == 0);

	ushort MeshGroupHeaderIndex;
	ushort MeshCount;
	ushort MeshesStartIndex;

	ushort AABBIndex;

	uint Padding0 <hidden = true>; Assert(Padding0 == 0);

	ushort IBufferSlicesStartIndex;

	ushort Padding1 <hidden = true>; Assert(Padding1 == 0);
	uint Padding2 <hidden = true>; Assert(Padding2 == 0);
	uint64 Padding3 <hidden = true>; Assert(Padding3 == 0);
} FmdlMeshGroupDef <optimize = false, bgcolor = COLOR_FmdlMeshGroupDef>;

struct FmdlIBufferSlice;
typedef struct
{
	// byte AlphaEnum;
	// byte ShadowEnum;
	// byte UnknownEnum0;
	// byte UnknownEnum1; //Used by net fmdls in PES

	// >> 10, >> 13
	uint Flags;

	ushort MaterialInstanceIndex;
	ushort BoneGroupIndex;

	ushort BufferLayoutDescIndex; // Unconfirmed.

	ushort VertexCount;
	ushort VerticesStartIndex; Assert(VerticesStartIndex == 0); // Unconfirmed.

	ushort Padding0 <hidden = true>; Assert(Padding0 == 0);

	FmdlIBufferSlice HighLodSlice;

	uint IBufferSlicesStartIndex; // Only actually used if some EXE byte says to use multiple slices. Each slice's StartIndex is relative to the main slice.
	FSkip(0x14);
} FmdlMeshDef <optimize = false, bgcolor = COLOR_FmdlMeshDef>;

typedef struct
{
	_NameIndex NameIndex;

	ushort Padding0 <hidden = true>; Assert(Padding0 == 0);

	_NameIndex MaterialIndex;
	byte TextureParamCount;
	byte VectorParamCount;
	ushort TextureParamsStartIndex;
	ushort VectorParamsStartIndex;
	
	uint Padding1 <hidden = true>; Assert(Padding1 == 0);
} FmdlMaterialInstanceHeader <optimize = false, bgcolor = COLOR_FmdlMaterialInstanceHeader>;

typedef struct
{
	ushort UseWeightCount; Assert(UseWeightCount <= 4); // What is the largest number of bones any given vertex referencing this bone group use?
	ushort BoneCount; Assert(UseWeightCount <= BoneCount);
	ushort BoneIndices[BoneCount];
	FSkip(0x40 - BoneCount * sizeof(ushort));
} FmdlBoneGroup <optimize = false, bgcolor = COLOR_FmdlBoneGroup>;

typedef struct
{
	_NameIndex NameIndex; // For "/Assets/path/name.ftex" this is StrCode("name") if TPP or just "name.ext" (ext can be tga, psd, etc.) if GZ
	_PathIndex PathIndex; // For "/Assets/path/name.ftex" this is PathCode64("/Assets/path/name.ftex") if TPP or just "/Assets/path/" if GZ
} FmdlTextureRefUnit <optimize = true, bgcolor = COLOR_FmdlTextureRefUnit>;

typedef struct
{
	_NameIndex ParamNameIndex;
	ushort ReferenceIndex; // Can be either a path index to a .ftex or an index into the material params buffer 
} FmdlMaterialParameter <optimize = true, bgcolor = COLOR_FmdlMaterialParameter>;

typedef struct
{
	_NameIndex TypeNameIndex;
	_NameIndex TechniqueNameIndex;
} FmdlMaterialPlatformAliasUnit <optimize = true, bgcolor = COLOR_FmdlMaterialPlatformAliasUnit>;

typedef struct
{
	byte BufferCount;
	byte FormatElementCount;
	byte Unknown0; //Assert(Unknown0 == 0); //Possibly the first UV set's index.
	byte UvCount;
	ushort BufferHeadersStartIndex;
	ushort FormatElementsStartIndex;
} FmdlMeshDataLayoutDesc <optimize = false, bgcolor = COLOR_FmdlMeshDataLayoutDesc>;

typedef struct
{
	byte FileMeshBufferHeaderIndex;
	byte FormatElementCount;
	byte Stride;
	byte BindSlot; Assert(BindSlot <= 3);
	uint Offset;
} FmdlMeshBufferHeader <optimize = false, bgcolor = COLOR_FmdlMeshBufferHeader>;

enum <ubyte> MESH_BUFFER_FORMAT_ELEMENT_USAGE
{
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_POSITION = 0,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_BONE_WEIGHT0 = 1,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_NORMAL = 2,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_COLOR = 3,

	MESH_BUFFER_FORMAT_ELEMENT_USAGE_BONE_INDEX0 = 7,

	MESH_BUFFER_FORMAT_ELEMENT_USAGE_UV0 = 8,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_UV1 = 9,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_UV2 = 10,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_UV3 = 11,
	
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_BONE_WEIGHT1 = 12,
	MESH_BUFFER_FORMAT_ELEMENT_USAGE_BONE_INDEX1 = 13,

	MESH_BUFFER_FORMAT_ELEMENT_USAGE_TANGENT = 14,
};

enum <ubyte> MESH_BUFFER_FORMAT_ELEMENT_TYPE
{
	MESH_BUFFER_FORMAT_ELEMENT_TYPE_R32G32B32_FLOAT = 1,
	// MESH_BUFFER_FORMAT_ELEMENT_TYPE_R16_UINT = 4,
	MESH_BUFFER_FORMAT_ELEMENT_TYPE_R16G16B16A16_FLOAT = 6,
	MESH_BUFFER_FORMAT_ELEMENT_TYPE_R16G16_FLOAT = 7,
	MESH_BUFFER_FORMAT_ELEMENT_TYPE_R8G8B8A8_UNORM = 8,
	MESH_BUFFER_FORMAT_ELEMENT_TYPE_R8G8B8A8_UINT = 9,
};

typedef struct
{
	MESH_BUFFER_FORMAT_ELEMENT_USAGE Usage; Assert(Usage != 4 && Usage != 5 && Usage != 6 && Usage < 15);
	MESH_BUFFER_FORMAT_ELEMENT_TYPE Type; Assert(Type != 0 && Type != 2 && Type != 3 && Type != 5 && Type < 10); Assert(Usage != 4);
	ushort Offset;
} FmdlMeshBufferFormatElement <optimize = false, bgcolor = COLOR_FmdlMeshBufferFormatElement>;

typedef struct
{
	ushort BufferType; Assert(BufferType == FMDL_BUFFER_TYPE_STRINGS);
	ushort Length;
	uint Offset;
} FmdlStringHeader <read = ReadString(Header.BuffersDataOffset + BufferHeaders[_BufferIndices[BufferType]].DataOffset + Offset, Length), optimize = false, bgcolor = COLOR_FmdlStringHeader>;

typedef struct
{
	Vector4 Min;
	Vector4 Max;
} FmdlAABB <bgcolor = COLOR_FmdlAABB>;

enum <uint> FMDL_FILE_MESH_BUFFER_TYPE
{
	FMDL_FILE_MESH_BUFFER_TYPE_VBUFFER = 0,
	FMDL_FILE_MESH_BUFFER_TYPE_INDEX_BUFFER = 1,
};

typedef struct
{
	FMDL_FILE_MESH_BUFFER_TYPE Type;
	uint DataSize;
	uint DataOffset;
	
	uint Padding <hidden = true>; Assert(Padding == 0);
} FmdlFileMeshBufferHeader <optimize = false, bgcolor = COLOR_FmdlFileMeshBufferHeader>;

typedef struct
{
	uint StartIndex;
	uint Count;
} FmdlIBufferSlice <optimize = true, bgcolor = COLOR_FmdlIBufferSlice>;

typedef struct
{
	uint lodCount;
	float unknown0;
	float unknown1;
	float unknown2;
} FmdlLodInfo <optimize = true, bgcolor = COLOR_FmdlLodInfo>;

typedef struct
{
	uint64 unknown0; //Always 0.
} FmdlType18 <optimize = true, bgcolor = COLOR_FmdlType18>;

typedef struct
{
	FSkip(4);
	float unknown0; //Nulling triggers lowest LOD faces.
	float unknown1;
	float unknown2;
	float unknown3; //Always a whole number?

	uint unknown4;
	uint unknown5;
	int unknown6;

	uint unknownBoolLike <read = ((this == 0) + 3)>;

	FSkip(0x5C);
} FmdlType20 <optimize = true, bgcolor = COLOR_FmdlType20>;

struct FmdlHeader
{
	char Signature[4]; Assert(Signature == "FMDL");

	float Version; Assert(Version == 2.03f || Version == 2.04f);

	uint FileDescOffset;
	uint Padding0 <hidden = true>; Assert(Padding0 == 0);

	uint FeatureTypes;
	uint Padding1 <hidden = true>; Assert(Padding1 == 0);

	uint BufferTypes;
	uint Padding1 <hidden = true>; Assert(Padding1 == 0);
	
	uint FeatureCount;
	uint BufferCount;
	uint FeaturesDataOffset;
	uint FeaturesDataSize;
	uint BuffersDataOffset;
	uint BuffersDataSize;
} Header <bgcolor=COLOR_Header>;

FSeek(Header.FileDescOffset);

// FileDesc
FeatureHeader FeatureHeaders[Header.FeatureCount] <bgcolor = COLOR_FeatureHeader>;

local int _FeatureIndices[23];
local int fFit;
local int fIdx;
local int rFIdx;
for (fIdx = 0, rFIdx = 0, fFit = 1; fIdx < 23; fIdx++, fFit = fFit << 1 | ((int)fFit < 0))
	_FeatureIndices[fIdx] = ((Header.FeatureTypes & fFit) == 0) ? -1 : rFIdx++;

BufferHeader BufferHeaders[Header.BufferCount] <bgcolor = COLOR_BufferHeader>;

local int _BufferIndices[4];
local int bFit;
local int bIdx;
local int rBIdx;
for (bIdx = 0, rBIdx = 0, bFit = 1; bIdx < 4; bIdx++, bFit = bFit << 1 | ((int)bFit < 0))
	_BufferIndices[bIdx] = ((Header.BufferTypes & bFit) == 0) ? -1 : rBIdx++;

// Features
if (_FeatureIndices[FMDL_FEATURE_TYPE_BONE_DEFS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_BONE_DEFS]].DataOffset);
	FmdlBoneDef BoneDefs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_BONE_DEFS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_HEADERS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_HEADERS]].DataOffset);
	FmdlMeshGroupHeader MeshGroupHeaders[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_HEADERS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_DEFS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_DEFS]].DataOffset);
	FmdlMeshGroupDef MeshGroupDefs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS_GROUP_DEFS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS]].DataOffset);
	FmdlMeshDef MeshDefs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DEFS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_INSTANCE_HEADERS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_INSTANCE_HEADERS]].DataOffset);
	FmdlMaterialInstanceHeader MaterialInstanceHeaders[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_INSTANCE_HEADERS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_BONE_GROUPS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_BONE_GROUPS]].DataOffset);
	FmdlBoneGroup BoneGroups[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_BONE_GROUPS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_TEXTURE_REFS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_TEXTURE_REFS]].DataOffset);
	FmdlTextureRefUnit TexturesRefs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_TEXTURE_REFS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PARAMS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PARAMS]].DataOffset);
	FmdlMaterialParameter MaterialParameters[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PARAMS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PLATFORM_ALIASES] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PLATFORM_ALIASES]].DataOffset);
	FmdlMaterialPlatformAliasUnit MaterialAliases[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MATERIAL_PLATFORM_ALIASES]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DATA_LAYOUT_DESCS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DATA_LAYOUT_DESCS]].DataOffset);
	FmdlMeshDataLayoutDesc MeshDataLayoutDescs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_DATA_LAYOUT_DESCS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_HEADERS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_HEADERS]].DataOffset);
	FmdlMeshBufferHeader MeshBufferHeaders[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_HEADERS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_FORMAT_ELEMENTS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_FORMAT_ELEMENTS]].DataOffset);
	FmdlMeshBufferFormatElement MeshBufferFormatElements[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_MESH_BUFFER_FORMAT_ELEMENTS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_STRING_HEADER] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_STRING_HEADER]].DataOffset);
	FmdlStringHeader StringHeaders[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_STRING_HEADER]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_AABBS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_AABBS]].DataOffset);
	FmdlAABB AABBs[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_AABBS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_FILE_MESH_BUFFER_HEADERS] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_FILE_MESH_BUFFER_HEADERS]].DataOffset);
	FmdlFileMeshBufferHeader FileMeshBufferHeaders[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_FILE_MESH_BUFFER_HEADERS]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_LOD_INFO] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_LOD_INFO]].DataOffset);
	FmdlLodInfo LodInfo; Assert(GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_LOD_INFO]]) == 1);
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_IBUFFER_SLICES] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_IBUFFER_SLICES]].DataOffset);
	FmdlIBufferSlice IBufferSlices[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_IBUFFER_SLICES]])];
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_UNK_18] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_UNK_18]].DataOffset);
	FmdlType18 Type18; Assert(GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_UNK_18]]) == 1);
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_UNK_20] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_UNK_20]].DataOffset);
	FmdlType20 Type20; Assert(GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_UNK_20]]) == 1);
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_PATH_HASHES] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_PATH_HASHES]].DataOffset);
	PathCode64 Paths[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_PATH_HASHES]])] <bgcolor = COLOR_PathCode64>;
}
if (_FeatureIndices[FMDL_FEATURE_TYPE_NAME_HASHES] != -1)
{
	FSeek(Header.FeaturesDataOffset + FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_NAME_HASHES]].DataOffset);
	StrCode Names[GetFeatureEntryCount(FeatureHeaders[_FeatureIndices[FMDL_FEATURE_TYPE_NAME_HASHES]])] <bgcolor = COLOR_StrCode>;
}