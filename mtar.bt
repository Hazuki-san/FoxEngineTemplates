//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

typedef struct 
{
    uint sig; //9c a8 ff 0b
    uint fileCount; //296 size?
    short us0;  //bones 
    short us1; //channels
    uint padd[5]; //pad[5] pes, pad[1] mgs
}MTAR_HDR;

local int idxMin = -1;
local int idxMax = -1;
local int i = -1;
local int szMin = 9999999;
local int szMax = 0;
local int minB = 999999;
local int maxB = -1;

typedef struct
{
    //a/b = id or name
    int a; //hash?
    int b; //
    if(b > maxB)
        maxB = b;
    if(b < minB)
        minB = b;

    int addr; //important 
    int size; 
    i++;
    if(size < szMin)
    {
        idxMin = i;
        szMin = size;
    }
    if(size > szMax)
    {
        idxMax = i;
        szMax = size;
    }

    local long fAddr = FTell();
    FSeek(addr);
    int sig;
    FSeek(addr);
    byte data[size];
    FSeek(addr+148);
    int subEntryCount;
    FSeek(addr+156);
    int frames<hidden=true>;
    FSeek(fAddr);
    //seek c+224?
    //local byte data[]
}MTAR_ENTRY<optimize=false, read=ReadMtar>;
string ReadMtar(MTAR_ENTRY& m)
{
    local string s2; 
    SPrintf(s2, "Size: %8d    Frames: %4d h:c {%d, %d}", m.size, m.frames, m.sig, m.subEntryCount);
    Printf("\nSubEntry Count: %d", m.subEntryCount);
    return s2;  
} 





struct Mtar
{
    MTAR_HDR header;
    MTAR_ENTRY entry[header.fileCount];
    //Printf("%d ",FTell());
    //byte unkn[80];
}mtar;

Printf("\nMinB = %d,    MaxB = %d", minB, maxB);
Printf("\nThe smallest file is [%d]:=%d",idxMin, szMin);
Printf("\nThe largest file is [%d]:=%d",idxMax, szMax);