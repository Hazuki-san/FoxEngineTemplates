/*--------------------------------------
Motion line should be ignored [16]
--------------------------------------*/
typedef struct(int arraySize)
{
    local int size = arraySize;
    byte array[arraySize];
    //ushort array[arraySize/2]; //hfloat
}ByteArray;

typedef struct(int trackSz, int bitSz)
{
    local int firstPass = 1;
    local int totalFrames = 0;
    local int sz = (int)((((float)bitSz)/8.0f)* 3.0f);
    while(trackSz >= bitSz)
    {
       
        if(firstPass == 0)
        {
            byte frameStep;
            totalFrames += (int)frameStep;
        }
        ByteArray bits(sz); //xyz
        trackSz -= bitSz * 3;
        firstPass = 0;
    }
    Printf("\nTotal Frames: %d", totalFrames);
}VTrack;

typedef struct
{
    byte xyz[6];
}VArray<read=ReadVect>;
string ReadVect(VArray &v)
{
    hfloat x = (v.xyz[1] << 8) | (v.xyz[0] & 0xff);
    hfloat y = (v.xyz[3] << 8) | (v.xyz[2] & 0xff);
    hfloat z = (v.xyz[5] << 8) | (v.xyz[4] & 0xff);
    hfloat t =  Sqrt( (x*x) + (y*y) + (z*z) );
    string s;
    SPrintf(s, "(%ff, %ff, %ff)", x,y,z);
    if(t < 1)
    {
        SPrintf(s, "%s - (%ff, %ff, %ff, %ff)", s,x,y,z,1-t);
    }
    return s;
}

//Euler?
typedef struct
{
    byte xyzw[6];
}QArray<read=ReadQuat>;
string ReadQuat(QArray &v)
{
    hfloat x = (v.xyzw[1] << 8) | (v.xyzw[0] & 0xff);
    hfloat y = (v.xyzw[3] << 8) | (v.xyzw[2] & 0xff);
    hfloat z = (v.xyzw[5] << 8) | (v.xyzw[4] & 0xff);
    hfloat t =  Sqrt( (x*x) + (y*y) + (z*z) );
    string s;
    SPrintf(s, "(%ff, %ff, %ff)", x,y,z);
    if(t < 1)
    {
        SPrintf(s, "%s - (%ff, %ff, %ff, %ff)", s,x,y,z,1-t);
    }
    return s;
}


typedef struct(int arraySize)
{
    VArray array[arraySize/6];
}VByteArray;

typedef struct(int arraySize)
{
    //QArray array[arraySize/6];
    VArray array[arraySize/6];
}QByteArray;

local int addrDiff =0;
local int counter = 0;

local int rootPos = 0;
local int rootRot = 0;
local int boneRot = 0;
local int bonePos = 0;

local int subEntAddr[60];
local int subEntSz[60];

string FlagReader(int flag)
{
    /*
    0x80 bit indicating that its not last entry in the set
    other bits are track type, 
    0 - rotation
    3 - position
    5 - root rotation
    6 - root position
    */
    local string s0;
    local int f = flag & ~0x80; //remove 0x80
    switch(f)
    {
    case 0x0:
        s0 = "rotation";
        boneRot+= 1;
        break;
    case 0x3:
        s0 = "position";
        bonePos+= 1;
        break;
    case 0x5:
        s0 = "Root_rot";
        rootRot = rootRot + 1;
        break;
    case 0x6:
        s0 = "Root_pos";
        rootPos = rootPos + 1;
        break;
    }
    local string s2; 
    SPrintf(s2, " (0x%02x)",flag);
    return s0 +s2;  
}

local int TotalSubEntryCount = 0;
typedef struct
{
    TotalSubEntryCount += 1;
    local int addrbac = FTell();
    int addr; //OFFSET
    short index; //references an index in based on size

    subEntAddr[index] = addr+addrbac;

    ubyte typeFlag<read=FlagReader, bgcolor=cYellow>; //this is an enum flag bit
    ubyte bitSz< bgcolor=cYellow>;
    subEntSz[index] =bitSz;
    //debug
    Printf("\n    %02d) Addr: %d (+%d: %d)\n    ----------------------------", index, addr,addrbac, addr+addrbac);
    if(addrDiff > 0)
    {
        Printf("\n    addrDiff = %d", addr - addrDiff);
    }
    addrDiff = addr;
    
    Printf("\n    %s", FlagReader(typeFlag));
    Printf("\n    typeFlag: 0x%02x, bitSz: 0x%02x : %d\n", typeFlag, bitSz,bitSz);
}SubEntry<bgcolor=cLtBlue,optimize=false>;


//Group
typedef struct
{
    Printf("\n\nEntryx[%d]:\n{", counter);
    counter += 1;
    uint _hash; //constant across all animations (bone group?)
    byte subCount; //int
    short unkn;
    byte pad;
    if(subCount > 4)
    {
        SubEntry sEntry<optimize=false>;
    }
    else
    {
        SubEntry sEntry[subCount]<optimize=false>;
    }
}Entryx<optimize=false,bgcolor=cLtRed,read=ReadEntryX>;
string ReadEntryX(Entryx &e)
{
    local string s2; 
    SPrintf(s2, "subCount: %8d", e.subCount);
    return s2;  
}

//Generic container?
typedef struct
{
    int sig;
    int a; //size a?
    int fileSize;
    // b[2] = number of files?
    int b[5];
    int hash2;

    //c[0] = //size b?
    //c[5] = motion headr size (skip char name)
    int c[11];
    //size of header = size a + size b
}MainHdr;
MainHdr mHdr;

typedef struct
{
    char sig[16];
    int64 hash_;
    int a,b; 
    int size;
    int unkn;
    int __[6];

}MotionHdr;
MotionHdr mothdr;

string ToFloatHex(uint data)
{
    local byte n[4];
    local uint num1 = (data & 32768U) >> 8; //sign 1 bit
    local uint num2 = data & 31744U; //exp 5 bits
    //if (num2 > 0U) //if not exp
    //    num2 = num2 + 121856U >> 3;
    local uint num3 = (uint)(((int)data & 1023) << 5);
    n[3] = (byte)(num1 | num2); // >> 8 & 255);
    n[2] = (byte)((int)num2 & 128 | (int)(num3 >> 8) & 127);
    n[1] = (byte)(num3 & 255);
    n[0] = (byte)0;

    local string s; 
    SPrintf(s,"[%x %x %x %x]",n[0],n[1],n[2],n[3]);
    return s;
}

typedef struct(int curr)
{
    local int add = FTell();
    hfloat vX<hidden=true>;
    hfloat vY<hidden=true>;
    hfloat vZ<hidden=true>;
    FSeek(add);
    byte d[6]<hidden=true>;
    byte f<bgcolor=0xFF00FF, hidden=true>;
    local int curF = curr;
}Frame<read=ReadFrame>;
string ReadFrame(Frame &f)
{
    local string s2; 
    local int i =0;
    local float a[3];
    local float x;
    local float y;
    for(i =0; i < 3; i++)
    {
        x = ((float)f.d[i*2]);
        y = ((float)f.d[(i*2) + 1]);
        if(x ==0 || y ==0)
            a[i] = 0;
        else
            a[i] = x/y;
    }
    
    SPrintf(s2, "[%d]: (%ff, %ff, %ff) - (%ff, %ff, %ff), +%d", f.curF, f.vX, f.vY, f.vZ, a[0], a[1], a[2], f.f);
    return s2;  
}

struct Motion
{
    int entryCount; //defonitley
    int subEntryCount; //subEntryCount is another count (refereneced by entry) Bones?
    int _fpsInterval; //time between frames (60)
    int _unkn0; //frame count?
    int c;  
    int entryAddr[entryCount]; //definitley
    local int i = 0;
    local int sum = 0;

    //default to -1
    for(i =0; i < 60; ++i)
    {
        subEntAddr[i] = -1;
    }
    //a hack to make calculating subEntry sizes easier
    subEntAddr[subEntryCount] = FileSize(); 
    int pad[4];

    //byte data[sum+16];
    for(i = 0; i < entryCount; i++)
    {
        //caches sub entry address in dataX constuctor
        Entryx dataX;
        Printf("}\n");
    }

    local int j = 0;
    local int addrOff = FTell() - dataX[0].sEntry[0].addr;
    local int idx =0;
    local int fSize = 0;
    local float maxFrame = -1;
    local float frameC = 0;
    local float floatCount = 0;
    local long startAdd = 0;
    local long endAdd = 0;
    local int frameIdx = 0;
    for(i = 0; i < subEntryCount; i++)
    {
        fSize = subEntAddr[i+1]-subEntAddr[i];
        Printf("\n%d - %d : %d",subEntAddr[i],subEntAddr[i+1], fSize);
    
        //Printf(" -- %d floats",(float)(fSize*8.0f)/(float)subEntSz[i]);
        if(subEntSz[i] == 12)
        {
            //SubEntSz is the same as EntryX.SubEntry[n].bitSz
            //- each subEntsz is the size of data eg quaternion, vector
            //Dividing by size = track or frame count. * 8.0??
            //frameC = ((float)(fSize*8.0f)/(float)subEntSz[i])/4;
            //Printf(" : %d Quaternion(s)", frameC);

            floatCount = ((float)fSize)*0.75f;
            //Printf(" : %f floats(s)", floatCount);
            frameC = floatCount/3.0f;
            //Printf(" : %f Quaternion(s)", frameC);//Because we calculate w
            if(frameC > maxFrame)
            {
                maxFrame = frameC;
                idx = i;
            }
            //QByteArray track(fSize)<bgcolor=cLtGreen>;
            ByteArray _track(fSize)<bgcolor=cLtGreen, hidden =true>;
        }
        else
        {
            //frameC = ((float)(fSize*8.0f)/(float)subEntSz[i])/3;
            //Printf(" : %d Vector(s)", frameC);
            floatCount = ((float)fSize)*0.5f;
            //Printf(" : %f floats(s)", floatCount);
            frameC = floatCount/3.0f;
            //Printf(" : %f Vector(s)", frameC);//because position needs more precision
            if(frameC > maxFrame)
            {
                maxFrame = frameC;
                idx = i;
            }
            //VByteArray track(fSize)<bgcolor=cLtPurple>;
            startAdd = FTell();
            //ByteArray _track(fSize)<bgcolor=cLtPurple>;
            //endAdd = FTell();
            //FSeek(startAdd);
            endAdd = startAdd + fSize;
            frameIdx = 0;
            do
            {
                Frame frame(frameIdx)<bgcolor=cLtPurple>;
                Printf("\nV[%d] = (%f, %f, %f)",frameIdx, frame.vX, frame.vY, frame.vZ);
                frameIdx += (int)frame.f;
                if(frame.f == 0)
                    break;
            }while(frameIdx <= _unkn0  && FTell() < endAdd);
            Printf("\nLast Frame [%d]\n", frameIdx);
            FSeek(startAdd + fSize);
            //VTrack _track(fSize, 16)<bgcolor=cLtPurple>;
        }
        //ByteArray bArr(fSize)<bgcolor=cLtGreen>;
    }
    Printf("\nPotential Total frame count = %f -> in track [%d]",maxFrame, idx);
}motion;

Printf("\n\nTrackStats: %d rootPosition(s), %d rootRotation(s), %d bonePos(s), %d boneRot(s)", rootPos, rootRot, bonePos, boneRot);

/*
FSeek(0);
byte bb[4];
local int fix = 0x000000ff;
local int abb = bb[0];
//abb = abb & fix;
//Printf("\n0x%x : %d", abb, abb);
local int bbb = bb[1];
//bbb = bbb  << 8;
//Printf("\n0x%x : %d", bbb, bbb);
local int cbb = bb[2];
//cbb = cbb << 16;
//Printf("\n0x%x : %d", cbb, cbb);
local int dbb = bb[3];
//dbb = dbb << 24;
//Printf("\n0x%x : %d", dbb, dbb);
local int tbb1 = (bbb << 8) | (abb & 0xff);
local int tbb2 = (dbb << 8) | (cbb & 0xff);
local int tbb = (tbb2 << 16) | (tbb1 & 0xffff);
Printf("\n0x%x : %d", tbb, tbb);
*/
Printf("\nTotalSubEntryCount : %d", TotalSubEntryCount);