//------------------------------------------------
LittleEndian();

typedef struct
{
    uint hash<format=hex>;
} StrCode32 <read=(hash)>;

typedef struct
{
    ubyte r<fgcolor=0xaaaaff>;
    ubyte g<fgcolor=0xaaffaa>;
    ubyte b<fgcolor=0xffaaaa>;
    ubyte a<fgcolor=0xaaaaaa>;
} Pixel <read=Str("#%02x%02x%02x%02x", r, g, b, a)>;

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; //sizeof(HeaderMetadata0)
    StrCode32 NameHash;
    uint NameStringOffset;
    float Value;
} FloatMetadata <read=Str("(%s, %f)", HashLookup(NameHash), Value)>;

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; // sizeof(HeaderMetadata0) or 0
    StrCode32 NameHash;
    uint NameStringOffset;
    uint Value;
} UIntMetadata <read=Str("(%s, %d)", HashLookup(NameHash), Value)>;

typedef struct
{
    local uint SelfStartPos = FTell();

    StrCode32 NameHash;
    uint NameStringOffsetRelative;
    uint Unknown<hidden=true>; Assert(Unknown == 0); // Only nonzero in HTRE Type==4 files
    uint DataOffset; // 0 means no data
    uint DataSize; // 0 means no data
    uint EditParamOffset; Assert(EditParamOffset == 0);             // Only nonzero for configrationIds entry in HTRE Type==3 files
    uint ConfigrationIdsOffset; Assert(ConfigrationIdsOffset == 0); // exe searches for this entry, Only nonzero for editParam entry in HTRE Type==3 files
    int PreviousEntryOffset; // 0 means no previous entries
    int NextEntryOffset; // 0 means no more entries
    uint ScalarSubParamOffset; // 0 means no subparams
    uint padding2<hidden=true>; Assert(padding2 == 0);
    uint padding3<hidden=true>; Assert(padding3 == 0);
} TextureMetadata <read=Str("%s", HashLookup(NameHash))>;

struct
{
    uint Type;
    uint FirstSectionOffset; Assert(FirstSectionOffset == 0x20);
    uint FileSize;
    StrCode32 NameHash <read=HashLookup(this)>;
    uint NameStringOffset;
} Header<bgcolor=0xaaaaaa>;

FSeek(Header.FirstSectionOffset);

struct 
{
    TextureMetadata ParamDefinition<bgcolor=0xff9999>;
    UIntMetadata WidthParameter<bgcolor=0xff9900>;
    UIntMetadata HeightParameter<bgcolor=0x00ff99>;
    UIntMetadata HighPerLowParameter<bgcolor=0x0099ff>;
    UIntMetadata MaxLodLevelParameter<bgcolor=0xff0099>;
    FloatMetadata GridDistanceParameter<bgcolor=0x009999>;

    TextureMetadata HeightMapDefinition<bgcolor=0x999900>;
    UIntMetadata HeightFormatParameter<bgcolor=0x990099>;
    FloatMetadata HeightRangeMaxParameter<bgcolor=0xff0909>;
    FloatMetadata HeightRangeMinParameter<bgcolor=0x09ff09>;

    TextureMetadata ComboTextureDefinition<bgcolor=0x0909ff>;
    UIntMetadata ComboFormatParameter<bgcolor=0xaacc99>;

    TextureMetadata MaxHeightDefinition<bgcolor=0x9999ff>;

    TextureMetadata MinHeightDefinition<bgcolor=0xff99ff>;

    TextureMetadata MaterialIdsDefinition<bgcolor=0x99ffff>;

    TextureMetadata ConfigrationIdsDefinition<bgcolor=0x99ff99>;

    TextureMetadata LayoutDescriptionDefinition<bgcolor=0xffff99>;
} Metadata;

FSeek(Metadata.LayoutDescriptionDefinition.SelfStartPos);
FSkip(Metadata.LayoutDescriptionDefinition.DataOffset);
struct 
{
    local uint SelfStartPos = FTell();

    FSkip(16);

    uint WidthWS;
    uint HeightWS;
    uint SubEntryOffset;
    float MaxHeightWS;
    float MinHeightWS;

    float unknown0;
    uint unknown1;
    uint unknown2;

    FSeek(SelfStartPos + 0x18 + SubEntryOffset);

    struct 
    {
        uint unknown0;
    
        float MaxHeightWS;
        float MinHeightWS;
    
        // Many of these appear to be offsets into the heightMap.
        short vals2[28];
        uint miniHeightMapWidth;
        uint miniHeightMapHeight;
        short vals3[10];
    } LayoutDescriptionSubEntry;
} LayoutDescription;

FSeek(Metadata.ParamDefinition.SelfStartPos);
FSkip(Metadata.ParamDefinition.DataOffset);
struct
{
    float data[Metadata.ParamDefinition.DataSize / sizeof(float)];
} Param <bgcolor=0x00aaff>;

FSeek(Metadata.MaxHeightDefinition.SelfStartPos);
FSkip(Metadata.MaxHeightDefinition.DataOffset);
struct
{
    float data[Metadata.MaxHeightDefinition.DataSize / sizeof(float)];
} MaxHeight <bgcolor=0xff00aa>;

FSeek(Metadata.MinHeightDefinition.SelfStartPos);
FSkip(Metadata.MinHeightDefinition.DataOffset);
struct
{
    float data[Metadata.MinHeightDefinition.DataSize / sizeof(float)];
} MinHeight <bgcolor=0xaaff00>;

FSeek(Metadata.HeightMapDefinition.SelfStartPos);
FSkip(Metadata.HeightMapDefinition.DataOffset);
struct
{
    float data[Metadata.HeightMapDefinition.DataSize / sizeof(float)];
} HeightMap <bgcolor=0x99aacc>;

FSeek(Metadata.ComboTextureDefinition.SelfStartPos);
FSkip(Metadata.ComboTextureDefinition.DataOffset);
struct
{
    Pixel data[Metadata.ComboTextureDefinition.DataSize / sizeof(Pixel)];
} ComboTexture <bgcolor=0x111199>;

FSeek(Metadata.MaterialIdsDefinition.SelfStartPos);
FSkip(Metadata.MaterialIdsDefinition.DataOffset);
struct
{
    Pixel data[Metadata.MaterialIdsDefinition.DataSize / sizeof(Pixel)];
} MaterialIds <bgcolor=0x991111>;

FSeek(Metadata.ConfigrationIdsDefinition.SelfStartPos);
FSkip(Metadata.ConfigrationIdsDefinition.DataOffset);
struct
{
    uint data[Metadata.ConfigrationIdsDefinition.DataSize / sizeof(uint)];
} ConfigrationIds <bgcolor=0x119911>;

string HashLookup( StrCode32& hash )
{
 if( hash.hash == 1840366096 )
     return "tre2";
 else if( hash.hash == 101154120 )
     return "param";
 else if( hash.hash == 452962688 )
     return "width";
 else if( hash.hash == 4122297310 )
     return "height";
 else if( hash.hash == 3586468480 )
     return "highPerLow";
 else if( hash.hash == 443065316 )
     return "maxLodLevel";
 else if( hash.hash == 946246513 )
     return "gridDistance";
 else if( hash.hash == 2170562455 )
     return "maxHeight";
 else if( hash.hash == 316436384 )
     return "minHeight";
 else if( hash.hash == 4283592115 )
     return "heightMap";
 else if( hash.hash == 3548226499 )
     return "heightFormat";
 else if( hash.hash == 4167755735 )
     return "heightRangeMax";
 else if( hash.hash == 3494717177 )
     return "heightRangeMin";
 else if( hash.hash == 1508369315 )
     return "comboTexture";
 else if( hash.hash == 2003906452 )
     return "comboFormat";
 else if( hash.hash == 3214045617 )
     return "materialIds";
 else if( hash.hash == 2104978212 )
     return "configrationIds";
 else if( hash.hash == 438047989 )
     return "layoutDescription";
 else
     return "";
}