#include "common/common.bt"
#include "common/gr_terrain_common.bt"

typedef struct
{
	//Assert(parentof(this).Flags == 0); 
    Assert(parentof(this).ParentNodeOffset == 0); Assert(parentof(this).ChildNodeOffset == 0);

	local string name = ReadFoxDataString(parentof(this).Name);
	local uint dataSize = parentof(this).DataSize;

	// The size/sizeof(type)s are hacks. The actual file uses the LayoutDescription struct.
	switch (name)
	{
	case "param":
		struct
		{
		} Param <bgcolor=0x00aaff>;
		break;
	case "maxHeight":
		struct
		{
			float data[dataSize / sizeof(float)];
		} MaxHeight <bgcolor=0xff00aa>;
		break;
	case "minHeight":
		struct
		{
			float data[dataSize / sizeof(float)];
		} MinHeight <bgcolor=0xaaff00>;
		break;
	case "heightMap":
		struct
		{
			float data[dataSize / sizeof(float)];
		} HeightMap <bgcolor=0x99aacc>;
		break;
	case "comboTexture":
		struct
		{
			Pixel data[dataSize / sizeof(Pixel)];
		} ComboTexture <bgcolor=0x111199>;
		break;
	case "materialIds":
		struct
		{
			Pixel data[dataSize / sizeof(Pixel)];
		} MaterialIds <bgcolor=0x991111>;
		break;
	case "configrationIds":
		struct
		{
			uint data[dataSize / sizeof(uint)];
		} ConfigrationIds <bgcolor=0x119911>;
		break;
	case "layoutDescription":
		struct
		{
			uint64 UnknownA;
			uint64 UnknownB;

			uint TotalGridWidth;
			uint TotalGridHeight;

			uint CommonDescriptionOffset <hidden = true>;

			float MaxHeightWS;
			float MinHeightWS;

			float GridDistance;
			ushort LodCount;

			FAlign(16);

			FSeek(startof(this) + 0x18 + CommonDescriptionOffset);

			TerrainCommonDescription CommonDescription;

			FAlign(16);
		} LayoutDescription <bgcolor=0x999900>;
		break;
	default:
		Assert(false, "Unknown node");
	}
} TRE2;

#define FOX_DATA_PAYLOAD TRE2

#include "common/FoxData_common.bt"

FoxDataHeader Header;
//Assert(Header.Version == 4);

FSeek(Header.NodesOffset);

FoxDataNodes Nodes;