//------------------------------------------------
LittleEndian();

typedef struct
{
    uint hash<format=hex>;
} StrCode32 <read=(hash)>;

struct Pixel
{
    ubyte r<fgcolor=0xaaaaff>;
    ubyte g<fgcolor=0xaaffaa>;
    ubyte b<fgcolor=0xffaaaa>;
    ubyte a<fgcolor=0xaaaaaa>;
};

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; //sizeof(HeaderMetadata0)
    StrCode32 NameHash;
    uint NameStringOffset;
    float Value;
} HeaderMetadataFloat <read=Str("(%s, %f)", HashLookup(NameHash), Value)>;

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; // sizeof(HeaderMetadata0) or 0
    StrCode32 NameHash;
    uint NameStringOffset;
    uint Value;
} HeaderMetadataUInt <read=Str("(%s, %d)", HashLookup(NameHash), Value)>;

typedef struct
{
    local uint SelfStartPos = FTell();

    StrCode32 NameHash;
    uint NameStringOffsetRelative;
    uint padding0<hidden=true>; Assert(padding0 == 0);
    uint DataOffset;
    uint DataSize;
    uint padding1<hidden=true>; Assert(padding1 == 0);
    uint Unknown0;
    int PreviousEntryOffset;
    int NextEntryOffset;
    uint Unknown1; // Assert(Unknown1 == 0x30 || Unknown1 == 0);
    uint padding2<hidden=true>; Assert(padding2 == 0);
    uint padding3<hidden=true>; Assert(padding3 == 0);
} HeaderMetadataTexture <read=Str("%s", HashLookup(NameHash))>;

struct
{
    uint Type;
    uint FirstSectionOffset; Assert(FirstSectionOffset == 0x20);
    uint FileSize;
    StrCode32 NameHash <read=HashLookup(this)>;
    uint NameStringOffset;

    FSeek(FirstSectionOffset);

    HeaderMetadataTexture ParamParameterDefinition<bgcolor=0xff9999>;
    HeaderMetadataUInt WidthParameter<bgcolor=0xff9900>;
    HeaderMetadataUInt HeightParameter<bgcolor=0x00ff99>;
    HeaderMetadataUInt HighPerLowParameter<bgcolor=0x0099ff>;
    HeaderMetadataUInt MaxLodLevelParameter<bgcolor=0xff0099>;
    HeaderMetadataFloat GridDistanceParameter<bgcolor=0x009999>;

    HeaderMetadataTexture HeightMapParameterDefinition<bgcolor=0x999900>;
    HeaderMetadataUInt HeightFormatParameter<bgcolor=0x990099>;
    HeaderMetadataFloat HeightRangeMaxParameter<bgcolor=0xff0909>;
    HeaderMetadataFloat HeightRangeMinParameter<bgcolor=0x09ff09>;

    HeaderMetadataTexture ComboTextureParameterDefinition<bgcolor=0x0909ff>;
    HeaderMetadataUInt ComboFormatParameter<bgcolor=0xaacc99>;

    HeaderMetadataTexture MaxHeightParameterDefinition<bgcolor=0x9999ff>;
    HeaderMetadataTexture MinHeightParameterDefinition<bgcolor=0xff99ff>;
    HeaderMetadataTexture MaterialIdsParameterDefinition<bgcolor=0x99ffff>;
    HeaderMetadataTexture ConfigrationIdsParameterDefinition<bgcolor=0x99ff99>;
    HeaderMetadataTexture LayoutDescriptionParameterDefinition<bgcolor=0xffff99>;
} Header<bgcolor=0xaaaaaa>;

FSeek(Header.LayoutDescriptionParameterDefinition.SelfStartPos);
FSkip(Header.LayoutDescriptionParameterDefinition.DataOffset);
FSkip(16);
struct 
{
    uint width;
    uint height;
    uint headerUnknown5; //bit
    float maxHeight;
    float minHeight;

    float headerUnknown6;
    int headerUnknown7;
    int headerUnknown8;
    int headerUnknown9;

    float maxHeightAgain;
    float minHeightAgain;

    // Many of these appear to be offsets into the heightMap.
    short vals2[28];
    uint miniHeightMapWidth;
    uint miniHeightMapHeight;
    short vals3[10];
} LayoutDescriptionData;

FSeek(Header.ParamParameterDefinition.SelfStartPos);
FSkip(Header.ParamParameterDefinition.DataOffset);
struct
{
    float data[Header.ParamParameterDefinition.DataSize / sizeof(float)];
} ParamMap <bgcolor=0x00aaff>;

FSeek(Header.MaxHeightParameterDefinition.SelfStartPos);
FSkip(Header.MaxHeightParameterDefinition.DataOffset);
struct
{
    float data[Header.MaxHeightParameterDefinition.DataSize / sizeof(float)];
} MaxHeightMap <bgcolor=0xff00aa>;

FSeek(Header.MinHeightParameterDefinition.SelfStartPos);
FSkip(Header.MinHeightParameterDefinition.DataOffset);
struct
{
    float data[Header.MinHeightParameterDefinition.DataSize / sizeof(float)];
} MinHeightMap <bgcolor=0xaaff00>;

FSeek(Header.HeightMapParameterDefinition.SelfStartPos);
FSkip(Header.HeightMapParameterDefinition.DataOffset);
struct
{
    float data[Header.HeightMapParameterDefinition.DataSize / sizeof(float)];
} HeightMap <bgcolor=0x99aacc>;

FSeek(Header.ComboTextureParameterDefinition.SelfStartPos);
FSkip(Header.ComboTextureParameterDefinition.DataOffset);
struct
{
    Pixel data[Header.ComboTextureParameterDefinition.DataSize / sizeof(Pixel)];
} ComboTexture <bgcolor=0x111199>;

FSeek(Header.MaterialIdsParameterDefinition.SelfStartPos);
FSkip(Header.MaterialIdsParameterDefinition.DataOffset);
struct
{
    Pixel data[Header.MaterialIdsParameterDefinition.DataSize / sizeof(Pixel)];
} MaterialIds <bgcolor=0x991111>;

FSeek(Header.ConfigrationIdsParameterDefinition.SelfStartPos);
FSkip(Header.ConfigrationIdsParameterDefinition.DataOffset);
struct
{
    Pixel data[Header.ConfigrationIdsParameterDefinition.DataSize / sizeof(Pixel)];
} ConfigrationIds <bgcolor=0x119911>;

string HashLookup( StrCode32& hash )
{
 if( hash.hash == 1840366096 )
     return "tre2";
 else if( hash.hash == 101154120 )
     return "param";
 else if( hash.hash == 452962688 )
     return "width";
 else if( hash.hash == 4122297310 )
     return "height";
 else if( hash.hash == 3586468480 )
     return "highPerLow";
 else if( hash.hash == 443065316 )
     return "maxLodLevel";
 else if( hash.hash == 946246513 )
     return "gridDistance";
 else if( hash.hash == 2170562455 )
     return "maxHeight";
 else if( hash.hash == 316436384 )
     return "minHeight";
 else if( hash.hash == 4283592115 )
     return "heightMap";
 else if( hash.hash == 3548226499 )
     return "heightFormat";
 else if( hash.hash == 4167755735 )
     return "heightRangeMax";
 else if( hash.hash == 3494717177 )
     return "heightRangeMin";
 else if( hash.hash == 1508369315 )
     return "comboTexture";
 else if( hash.hash == 2003906452 )
     return "comboFormat";
 else if( hash.hash == 3214045617 )
     return "materialIds";
 else if( hash.hash == 2104978212 )
     return "configrationIds";
 else if( hash.hash == 438047989 )
     return "layoutDescription";
 else
     return "";
}