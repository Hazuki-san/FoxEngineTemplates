/**
* Note: The tags seem to be referenced in TppRequestWeatherTagTrapExecDataElement entities in fox2
*/

#include "common/common.bt"

enum <ushort> Weather
{
    SUNNY=0,
    CLOUDY=1,
    RAINY=2,
    SANDSTORM=3,
    FOGGY=4,
    POURING=5,
};

enum <ushort> WeatherParamGroupType{
    TppGlobalVolumetricFog=1,
    TppAtmosphere_TppSky=2,
    GrPluginSettings=3,
    ColorCorrection=4,
    WeatherParameters=7,
    GenerativeClouds=10,
};

enum <ushort> WeatherParamType{
        //TppGlobalVolumetricFog
    TppGlobalVolumetricFog_density=257,
    TppGlobalVolumetricFog_color=258,
    TppGlobalVolumetricFog_luminance=260,
    
    TppGlobalVolumetricFog_skyAlbedo=264,
    TppGlobalVolumetricFog_rayleighScattering=265,
    TppGlobalVolumetricFog_mieScattering=266,
    
    TppGlobalVolumetricFog_mieAnisotropy=268,
    TppGlobalVolumetricFog_exposureOffset0=269,
    TppGlobalVolumetricFog_exposureOffset0_Ev=270,
    TppGlobalVolumetricFog_exposureOffset1=271,
    TppGlobalVolumetricFog_exposureOffset1_Ev=272,
    TppGlobalVolumetricFog_exposureOffset2=273,
    TppGlobalVolumetricFog_exposureOffset2_Ev=274,
    TppGlobalVolumetricFog_power=275,
    TppGlobalVolumetricFog_fogDirLightGain=276,
    
        // TppAtmosphere
            // 2 is TppAtmosphere.daySkyAmbientScale or skyEnable
            // 4 is TppAtmosphere.starLight
            // 5 is ???
            // 6 is TppAtmosphere.skyColorSunScale
            // 7 is either skyLightSunScale or skyLightSunScaleOcean
            // 9 is ???
            // 10 is TppAtmosphere.shadowRange
            // 11 is TppAtmosphere.shadowRangeExtra
            // 12 is TppAtmosphere.hiResShadowRange
            // 13 is TppAtmosphere.shadowProjectionRange
            // 14 is TppAtmosphere.shadowfadeRange
            // 15 is TppAtmosphere.selfShadowBias
            // 16 is TppAtmosphere.shadowRangeLimit
            // 17 is TppAtmosphere.shadowRangeFocalLengthConnectionScale
            // 18 is either TppAtmosphere.influenceOfFog or TppAtmosphere.fogFalloff
            // 37 is TppAtmosphere.dirLightFadeStart
            // 38 is TppAtmosphere.dirLightFadeLength
            // 39 is TppAtmosphere.dirLightFadeEnable
            // 40 is TppAtmosphere.fogFalloff
            // 41 is TppAtmosphere.fogFalloffStart
            // 44 is ??? (followCameraEnable?)
            // 45 is TppAtmosphere.offsetPosY
            // 46 is TppAtmosphere.skyColor
            // 47 is TppAtmosphere.daySkyAmbientScale or skyEnable
            // 48 is TppAtmosphere.environmentSpecular_ShScale0
            // 49 is TppAtmosphere.environmentSpecular_ShScale0_Ev
            // 50 is TppAtmosphere.environmentSpecular_ShScale1
            // 49 is TppAtmosphere.environmentSpecular_ShScale1_Ev
            // 52 is TppAtmosphere.environmentSpecular_ShScale2
            // 53 is TppAtmosphere.environmentSpecular_ShScale2_Ev
            // 54 is TppAtmosphere.environmentSpecular_minFrontReflectionRate
            // 55 is TppAtmosphere.environmentSpecular_Color
            // 56 is ???
            // 57 is TppAtmosphere.divisionNumOfSteppedMove
            // 58 is ???
            // 64 is TppAtmosphere.starLuminanceScale
            // 65 is TppAtmosphere.skyLightSunScale or skyLightSunScaleOcean
            // 66 is ???
    TppAtmosphere_daySkyAmbientScale=514, //0 in avatar_space and low in volginride, 0.5 in nonsunny
    TppAtmosphere_starLight=516,
    
    TppAtmosphere_skyColorSunScale=518,
    TppAtmosphere_skyLightSunScale=519,
    
    TppAtmosphere_shadowRange=522,
    TppAtmosphere_shadowRangeExtra=523,
    TppAtmosphere_hiResShadowRange=524,
    TppAtmosphere_shadowProjectionRange=525,
    TppAtmosphere_shadowfadeRange=526,
    TppAtmosphere_selfShadowBias=527,
    TppAtmosphere_shadowRangeLimit=528,
    TppAtmosphere_shadowRangeFoculLengthConnectionScale=529,
    TppAtmosphere_influenceOfFog=530,
    
    TppAtmosphere_dirLightFadeStart=549,
    TppAtmosphere_dirLightFadeLength=550,
    TppAtmosphere_dirLightFadeEnable=551,
    TppAtmosphere_fogFalloff=552,
    TppAtmosphere_fogFalloffStart=553,
    
    TppAtmosphere_followCameraEnable=556,
    
    TppAtmosphere_offsetPosY=557,
            
    TppAtmosphere_skyColor=558,
    TppAtmosphere_skyEnable=559, //cypr group_photo is 0, but cypr default and other uses is 1
    TppAtmosphere_enviromentSpecular_ShScale0=560,
    TppAtmosphere_enviromentSpecular_ShScale0_Ev=561,
    TppAtmosphere_enviromentSpecular_ShScale1=562,
    TppAtmosphere_enviromentSpecular_ShScale1_Ev=563,
    TppAtmosphere_enviromentSpecular_ShScale2=564,
    TppAtmosphere_enviromentSpecular_ShScale2_Ev=565,
    TppAtmosphere_enviromentSpecular_minFrontReflectionRate=566,
    TppAtmosphere_enviromentSpecular_Color=567,
    TppAtmosphere_enableSteppedMoveOfDirectionalLight=568,
    TppAtmosphere_divisionNumOfSteppedMove=569,
    TppAtmosphere_interpolateTimeInSecond=570,
            
    TppAtmosphere_starLuminanceScale=576,
    TppAtmosphere_skyLightSunScaleOcean=577,
        //TppSky
            // ---
            // TppSky
            // ---
            // 129 is TppSky.diffusion
            // 130 is TppSky.cloudDensity
            // 131 is TppSky.dirLightGain
            // 132 is TppSky.inCloudScatterGain
            // 133 is TppSky.ambLightGain
            // 134 is TppSky.cylCloudDensity
            // 135 is TppSky.cylBackScatGain
            // 136 is TppSky.cylFrontDirGain
            // 137 is TppSky.cylfrontAmbGain
            // 141 is TppSky.dom2Density
            // 142 is TppSky.dom3Density
            // etc
    TppSky_diffusion=641,
    TppSky_cloudDensity=642,
    TppSky_dirLightGain=643,
    TppSky_inCloudScatterGain=644,
    TppSky_ambLightGain=645,
    TppSky_cylCloudDensity=646,
    TppSky_cylBackScatGain=647,
    TppSky_cylFrontDirGain=648,
    TppSky_cylFrontAmbGain=649,
    TppSky_cloudInfluenceOfFog=650,
    TppSky_cloudFogFalloff=651,
    TppSky_cloudFogFalloffStart=652,
    TppSky_dom2Density=653,
    TppSky_dom3Density=654,
    TppSky_cloudDensityMax=655,
    TppSky_dom2DensityMax=656,
    TppSky_dom3DensityMax=657,
    TppSky_cylCloudDensityMax=658,
    TppSky_cloudInfluenceOfFogMin=659,  
        //GrPluginSettings
            // ---
            // GrPluginSettings
            // ---
            // 1 is GrPluginSettings.minExposure
            // 2 is GrPluginSettings.maxExposure
            // 3 is GrPluginSettings.keyValue
            // etc
    GrPluginSettings_minExposure=769,
    GrPluginSettings_maxExposure=770,
            
    GrPluginSettings_bloomSize=775,
    
    GrPluginSettings_keyValue=777,
    
    GrPluginSettings_addExpComp0=782,
    GrPluginSettings_addExpComp0_Ev=783,
    GrPluginSettings_addExpComp1=784,
    GrPluginSettings_addExpComp1_Ev=785,
    GrPluginSettings_addExpComp2=786,
    GrPluginSettings_addExpComp2_Ev=787,
    GrPluginSettings_bloomBrightnessExtraction=788,
    GrPluginSettings_bloomWeight=789,
        //ColorCorrection
            // ---
            // ColorCorrection
            // ---
            // 1 is ColorCorrection.colorScale
            // 8 is ColorCorrection.colorScale2
            // etc
    ColorCorrection_colorScale=1025,
    ColorCorrection_textureLUT=1030, //1030 LUT
    ColorCorrection_colorScale2=1032,
    ColorCorrection_filterLUT=1035, //1035 LUT
        //WeatherParameters
    //1793 Float - rain strength (RAINY always 1, in gntn RAINY is 0.5 and POURING is 1, other weathers 0)
    WeatherParameters_windSpeed=1794,
        //GenerativeClouds
    GenerativeClouds_gcEnable=2561,
    GenerativeClouds_gcDensity=2562,
    GenerativeClouds_gcDensityMax=2563,
    GenerativeClouds_gcScattering=2564,
    GenerativeClouds_gcAbsorption=2565,
    GenerativeClouds_gcMieAnisotropy=2566,
    GenerativeClouds_gcDirLightGain=2567,
    GenerativeClouds_gcSkyLightGain=2568,
    GenerativeClouds_gcRayMarchDepth=2569,
    GenerativeClouds_gcExponent0=2570,
    GenerativeClouds_gcExponent0Max=2571,
    GenerativeClouds_gcExponent1=2572,
    GenerativeClouds_gcExponent1Max=2573,
};

typedef struct
{
	float r;
	float g;
	float b;
} Color <read = Str("(%g, %g, %g)", r, g, b)>;

enum<ubyte> ColorMode
{
    Float = 1,
    RGB = 2,
    Path = 3,   //Unused
    String = 4  //LUT
};

string ReadUInt24HTimeTwpf(uint time)
{
	//hhttps://github.com/youarebritish/TwpfTool/blob/master/TwpfTool/SpreadsheetBuilder.cs
	local byte hours = Floor(time / 60.0f);
	local byte minutes = time - (hours * 60);
	return Str("%02d:%02d",hours,minutes);
};

LittleEndian();

struct Header
{
    char format[7];
    byte version;
    int headerSize; Assert(headerSize==FTell());
} header <bgcolor=0x6741DA>;

struct Offsets
{
    int totalWeatherParamGroupCount;
    int tagCount;

    int weatherParamGroupsOffsets[totalWeatherParamGroupCount - 1];
    //rlc guess first position is assumed to be here
} offsets <bgcolor=0xBAB366>;

struct WeatherParameterGroup{
	ushort entryCount <hidden=true>;

	// Might specify the type of the struct (cross-reference across files)
	// Yep, across TPP files, this seems to hold
	// What confuses me though is that there are often two entries of value 2
	// Maybe this should be taken as a uint and you merely extract the count from it
	WeatherParamGroupType groupType;

	uint entryOffsets[entryCount] <hidden=true>;

	// Each entry is linked to a parameter (e.g., shadowRange) and contains curves for tags
	struct WeatherParamTagGroup{
		ubyte entryCount <hidden=true>;
		ColorMode valueType;
        WeatherParamType parameterType;
			
		uint entryOffsets[entryCount] <hidden=true>;
			
		struct WeatherParameterTag{
			uint tagOffset <fgcolor=0xFFFFFF, hidden=true>;
			ubyte numFogCurves <hidden=true>;
			ushort tagIndex <hidden=true>;
	
			ubyte padding <hidden=true>;
			Assert(padding == 0);
	
			uint fogCurveOffsets[numFogCurves] <optimize=false, hidden=true>;
			
			struct WeatherParameterCurve{
				Weather weatherId;
				ushort numCurveValues <hidden=true>;
			
				uint curveValueOffsets[numCurveValues] <optimize=false, hidden=true>;
			
				struct WeatherParameterCurveKey{
					uint time <read=ReadUInt24HTimeTwpf(this)>;
	
					switch(valueType)
					{
						case Float:
							float strength;
							break;
						case RGB:
							Color color;
							break;
						case Path:
							PathCode64 pathHash;
                            break;
						case String:
							StrCode lutHash;
							break;
						default:
							Assert(false);
							break;
					}
				} weatherParamCurveKey[numCurveValues] <optimize=false>;
			} weatherParamCurve[numFogCurves] <read=weatherId, optimize=false>;
		} weatherParamTag[entryCount] <name=GetTag, read=GetTag, optimize=false>;
	} WeatherParameterTagGroup[entryCount] <optimize=false>;
} weatherParamGroup[offsets.totalWeatherParamGroupCount] <bgcolor=0x533717, optimize=false>;
string GetTag(WeatherParameterTag &entry)
{
    local int position = FTell();
    string tag = ReadString(entry.tagOffset);
    FSeek(position);
    return tag;
}

struct Tag{
    char tagName[]; //rlc sometimes header count is more than there are actual strings here!
} tag[offsets.tagCount] <read=tagName,optimize=false>;

// NOTE
// The footer names are called "tags"
// And are called like: WeatherManager.RequestTag("sortie_space", 0 )