//------------------------------------------------
LittleEndian();

typedef struct
{
    uint hash<format=hex>;
} StrCode32 <read=(hash)>;

typedef struct
{
    hfloat x;
    hfloat y;
    hfloat z;
    hfloat w;
} HQuaternion <read=Str("(%f, %f, %f, %f)", x, y, z, w)>;

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; //sizeof(HeaderMetadata0)
    StrCode32 NameHash;
    uint NameStringOffset;
    float Value;
} FloatMetadata <read=Str("(%s, %f)", HashLookup(NameHash), Value)>;

typedef struct
{
    ushort VariableType; // 0: uint, 2: float
    ushort NextMetadataOffset; // sizeof(HeaderMetadata0) or 0
    StrCode32 NameHash;
    uint NameStringOffset;
    uint Value;
} UIntMetadata <read=Str("(%s, %d)", HashLookup(NameHash), Value)>;

typedef struct
{
    local uint SelfStartPos = FTell();

    StrCode32 NameHash <read=HashLookup(this)>; // 0 in OBR Type==3 ObjectBrush entry
    uint NameStringOffsetRelative;
    uint Unknown<hidden=true>; // Only nonzero in HTRE Type==4 files and OBR Type==3 files
    uint DataOffset; // 0 means no data
    uint DataSize; // 0 means no data
    uint EditParamOffset; Assert(EditParamOffset == 0);             // Only nonzero for configrationIds entry in HTRE Type==3 files
    uint ConfigrationIdsOffset; Assert(ConfigrationIdsOffset == 0); // exe searches for this entry, Only nonzero for editParam entry in HTRE Type==3 files
    int PreviousEntryOffset; // 0 means no previous entries
    int NextEntryOffset; // 0 means no more entries
    uint ScalarSubParamOffset; // 0 means no subparams
    uint padding2<hidden=true>; Assert(padding2 == 0);
    uint padding3<hidden=true>; Assert(padding3 == 0);
} SectionMetadata <read=Str("%s", HashLookup(NameHash))>;

struct
{
    uint Type;
    uint FirstSectionOffset; Assert(FirstSectionOffset == 0x20);
    uint FileSize;
    StrCode32 NameHash <read=HashLookup(this)>;
    uint NameStringOffset;
} Header<bgcolor=0xaaaaaa>;

FSeek(Header.FirstSectionOffset);

struct 
{
    SectionMetadata ObjectBrushDefinition;
    FSeek(ObjectBrushDefinition.SelfStartPos);
    FSkip(ObjectBrushDefinition.ScalarSubParamOffset);
    FloatMetadata BlockSizeWParameter; // block size in meters
    FloatMetadata BlockSizeHParameter; // block size in meters
    UIntMetadata NumBlocksWParameter; // numBlocksWmetadata and numBlocksHmetadata - Block count in height/width of block field. 
    UIntMetadata NumBlocksHParameter; // Even if dataset numBlocks is 0, it can be 2 here.
    UIntMetadata NumObjectsParameter;
} Metadata <bgcolor=0x7E846B>;

FSeek(Metadata.ObjectBrushDefinition.SelfStartPos);
FSkip(Metadata.ObjectBrushDefinition.DataOffset);

struct Object
{
    float YPositionFWS;
	short XPositionEFOS;
	short ZPositionEFOS;
    HQuaternion Rotation;
    ushort BlockIndex;
    ubyte PluginBrushIndex; // Index of ObjBrush dataset entity's pluginHandle list entry
    ubyte NormalizedScale; // scale = lerp(minScale, maxScale, NormalizedScale) found in DataSet plugin definition
    uint GlobalObjectIndex;
} Objects[Metadata.NumObjectsParameter.Value] <bgcolor=0x8CAF5A>;

string HashLookup( StrCode32& hash )
{
 if( hash.hash == 2283831924 )
     return "ObjectBrush";
 else if( hash.hash == 1412644188 )
     return "blockSizeW";
 else if( hash.hash == 2407288378 )
     return "blockSizeH";
 else if( hash.hash == 2914376208 )
     return "numBlocksW";
 else if( hash.hash == 2310196218 )
     return "numBlocksH";
 else if( hash.hash == 3310217448 )
     return "numObjects";
 else
     return "";
}