#include "common/common.bt"
#include "common/anim_common.bt"

string ResolveHashFunc(StrCode32& hash)
{
	switch (hash.hash)
	{
	case 3933341002: return "ROOT";
	case 3254096966: return "DEMO";
	case 2620425302: return "CAMERA";
	case 3150281601: return "MOVE";
	case 2862912361: return "CameraParam";
	case 1885607306: return "SI Frame";
	case 1889896775: return "SKEL";
	case 2454300086: return "MESH_EVENT";
	case 143688520: return "MOTION";
	case 2215748180: return "MODEL";
	case 3736262940: return "SKELINFO";
	case 917055795: return "MTPINFO";
	case 2846912397: return "MTEV";
	case 494270195: return "MTP";
	case 2250865118: return "SHADER";
	case 3937479969: return "MTP_LIST";
	case 4042487769: return "MTP_PARENT_LIST";
	case 3187573380: return "LOCATOR";
	case 2036377104: return "GLOBALSRT";
	case 2053459263: return "Unknown";

	// Parameter names
	case 2570203771: return "TARGET_NAME";
	case 3426329078: return "SLOPE_DIR";
	case 35201703: return "SLOPE_ANGLE";

	default: return "";
	}
}

struct Header
{
	uint Version; // June 23rd, 2014 
    if (Version==372703500) { BigEndian();BitfieldRightToLeft();}
	uint FileSize; Assert(FileSize == FileSize());
	uint sectionParamCount; Assert(sectionParamCount==4); // Four sections always
	uint objectCount;
		
	struct SectionParams
	{
		uint sectionId;
		uint sectionEntriesCount; // Always same as objectCount, amount of Section 2 entry offsets
		uint sectionStartOffset; // Offset to section start, from the start of the line
		uint sectionSize;
	} sectionParams[sectionParamCount] <fgcolor=0x8694EB>; // ROOT Section Params
	
} header <bgcolor=0xB3A797>;

FSeek(startof(header.sectionParams[0]) + header.sectionParams[0].sectionStartOffset);

struct
{
	local int64 trkIdx;
	for (trkIdx = 0; trkIdx < header.sectionParams[0].sectionEntriesCount; trkIdx++)
		uint TracksOffset <optimize = true>; // Global offsets to nodes' tracks
} TracksOffsets <bgcolor=0x8694EB>;

FSeek(startof(header.sectionParams[1]) + header.sectionParams[1].sectionStartOffset);

struct FoxDataString;
struct SAND
{
	switch (ResolveHashFunc(parentof(this).Name.Hash))
	{
	case "MOVE":
	case "CameraParam":
	case "SI Frame":
	case "SKEL":
	case "Unknown":
	case "MTP":
		TrackHeader Tracks;
		break;
	case "MTP_LIST":
	case "MTP_PARENT_LIST":
		struct ObjectMTPList
		{
			uint EntryCount <hidden = true>;
			local int64 mtpLstIdx;
			for (mtpLstIdx = 0; mtpLstIdx < EntryCount; mtpLstIdx++)
			{
				FoxDataString Entry <optimize = true>;
			}
		} List <bgcolor = 0xF38ADE>;
		break;
    case "MOTION":
        TrackHeader Tracks;
        break;
	default:
		{
			if (parentof(this).ParentNodeOffset != 0)
			{
				if (ReadUInt(startof(parentof(this)) + parentof(this).ParentNodeOffset) == 2250865118 /*SHADER*/)
				{
					TrackHeader Tracks;
				}
			}
		}
	}
};

#define FOX_DATA_FLAG_IS_HAS_PAYLOAD
#define FOX_DATA_RESOLVE_HASH_FUNC ResolveHashFunc

#define FOX_DATA_PAYLOAD SAND

#include "common/FoxData_common.bt"

FoxDataNodes Nodes;

FSeek(startof(header.sectionParams[2]) + header.sectionParams[2].sectionStartOffset);

struct
{
	local int64 cmIdx;
	for (cmIdx = 0; cmIdx < header.sectionParams[2].sectionEntriesCount; cmIdx++)
	{
		struct CameraObject
		{
			StrCode32 Name; // Hash of the object name, sometimes CameraParam or SI Frame.
			uint Id;
		} Object <read = Str("Name: %u, Id: %u", Name.hash, Id), optimize = false>;
	}
} CameraObjects <bgcolor=0xB9E7CA>;

FSeek(startof(header.sectionParams[3]) + header.sectionParams[3].sectionStartOffset);

struct
{
	local int64 moIdx;
	for (moIdx = 0; moIdx < header.sectionParams[3].sectionEntriesCount; moIdx++)
	{
		struct MoveObject
		{
			StrCode32 Name; // Hash of the object name from fox2, ie HM_sna0_main0_def
			short aShort0;
			short aShort1; // These can be FFFF
			short aShort2;
			short aShort3;
			uint offset;
		} Object <read = Str("Name: %u", Name.hash), optimize = false>;
	}
} MoveObjects <bgcolor=0x9A7F7E>;