LittleEndian();

#include "common/common.bt"
#include "common/geo_common.bt"

#define COLOR_HEADER 0x9EADC8
#define COLOR_SECONDARYHEADER 0xDFEFAA
#define COLOR_ENTITYASSOCIATIONS 0xAED2E8
#define COLOR_GRID 0x8ADEF3
#define COLOR_SUBGRID 0xF7F205
#define COLOR_ENTITYLIST 0x00AAFF
#define COLOR_HASHES 0xB9E8DD

struct
{
	uint Version;
	switch (Version)
	{
	case 0x00030000:
		break;
	case 0x00000300:
		BigEndian();
		break;
	default:
		Assert(false, "Invalid version.");
	}

	uint SecondaryHeaderOffset;

	uint FileSize;

	FSkip(20);
} Header <bgcolor = COLOR_HEADER>;

FSeek(Header.SecondaryHeaderOffset);

struct
{
    local uint SelfStartPos = FTell();

	uint Grid0Offset;

	uint Grid1Offset;

	uint EntityListCount;

	uint HashesOffset; // Linkage not immediately clear. For example,
	                   // afgh_bridge_fpkl_edit_tmp_large_win.geobv has three hashes:
					   // /Assets/tpp/level/location/afgh/block_large/bridge/afgh_bridge_light.fox2, 
					   // /Assets/tpp/level/location/afgh/block_large/bridge/afgh_bridge_gimmick.fox2, 
					   // /Assets/tpp/level/location/afgh/block_large/bridge/afgh_bridge_asset.fox2

	PathCode64 PlaceHolder <hidden = true>; Assert(PlaceHolder.hash == 0);

	uint EntityListOffset;

	uint PlaceHolderListOffset;
} SecondaryHeader <bgcolor = COLOR_SECONDARYHEADER>;

typedef struct
{
	ushort IndexCount <hidden = true>;
	ushort Indices [IndexCount];
} EntityAssocations <bgcolor = COLOR_ENTITYASSOCIATIONS>;

// All float values are just guesses
typedef struct
{
	local uint SelfStartPos = FTell();

	Vector3 UnknownV0;
	uint Unknown0;

	Vector3 UnknownV1;
	uint GridCountX;

	Vector3 UnknownV2;
	uint GridCountY;

	Vector3 GridSizeXYZ;
	uint GridCountZ;

	float SubGridSizeX;
	float SubGridSizeZ;
	uint SubGridCountX; Assert(SubGridCountX == 8);
	uint SubGridCountZ; Assert(SubGridCountZ == 8);

	struct
	{
		struct
		{
			ushort Offset; // Offset in lines; offset * 16
			ushort DataSize : 15; // Size in lines; size * 16
			ushort IsSubGrid : 1;
		} CellDefinitions[GridCountX * GridCountY * GridCountZ] <hidden = true>;

		local uint clIdx;
		for (clIdx = 0; clIdx < GridCountX * GridCountY * GridCountZ; clIdx++)
		{
			struct
			{
				if (CellDefinitions[clIdx].DataSize != 0)
				{
					FSeek(SelfStartPos + CellDefinitions[clIdx].Offset * 16);

					if (CellDefinitions[clIdx].IsSubGrid == 0)
					{
						EntityAssocations Entities;
					}
					else
					{
						struct
						{
							local uint SelfStartPos = FTell();

							Vector3 UnknownV4;
							uint Unknown0;

							struct
							{
								ushort SubCellOffsets[SubGridCountX * SubGridCountZ] <hidden = true>;
								
								local uint sbClIdx;
								for (sbClIdx = 0; sbClIdx < SubGridCountX * SubGridCountZ; sbClIdx++)
								{
									struct
									{
										if (SubCellOffsets[sbClIdx] != 0)
										{
											FSeek(SelfStartPos + SubCellOffsets[sbClIdx] * 16);

											EntityAssocations Entities;
										}
									} Cell;
								}
							} Cells;
						} SubGrid <bgcolor = COLOR_SUBGRID>;
					}
				}
			} Cell;
		}
	} Cells;
} Grid <bgcolor = COLOR_GRID>;

FSeek(SecondaryHeader.SelfStartPos + SecondaryHeader.Grid0Offset);
Grid Grid0;

FSeek(SecondaryHeader.SelfStartPos + SecondaryHeader.Grid1Offset);
Grid Grid1;

FSeek(SecondaryHeader.SelfStartPos + SecondaryHeader.EntityListOffset);
struct
{
	uint ArrayIndex; // For StaticModelArrays
	StrCode32 Hash; // References StaticModels and StaticModelArrays
} EntityList[SecondaryHeader.EntityListCount] <read = Str("%u[%d]", Hash.hash, ArrayIndex), bgcolor = COLOR_ENTITYLIST>;

// Game patches this section with pointers to the Entities so it doesn't have to perform the hash resolution every time. Not directly into the DataSet but perhaps their DataBodies or something.
FSeek(SecondaryHeader.SelfStartPos + SecondaryHeader.PlaceHolderListOffset);
uint64 PlaceHolderList[SecondaryHeader.EntityListCount];

FSeek(SecondaryHeader.SelfStartPos + SecondaryHeader.HashesOffset);
struct
{
	uint Count <hidden = true>;

	uint Padding0 <hidden = true>; Assert(Padding0 == 0);

	PathCode64 DataSetPaths[Count];
} Hashes <bgcolor = COLOR_HASHES>;