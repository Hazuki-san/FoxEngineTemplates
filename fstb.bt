LittleEndian();

struct Header
{
    // The signature is FSTB in TPP, FSTBwin in GZ
    char signature[7] <hidden=true>;
    byte type;                  // 2 for OMBS; 3 for GNTN; 4 for MBQF; 5 for AFGH/MAFR

    uint sections;
    uint section0Offset;        // Always 24 in TPP format, 0 in GZ format
    uint isTppFormat;           // 1 in TPP, 0 in GZ

    uint packCommonFpkOffset;   // This is 0 in gntn?
} header <bgcolor=0xFCFCFC>;

struct BlockDefinition
{
    uint name;

    uint magicNumber;
    Assert(magicNumber == 1);

    uint n2;                            // 0 in normals, 2 in weird structs (1 in SSD)

    // In weirds, this points to a nonexistent fmdl.
    uint fileListOffset;
    uint additionalFileCount;            // 0 in normals, 2 in weirds (1 in SSD)
    uint valsOffset;
    uint smallBlocksOffset;
    uint smallBlockDefinitionCount;

    struct SmallBlockDefinition
    {
        ushort x;
        ushort y;
    };

    SmallBlockDefinition blockStart;    // Min values in the smallBlocks
    SmallBlockDefinition blockEnd;      // Max values in the smallBlocks

    uint fpkOffset;

    // Sometimes fmdls, not fpks!
    // ...And none of those fmdls exist?
    uint additionalFileOffsets[additionalFileCount];

    // Weird part
    if (n2 != 0)
    {
        // These offsets appear to be the start and end of the padding.
        uint weirdOffsets[n2];
        FSkip(4 * n2);
        SmallBlockDefinition weirdBlock;     // This block is (always?) outside the block's range.
        ushort weirdIndex1;
        ushort weirdIndex2;
        uint weirdVals[(smallBlocksOffset - valsOffset)/4 - 6];
    }

    SmallBlockDefinition smallBlocks[smallBlockDefinitionCount] <optimize=false>;
};

// Section 0: Pack large
if (header.sections > 0)
{
    struct Section0
    {
        uint o1;         // In gntn, this is the common fpk offset, in mafr/afgh, it points to n1
        uint section2offset;
        uint blockCount;
    } section0 <bgcolor=0xF2F254>;

    struct Section1
    {
        uint blockDefinitionOffsets[section0.blockCount] <bgcolor=0xBFB15E>;
        BlockDefinition blockDefinitions[section0.blockCount] <optimize=false>;
    } section1 <comment="Large blocks", bgcolor=0x2A2B04, fgcolor=0xFCFCFC>;
}

// Section 1: Pack extra large
if (header.sections > 0 && section0.section2offset != 0)
{
    struct Section2
    {
        uint entryCount;
        uint offsets[entryCount];
        BlockDefinition entries[entryCount] <optimize=false>;
    } section2 <comment="Extra large blocks", bgcolor=0xE1A700, fgcolor=0xFCFCFC>;
}