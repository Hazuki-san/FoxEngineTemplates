LittleEndian();

struct Header
{
    // The signature is FSTB in TPP, FSTBwin in GZ
    char signature[4] <hidden=true>;

    ushort isBigEndian;
    if (isBigEndian)
        BigEndian();

    ushort type;                  // 2 for OMBS; 3 for GNTN; 4 for MBQF; 5 for AFGH/MAFR

    uint sections;
    uint section0Offset;        // Always 24 in TPP format, 0 in GZ format
    uint section1Count;           // 1 in TPP, 0 in GZ

    uint packCommonFpkOffset;   // This is 0 in gntn?
} header <bgcolor=0xFCFCFC>;

struct BlockDefinition
{
    uint nameHash;

    uint magicNumber;
    Assert(magicNumber == 1);

    uint n2;                            // 0 in normals, 2 in weird structs (1 in SSD)
    Assert(n2 < 3);

    uint superlowLodFmdlPathOffset;
    uint additionalFpkCount;
    Assert (additionalFpkCount == n2);

    uint paddingListOffset;
    uint smallBlocksOffset;
    uint smallBlockDefinitionCount;

    struct SmallBlockDefinition
    {
        ushort x;
        ushort y;
    };

    SmallBlockDefinition blockStart;    // Min values in the smallBlocks
    SmallBlockDefinition blockEnd;      // Max values in the smallBlocks

    uint fpkOffset;

    // Weird part
    if (additionalFpkCount != 0)
    {
        uint additionalFpkPathOffsets[additionalFpkCount];

        // These offsets appear to be the start and end of the padding.
        uint paddingOffsets[additionalFpkCount];
        FSkip(4 * additionalFpkCount);

        SmallBlockDefinition additionalBlockIndices;     // This block is (always?) outside the block's range.
        ushort weirdIndex1;
        ushort weirdIndex2;
        
        byte weirdVals[(smallBlocksOffset - paddingListOffset) - 24];
    }

    SmallBlockDefinition smallBlocks[smallBlockDefinitionCount] <optimize=false>;
};

// Section 0: Pack large
if (header.sections > 0)
{
    struct Section0
    {
        uint nextEntryOffset;
        uint section2offset;
    } section0 <bgcolor=0xF2F254>;

    struct Section1
    {
        uint blockCount;
        uint blockDefinitionOffsets[blockCount] <bgcolor=0xBFB15E>;
        BlockDefinition blockDefinitions[blockCount] <optimize=false>;
    } LargeBlockDefinitions <comment="Large blocks", bgcolor=0x2A2B04, fgcolor=0xFCFCFC>;
}

// Section 1: Pack extra large
if (header.sections > 0 && section0.section2offset != 0)
{
    struct Section2
    {
        uint entryCount;
        uint offsets[entryCount];
        BlockDefinition entries[entryCount] <optimize=false>;
    } ExtraLargeBlockDefinitions <comment="Extra large blocks", bgcolor=0xE1A700, fgcolor=0xFCFCFC>;
}