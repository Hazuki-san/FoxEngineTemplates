//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

/*
//Old
int32 unk0;
int count;
float length;
int unkn1;
int a, b,c,d;

typedef struct
{
    float f[10]<bgcolor=cLtGreen>;
}Entry<optimize=false>;
Entry entry[count];
*/

//Mot head
//Contains camera motion also

/*
BaseRy

short n =(MotionHead[frame] + 12) + 6)
int m = n & 0xfffff000
floay y = m * 0.00001526

MaxFrame
MotHead[i] + 12

MotionInfo
MotHead[i] + 12 +8



*/

int a[2]<hidden=true>;
if(a[1] == 0)
{
    FSeek(0);
    int64 count;
}
else
{
    FSeek(0);
    int count;
    int unkn;
}


int offset[count]<bgcolor=cLtGreen>;
typedef struct(int size)
{
    byte data[size];
}Data<optimize=false>;

//--------------End of Mot header
//Type 1 and 2 human
//type 3 4 camera (Enbu-1 or regular)
//no type 5

local int i = 0;
local int size = 0;
local int id = 0;
local int minID = 0;
local int maxID = 0;
local int minSize = 9999999;
local int maxSize = -9999999;
for(i = 0; i < count; i++)
{
    FSeek(offset[i]);
    if(i == count-1)
        size = FileSize() - offset[i];
    else
        size = offset[i+1] - offset[i];

    if( i%2)
        SetBackColor(cLtRed);
    else
        SetBackColor(cLtBlue);

    if(size == 0)
        continue;

    if(size < minSize)
    {
        minSize = size;
        minID = id;
    }
    
    if(size > maxSize)
    {
        maxSize = size;
        maxID = id;
    }


    Data data(size)<optimize=false>;
    id++;
}

SetBackColor(cNone);
Printf("Min: [%d] %d Max: [%d] %d  -> Count: %d\n", minID, minSize, maxID, maxSize, id);
