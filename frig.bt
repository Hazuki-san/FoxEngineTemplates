#include "common/common.bt"
#include "common/FoxData_common.bt"

typedef struct
{
	enum <uint> RIG_UNIT_TYPE
	{
		RIG_UNIT_TYPE_ROOT = 1,
		RIG_UNIT_TYPE_ORIENTATION = 2,
		RIG_UNIT_TYPE_TWO_BONE = 3,
		RIG_UNIT_TYPE_LOCAL_ORIENTATION = 4,
		RIG_UNIT_TYPE_LOCAL_TRANSFORM = 5,

		RIG_UNIT_TYPE_UNKNOWN_6 = 6,

		RIG_UNIT_TYPE_TRANSFORM = 7,
		RIG_UNIT_TYPE_ARM = 8,

		RIG_UNIT_TYPE_UNKNOWN_9 = 9,
		RIG_UNIT_TYPE_UNKNOWN_10 = 10,

		RIG_UNIT_TYPE_LIST = 11,

		RIG_UNIT_TYPE_UNKNOWN_12 = 12,
	} Type;

	short TrackCount;

	short BoneCount;

	short WeirdBoneIndex;

	short ParentIndex;

	uint Padding <hidden = true>; Assert(Padding == 0);

	switch (Type)
	{
	case RIG_UNIT_TYPE_ROOT:
        short SegmentIndexA;
        short SegmentIndexB;
        break;
	case RIG_UNIT_TYPE_LOCAL_ORIENTATION:
	case RIG_UNIT_TYPE_ORIENTATION:
        short SkelIndex;

        short SegmentIndexA;
        break;
	case RIG_UNIT_TYPE_LOCAL_TRANSFORM:
	case RIG_UNIT_TYPE_TRANSFORM:
        short SkelIndex;

        short SegmentIndexA;
        short SegmentIndexB;
		break;
	case RIG_UNIT_TYPE_UNKNOWN_6: // Can't say this one for certain but shares fox::anim::RigArmDef::GetSkelIndex
        Vector4 UnknownVector;

        Vector4 UnknownOtherVector;

		short SkelIndexA;
		short SkelIndexB;
		short SkelIndexC;

		short SegmentIndexA;
		short SegmentIndexB;
	case RIG_UNIT_TYPE_ARM:
        FSkip(16);

        Vector4 UnknownOtherVector;

		short ChainIndexA;
		short ChainIndexB;
		short ChainIndexC;

		short SegmentIndexA;
		short SegmentIndexB;
		short SegmentIndexC;

		short EffectorIndex;
        
		break;
	case RIG_UNIT_TYPE_TWO_BONE:
        FSkip(16);

        Vector4 UnknownVector;

		short ChainIndexA;
		short ChainIndexB;

		short SegmentIndexA;
		short SegmentIndexB;

		short EffectorIndex;
		break;
    case RIG_UNIT_TYPE_UNKNOWN_9:
        short SkelIndex;
        break;
    case RIG_UNIT_TYPE_UNKNOWN_10:
        FSkip(24); // Unknown

        short SkelIndexA;
        short SkelIndexB;
        short SkelIndexC;
        short SkelIndexD;
        break;
    case RIG_UNIT_TYPE_LIST:
        short SkelIndexStart;

        short SegmentIndexStart;
        break;
    case RIG_UNIT_TYPE_UNKNOWN_12:
        FSkip(16); // Unknown

        short SkelIndexA;
        short SkelIndexB;
        break;
	}
} RigUnitDef <read = EnumToString(Type), bgcolor = cLtBlue>;

typedef struct
{
	StrCode32 Hash;
	char Name[12] <hidden = true>;

	float Weights[RigUnitCount];
} MaskUnitDef <read = Name, bgcolor = cLtGreen>;

typedef struct
{
	uint RigIndex;

	StrCode32 Name; Assert(Name.hash >> 0x10 != 0);
} Bone <read = Str("id: %u, name: %u", RigIndex, Name.hash), bgcolor=cLtRed>;

struct RigFileHeader
{
	FoxDataString Name;

	uint Version; Assert(Version == 102);
	
	uint RigUnitCount;
	uint SegmentCount;
	uint FileSize;
	uint BoneListOffset;
	uint MaskDefOffset;
} Header <bgcolor = cLtGray>;

struct
{
	int RigUnitDefOffsets[Header.RigUnitCount] <hidden = true>;

	local int i = 0;
	for(i = 0; i < Header.RigUnitCount; i++)
	{
		FSeek(RigUnitDefOffsets[i]);

		RigUnitDef UnitDefs;
	}
} RigDef;

FSeek(Header.MaskDefOffset);

struct
{
	uint RigUnitCount;
	uint LayerCount;

	int UnitDefOffsets[LayerCount] <hidden = true>; //offset from startOfRigData

	// struct
	// {
	// 	for(i = 0; i < LayerCount; i++)
	// 	{
	// 		FSeek(Header.MaskDefOffset + UnitDefOffsets[i]);

	// 		MaskUnitDef UnitDefs;
	// 	}
	// } MaskGroup;

	MaskUnitDef UnitDefs[LayerCount] <optimize = true>;
} MaskDef;

Assert(FTell() == Header.BoneListOffset);

struct
{
	int BoneCount <hidden = true>;
	Bone Bones[BoneCount] <optimize = false>;
} BoneList;

FAlign(16);