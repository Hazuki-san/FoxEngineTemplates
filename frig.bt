#include "common/common.bt"
#include "common/FoxData_common.bt"

typedef struct
{
	enum <uint> RIG_UNIT_TYPE
	{
		RIG_UNIT_TYPE_ROOT = 1,
		RIG_UNIT_TYPE_ORIENTATION = 2,
		RIG_UNIT_TYPE_TWO_BONE = 3,
		RIG_UNIT_TYPE_LOCAL_ORIENTATION = 4,
		RIG_UNIT_TYPE_LOCAL_TRANSFORM = 5,
		RIG_UNIT_TYPE_TRANSFORM = 7,
		RIG_UNIT_TYPE_ARM = 8,

		RIG_UNIT_TYPE_UNKNOWN_A = 10,

		RIG_UNIT_TYPE_LIST = 11,

		RIG_UNIT_TYPE_UNKNOWN_B = 12,
	} Type;

	short TrackCount;

	short BoneCount;

	short WeirdBoneIndex;

	short ParentIndex;

	FSkip(4);

	switch (Type)
	{
	case RIG_UNIT_TYPE_ARM:
	case RIG_UNIT_TYPE_TWO_BONE:
		FSkip(32);
		break;
	}

	switch (Type)
	{
	case RIG_UNIT_TYPE_ORIENTATION:
	case RIG_UNIT_TYPE_LOCAL_ORIENTATION:
	case RIG_UNIT_TYPE_TRANSFORM:
	case RIG_UNIT_TYPE_LOCAL_TRANSFORM:
		ushort SkelIndices[BoneCount];
		break;
	case RIG_UNIT_TYPE_ARM:
		ushort SkelAIndex;
		ushort SkelBIndex;
		ushort SkelCIndex;
		break;
	case RIG_UNIT_TYPE_TWO_BONE:
		ushort SkelAIndex;
		ushort SkelBIndex;
		break;
	}
} RigUnitDef <read = EnumToString(Type), bgcolor = cLtBlue>;

typedef struct
{
	StrCode32 Hash;
	char Name[12] <hidden = true>;

	float Weights[RigUnitCount];
} MaskUnitDef <read = Name, bgcolor = cLtGreen>;

typedef struct
{
	uint RigIndex;

	StrCode32 Name; Assert(Name.hash >> 0x10 != 0);
} Bone <read = Str("id: %u, name: %u", RigIndex, Name.hash), bgcolor=cLtRed>;

struct RigFileHeader
{
	FoxDataString Name;

	uint Version; Assert(Version == 102);
	
	uint RigUnitCount;
	uint SegmentCount;
	uint FileSize;
	uint BoneListOffset;
	uint MaskDefOffset;
} Header <bgcolor = cLtGray>;

struct
{
	int RigUnitDefOffsets[Header.RigUnitCount] <hidden = true>;

	local int i = 0;
	for(i = 0; i < Header.RigUnitCount; i++)
	{
		FSeek(RigUnitDefOffsets[i]);

		RigUnitDef UnitDefs;
	}
} RigDef;

FSeek(Header.MaskDefOffset);

struct
{
	uint RigUnitCount;
	uint LayerCount;

	int UnitDefOffsets[LayerCount] <hidden = true>; //offset from startOfRigData

	// struct
	// {
	// 	for(i = 0; i < LayerCount; i++)
	// 	{
	// 		FSeek(Header.MaskDefOffset + UnitDefOffsets[i]);

	// 		MaskUnitDef UnitDefs;
	// 	}
	// } MaskGroup;

	MaskUnitDef UnitDefs[LayerCount] <optimize = true>;
} MaskDef;

Assert(FTell() == Header.BoneListOffset);

struct
{
	int BoneCount <hidden = true>;
	Bone Bones[BoneCount] <optimize = false>;
} BoneList;

FAlign(16);