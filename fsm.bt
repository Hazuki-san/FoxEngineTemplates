// FSM - FoxStreamMotion
// By RLC, based on documentation from BobDoleOwndU - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/FSM

// Can be run on .fsm files and per-chunk output of FsmTool by BobDoleOwndU!
// https://github.com/BobDoleOwndU/FsmTool

LittleEndian();

enum NodeType
{
	ROOT            = 3933341002,
	DEMO            = 3254096966,
	CAMERA          = 2620425302,
	MOVE            = 3150281601,
	CameraParam     = 2862912361,
	SI_Frame        = 1885607306, // Technically, the hash is "SI Frame" with a space instead of an underscore. 
	SKEL	        = 1889896775,
	MESH_EVENT      = 2454300086,
	MOTION	        = 143688520,
	MODEL           = 2215748180,
	SKELINFO        = 3736262940,
	MTPINFO         = 917055795,
	MTEV            = 2846912397,
	MTP             = 494270195,
	SHADER          = 2250865118,
	MTP_LIST        = 3937479969,
	MTP_PARENT_LIST = 4042487769,
	LOCATOR         = 3187573380,
	GLOBALSRT       = 2036377104,
	Unknown         = 2053459263,
};

local int passedSoundChunk = 0; // Probably a better way to tell that it's the first SND chunk

local int startOfChunk = FTell(); // In case is run from offset inside .fsm

while (FTell()!=FileSize())
{
	struct DemoChunk
	{
		startOfChunk = FTell(); // When the chunk needs to get the offset of its start
		
		struct Header
		{
			char sign[4]; if (sign=="OMED" || sign==" SYS" || sign==" DNS" || sign==" DNE") { BigEndian(); };
			uint chunkSize;
			double demoStart;
			
		} header <bgcolor=0x800000>;
		
		if (header.sign=="SYS " || header.sign==" SYS")
		{
			
		}
		else if (header.sign=="DEMO" || header.sign=="OMED")
		{
			struct DemoData
			{
				uint chunkType;
				if (demoData.chunkType==0)
				{
					int u0;
					int startFrame; //chunk i is i*frameCount
					int frameCount;
					
					int segmentCount;
				}
				
				uint offsetToChunkEnd <comment="Chunk size starting from demoData">;
				uint offsetToEventSection <comment="Offset starts from demoData">;
				
				if (demoData.chunkType==1)
				{
					FSkip(0x4);
				}

			} demoData <bgcolor=0x800080>;

			if (demoData.chunkType==0)
			{
				struct MotionSection
				{
					struct SegmentOffsets
					{
						int segmentOffset[demoData.segmentCount];
						
					} segmentOffsetSection <bgcolor=0x008000, comment="Offsets start from demoData">;
					
					if (demoData.u0!=10)
					{
						struct RootVector3
						{
							float x;
							float y;
							float z;
							
						} rootVector3 <bgcolor=0xC08000, comment="World translation root of the demo chunk. Thanks to Ventos to pointing it out!">;
					};
					
					struct SegmentTypeIndices
					{
						ushort typeIndex[demoData.segmentCount];
						
					} indices <bgcolor=0x0080C0, comment="Might have something to do with what kinda data is in the Motions">;

					struct SegmentMotion
					{
						// There's some empty ones at the end with this kind of parsing, so maybe the type indices define the length of the individual segments
						if ((demoData.offsetToEventSection>0) & (demoData.offsetToEventSection<header.chunkSize))
						{
							while ( (FTell() - startOfChunk) < demoData.offsetToEventSection+0x10 )
							{
								ushort motion;
							}
						}
						else
						{
							while ( (FTell() - startOfChunk) < header.chunkSize )
							{
								ushort motion;
							}
						};
						
					} motion <optimize=false, bgcolor=0xC080C0, comment="Assuming .sand tells where animation data of what starts and ends.">;
					
				} motionSection <optimize=false, bgcolor=0x008000>;
			};

			if (((demoData.chunkType==2) || (demoData.offsetToEventSection>0)) & (demoData.offsetToEventSection<header.chunkSize))
			{
				struct EventSection
				{
					struct EventOffsets
					{
						uint name <comment="A hash of `Normal`">;
						ushort eventCount;
						FSkip(0x2);
						uint offsetToEvent[eventCount]; // offset to a node from uint name here

					} eventOffsets <bgcolor=0x00C000, comment="Offsets to nodes, relative from the start of the section.">;

					if (demoData.chunkType==0)
					{
						if ((FTell() - startOfChunk) % 16 != 0)
						{
							FSkip(16 - ((FTell() - startOfChunk) % 16));
						}
					}
					else if (demoData.chunkType==2)
					{
						if ((FTell() - startOfChunk) % 16 != 0)
						{	
							FSkip(16 - ((FTell() - startOfChunk) % 16) - 4);
						}
						else
						{
							FSkip(0xC);
						};
					};
					
					// Thanks .evfs!
					// Something similar also seems to be used in .gani files.
					struct Event
					{
						uint eventType <comment="Node type hash - usually ExecCommand/595181585">;
						Printf("\n<event eventType=%u>",eventType);
						
						byte params1Count; // Might be a bitfield, but unaffected by endianness
						byte params2Count;
						byte params3Count;
						byte params4Count;
						
						struct TimeSection
						{
							int startFrame;
							int endFrame; // Two shorts? Endianness and all that really screws these up, especially some paramInts.
							Printf("\n <timeSection startFrame=%d endFrame=%d></timeSection>",startFrame,endFrame);
							
						} timeSection[params1Count] <optimize=false>;
						
						int paramInt[params2Count] <optimize=false>;
						local uint i = 0;
						for (i=0;i<params2Count;i++)
							Printf("\n <paramInt paramInt=%d></paramInt>",paramInt[i]);

							
						float paramFloat[params3Count] <optimize=false>;
						for (i=0;i<params3Count;i++)
							Printf("\n <paramFloat paramFloat=%d></paramFloat>",paramFloat[i]);
							
						struct ParamString
						{
							uint paramHash <comment="Sometimes uses fox2/sand object name ie HM_mnt0_main0_def. lua messages too, or light functor events from fox2s">;
							int unknown;
							Printf("\n <paramString paramString=%u unknown=%d></paramString>",paramHash,unknown);
							
						} paramString[params4Count] <optimize=false>;
						Printf("\n</event>");
						
					} event[eventOffsets.eventCount] <optimize=false, bgcolor=0xF0F080>;
					
				} eventSection <bgcolor=0x00C000>;
			};

			if (FTell() % 16 != 0)
			{
				FSkip(16 - (FTell() % 16));
			}

			// GZ only. Since GZ has no .sand files, it uses this instead. Usually the first chunk, after SYS if that exists.
			if (demoData.chunkType==1)
			{
				struct SandSection
				{
					while ( (FTell() - startOfChunk) < header.chunkSize )
					{
						struct SandNode
						{
							local int nodeStart = FTell();
							
							NodeType nodeType;
							if (nodeType==ROOT
								|| nodeType==DEMO
								|| nodeType==CAMERA
								|| nodeType==MOVE
								|| nodeType==CameraParam
								|| nodeType==SI_Frame
								|| nodeType==SKEL	
								|| nodeType==MESH_EVENT
								|| nodeType==MOTION	
								|| nodeType==MODEL
								|| nodeType==SKELINFO
								|| nodeType==MTPINFO
								|| nodeType==MTEV
								|| nodeType==MTP
								|| nodeType==SHADER
								|| nodeType==MTP_LIST
								|| nodeType==MTP_PARENT_LIST
								|| nodeType==LOCATOR
								|| nodeType==GLOBALSRT
								)
							{
								uint offsetToNodeTypeString;
								uint objectCount;
								uint objectOffset;
								
								uint listSize;
								int offsetToParentNode;
								int offsetToNextNode;
								int offsetToPreviousNode;
								
								uint nodeSize;
								uint offsetToNodeEnd;
								if (FTell() % 16 != 0)
								{
									FSkip(16 - (FTell() % 16));
								}
								
								char nodeTypeString[];
								
								if (FTell() % 16 != 0)
								{
									FSkip(16 - (FTell() % 16));
								}
								
								if (nodeType==MOVE
									|| nodeType==CameraParam
									|| nodeType==SI_Frame
									|| nodeType==SKEL	
									|| nodeType==MTP	
									|| nodeType==GLOBALSRT	
									)
								{
									struct Object
									{
										uint subObjectCount;
										uint unknown00;
										uint unknown01;
										uint unknown02;
									
										ubyte unknown03;
										FSkip(0x3);
										uint subObjectOffset[subObjectCount];
									
										if (subObjectCount==1)
										{
											FSkip(0x10);
										}
										else
										{
											FSkip(0xC);
											
											if ((FTell() - 16) % 8 != 0)
											{
												if ((FTell() - 16) % 16 != 0)
												{
													FSkip(8 - ((FTell() - 16) % 8));
												}
											}
										}
										struct SubObject
										{
											uint subObjectHash <comment="Hash of the sub object, like a bone, ie SKL_000_WAIST">;
											ubyte segmentCount;
											FSkip(0x3);
												
											struct SegmentParams
											{
												FSkip(0x4);
												ushort motionSegmentId <comment=".fsm DEMO chunk motion segment id">;
												ubyte u2;
												ubyte u3;
												
											} segmentParams[segmentCount] <optimize=false>;
												
										} subObject[subObjectCount] <optimize=false>;
												
										if (FTell() % 16 != 0)
										{
											FSkip(16 - (FTell() % 16));
										}
											
										ushort targetCount;
										FSkip(0x2);
										struct TargetNames
										{
											uint objectNameType <comment="StrCode32 hash of TARGET_NAME, 2570203771">;
											uint offsetToNameTypeString;
											uint objectName <comment="StrCode32 hash of the object name from fox2, ie HM_sna0_main0_def, demo_camera">;
											uint offsetToObjectNameString;

										} targetNames[targetCount] <optimize=false>; // Warning: I have never seen one with more than one
											
										struct TargetNamesStrings
										{
											char stringObjectName[];
											char stringObjectType[];
												
										} targerNamesStrings[targetCount] <optimize=false>; // Warning: I have never seen one with more than one, this may very well be wrong
											
										if (FTell() % 16 != 0)
										{
											FSkip(16 - (FTell() % 16));
										}
										
									} object[objectCount] <optimize=false>; // I haven't seen any more than 1
								}
								else if (nodeType==MOTION)
								{
									if (offsetToNextNode!=0)
									{
										while ( ( (FTell()-offsetToNextNode)!=nodeStart ) )
										{	
											struct MotionSubNode
											{
												ushort subNode0;
												ushort subNode1;
												uint nodeSubType; // 3426329078 - SLOPE_DIR		35201703 - SLOPE_ANGLE
												uint offsetToString;
												uint offsetMaybe;
											
												char stringObjectType[];
												if (FTell() % 16 != 0)
												{
													FSkip(16 - (FTell() % 16));
												}
												
											} motionSubNode;
										};
										// Assert(2+2==5,"Weird Case Of Reaching Into Another Demo Chunk!! Screw You: p11_010170_000 p12_030020 p12_040030_001 p12_050020_010 p12_050020_020 p12_050020_060_rev p12_050020_075 p12_050020_075_jpn p12_050070_000 p12_050070_001 gc_p02_060 gc_p02_070 gc_p02_080 gc_p02_100 gc_p02_500 gc_p02_520 gc_p03_070!!!");
									}
									else
									{
										uint subObjectCount;
										uint unknown00;
										uint unknown01;
										uint unknown02;
										
										ubyte unknown03;
										FSkip(0x3);
										uint subObjectOffset[subObjectCount];
										
										if (subObjectCount==1)
										{
											FSkip(0x10);
										}
										else
										{
											FSkip(0xC);
											
											if ((FTell() - 16) % 8 != 0)
											{
												if ((FTell() - 16) % 16 != 0)
												{
													FSkip(8 - ((FTell() - 16) % 8));
												}
											}
										}
										
										struct SaniException
										{
											struct SaniExceptionEntry
											{
												uint subObjectHash <comment="Hash of the sub object, like a bone, ie SKL_000_WAIST">;
												ubyte subSubEntryCount;
												FSkip(0x3);
												
											} boneSubEntry[subObjectCount] <optimize=false>;
												
											if ((FTell() - 16) % 16 != 0)
											{
												FSkip(16 - ((FTell() - 16) % 16));
											}
											
											FSkip(0x4);
											ushort motionSegmentId <comment=".fsm DEMO chunk motion segment id">;
											ubyte u2;
											ubyte u3;
											
											if (FTell() % 16 != 0)
											{
												FSkip(16 - (FTell() % 16));
											}
												
										} objectEntry;
									}
								}
								else if (nodeType==SHADER)
								{
									struct ObjectShader
									{
										ushort entryCount;
										FSkip(0x2);
										struct Shader
										{
											uint objectNameType <comment="StrCode32 hash of TARGET_NAME, 2570203771">;
											uint offsetToNameTypeString <comment="Offset from hash">;
											uint objectName <comment="StrCode32 hash of the object name from fox2, ie HM_sna0_main0_def">;
											uint offsetToObjectNameString;
											
										} shader[entryCount] <optimize=false>; // Warning: I have never seen one with more than one, this may very well be wrong
										
										struct ShaderStrings
										{
											char objectNameString[];
											char objectTypeString[];
											
										} shaderStrings[entryCount] <optimize=false>; // Warning: I have never seen one with more than one, this may very well be wrong
										
										if (FTell() % 16 != 0)
										{
											FSkip(16 - (FTell() % 16));
										}
													
										while (FTell()-nodeSize!=nodeStart & FTell()!=header.chunkSize) // second exception - p12_040020_000
										{
											struct Material
											{
												uint materialName <comment="Material name, for tension ie TENSION_NECK">;
												uint offsetToNodeTypeString;
												uint unknown0;
												uint unknown1;
												
												uint unknown2;
												int offsetToParentNode;
												int offsetToNextNode;
												int offsetToPreviousNode;
												
												uint unknown2;
												uint offsetToNodeEnd;
												uint unknown4;
												uint unknown5;
												
												char stringMaterialName[];
												
												if ((FTell() - 16) % 16 != 0)
												{
													FSkip(16 - ((FTell() - 16) % 16));
												}
												
												uint subObjectCount;
												uint unknown00;
												uint unknown01;
												uint unknown02;
												
												ubyte unknown03;
												FSkip(0x3);
												uint subObjectOffset[subObjectCount];
												
												if (subObjectCount==1)
												{
													FSkip(0x10);
												}
												else
												{
													FSkip(0xC);
													
													if ((FTell() - startOfChunk) % 8 != 0)
													{
														if ((FTell() - startOfChunk) % 16 != 0)
														{
															FSkip(8 - ((FTell() - startOfChunk) % 8));
														};
													};
												}
												
												struct MaterialEntry
												{
													struct MaterialSubEntry
													{
														uint subObjectHash <comment="Hash of the sub object, like a bone, ie SKL_000_WAIST">;
														ubyte subSubEntryCount;
														FSkip(0x3);
														
														struct MaterialSegmentParams
														{
															FSkip(0x4);
															ushort motionSegmentId <comment=".fsm DEMO chunk motion segment id">;
															ubyte u2;
															ubyte u3;
															
														} segmentParams[subSubEntryCount] <optimize=false>;
														
													} subEntry[subObjectCount] <optimize=false>;
													
													if ((FTell() - 16) % 16 != 0)
													{
														FSkip(16 - ((FTell() - 16) % 16));
													}
														
												} entry;
												
											} material;
										}
									} object; // I haven't seen any more than 1;
								}
								else if (nodeType==MTP_LIST || nodeType==MTP_PARENT_LIST)
								{
									struct ObjectMTPList
									{
										uint entryCount;
										struct MTPListEntry
										{
											uint name;
											uint stringOffset;
											
										} mtpListEntry[entryCount] <optimize=false>;
										
										FSkip(0xC);
											
										if ((FTell() - 16) % 8 != 0)
										{
											if ((FTell() - 16) % 16 != 0)
											{
												FSkip(8 - ((FTell() - 16) % 8));
											}
										}
										
										struct MTPStrings
										{
											char mtpString[];
											
										} mtpStrings[entryCount] <optimize=false>;
										
									} object;
									
									if (FTell() % 16 != 0)
									{
										FSkip(16 - (FTell() % 16));
									}
								}
							}
							else
							{
								Assert(2+2==5,"Unknown sand nodeType!!!");
							};
							
						} node;
					}

					if (FTell() % 16 != 0)
					{
						FSkip(16 - (FTell() % 16));
					}
					
				} sandSection <bgcolor=0x0CC0C0>;
			}
			
		}
		else if (header.sign=="SND " || header.sign==" DNS")
		{
			if (passedSoundChunk==0)
			{
				passedSoundChunk = 1; // There's probably a better way to tell that it's the first SND chunk to parse this section.
				struct SoundData
				{
					uint completeSoundFileLength;
					uint unknown0;
					ubyte u0;
					if (FTell() % 16 != 0)
					{
						FSkip(16 - (FTell() % 16));
					}
					
				} soundData <bgcolor=0xC04040>;
			}
			
			struct RiffSection
			{
				// I mean, do I reverse .wem files here or what?
				char riffData[(startOfChunk+header.chunkSize)-FTell()];
				
			} riffSection <bgcolor=0xF08040>;
			
		}
		else if (header.sign=="END " || header.sign==" DNE")
		{
			FSkip(FileSize()-FTell()); // Sometimes there's tons of null lines after the END
		}
		else
		{
			Assert(2+2==5, "Unknown Chunk Type!!!"); // In case something goes very very wrong
		}
		
	} demoChunk;
}