#include "../common/common.bt"
#include "gr_common.bt"
#include "terrain_common.bt"

GrHeader Header;

FSeek(Header.MetadataEntriesOffset);

GrMetadataEntries MetadataEntries;

if (Header.Type == GR_FILE_TYPE_HTRE_OBR)
{
    #define HeightMapMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "heightMap")]

    #define WeightMapMetadata MetadataEntries.Entry[1] // The designers screwed up. This metadata entry is *also* "heightMap"

    #define EditParamMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "editParam")]

    #define LodParameterMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "lodParameter")]

    #define MaxHeightMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "maxHeight")]

    #define MinHeightMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "minHeight")]

    #define MaterialIdsMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "materialIds")]

    #define ConfigrationIdsMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "configrationIds")]

    FSeek(startof(HeightMapMetadata) + HeightMapMetadata.DataOffset);
    struct
    {
        float data[HeightMapMetadata.DataSize / sizeof(float)];
    } HeightMap <bgcolor=0x99aacc>;

    FSeek(startof(WeightMapMetadata) + WeightMapMetadata.DataOffset);
    struct
    {
        Pixel data[WeightMapMetadata.DataSize / sizeof(Pixel)];
    } WeightMap <bgcolor=0x111199>;

    FSeek(startof(LodParameterMetadata) + LodParameterMetadata.DataOffset);
    struct
    {
        LodParam data[LodParameterMetadata.DataSize / sizeof(LodParam)];
    } LodParameter <bgcolor=0x00aaff>;

    FSeek(startof(MaxHeightMetadata) + MaxHeightMetadata.DataOffset);
    struct
    {
        float data[MaxHeightMetadata.DataSize / sizeof(float)];
    } MaxHeight <bgcolor=0xff00aa>;

    FSeek(startof(MinHeightMetadata) + MinHeightMetadata.DataOffset);
    struct
    {
        float data[MinHeightMetadata.DataSize / sizeof(float)];
    } MinHeight <bgcolor=0xaaff00>;
    
    FSeek(startof(MaterialIdsMetadata) + MaterialIdsMetadata.DataOffset);
    struct
    {
        Pixel data[MaterialIdsMetadata.DataSize / sizeof(Pixel)];
    } MaterialIds <bgcolor=0x991111>;

    FSeek(startof(ConfigrationIdsMetadata) + ConfigrationIdsMetadata.DataOffset);
    struct
    {
        Pixel data[ConfigrationIdsMetadata.DataSize / sizeof(Pixel)];
    } ConfigrationIds <bgcolor=0x119911>;
}
else if (Header.Type == GR_FILE_TYPE_LPSH_TRE2_HTRE)
{
    #define HeightMapMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "heightMap")]

    #define ComboTextureMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "comboTexture")]

    #define EditParamMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "editParam")]

    #define LodParameterMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "lodParameter")]

    #define MaxHeightMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "maxHeight")]

    #define MinHeightMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "minHeight")]

    #define MaterialIdsMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "materialIds")]

    #define ConfigrationIdsMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "configrationIds")]

    #define PatchDescriptionMetadata MetadataEntries.Entry[GetGrMetadataEntryIndex(MetadataEntries, "patchDescription")]

    FSeek(startof(PatchDescriptionMetadata) + PatchDescriptionMetadata.DataOffset);
    struct
    {
        uint64 Unknown0;
        uint64 Unknown1;
        uint64 Unknown2;

        DescriptionSubEntry SubEntry;
    } PatchDescription <bgcolor=0x999900>;

    FSeek(startof(HeightMapMetadata) + HeightMapMetadata.DataOffset);
    struct
    {
        float data[HeightMapMetadata.DataSize / sizeof(float)];
    } HeightMap <bgcolor=0x99aacc>;

    FSeek(startof(ComboTextureMetadata) + ComboTextureMetadata.DataOffset);
    struct
    {
        Pixel data[ComboTextureMetadata.DataSize / sizeof(Pixel)];
    } ComboTexture <bgcolor=0x111199>;
    
    FSeek(startof(LodParameterMetadata) + LodParameterMetadata.DataOffset);
    struct
    {
        LodParam data[LodParameterMetadata.DataSize / sizeof(LodParam)];
    } LodParameter <bgcolor=0x00aaff>;

    FSeek(startof(MaxHeightMetadata) + MaxHeightMetadata.DataOffset);
    struct
    {
        float data[MaxHeightMetadata.DataSize / sizeof(float)];
    } MaxHeight <bgcolor=0xff00aa>;

    FSeek(startof(MinHeightMetadata) + MinHeightMetadata.DataOffset);
    struct
    {
        float data[MinHeightMetadata.DataSize / sizeof(float)];
    } MinHeight <bgcolor=0xaaff00>;
    
    FSeek(startof(MaterialIdsMetadata) + MaterialIdsMetadata.DataOffset);
    struct
    {
        Pixel data[MaterialIdsMetadata.DataSize / sizeof(Pixel)];
    } MaterialIds <bgcolor=0x991111>;

    FSeek(startof(ConfigrationIdsMetadata) + ConfigrationIdsMetadata.DataOffset);
    struct
    {
        Pixel data[ConfigrationIdsMetadata.DataSize / sizeof(Pixel)];
    } ConfigrationIds <bgcolor=0x119911>;
}