#include "../common/common.bt"
#include "gr_common.bt"

typedef struct
{
    hfloat r;
    hfloat g;
    hfloat b;
    hfloat skyVisibility;
} ShCoefficients <read=Str("(%f, %f, %f, %f)", r, g, b, skyVisibility)>;

typedef struct(int selfIndex)
{
    local int SelfIndex = selfIndex;

    local int cIdx = 0;
    for (cIdx = 0; cIdx < 9; cIdx++)
        ShCoefficients coefficients;
} CoefficientSet <read = ReadCoefficientSetString(parentof(parentof(this)).Times[SelfIndex], SelfIndex), bgcolor = 0x00ff00, optimize = true>;
string ReadCoefficientSetString(uint time, int index)
{
    return index < 0 ? "" : ReadUInt24HTime(time);
}

GrHeader Header;

FSeek(Header.MetadataEntriesOffset);

GrMetadataEntries MetadataEntries;

#define LightProbeSHCoefficientsMetadata MetadataEntries.Entry[0]
#define NumDiv LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "numDiv")].Value
#define NumLightProbes LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "numLightProbes")].Value

// Only in GR_FILE_TYPE_LPSH_TRE2_HTRE
#define FormatType LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "formatType")].Value

FSeek(startof(LightProbeSHCoefficientsMetadata) + LightProbeSHCoefficientsMetadata.DataOffset);

struct
{
    uint Times[NumDiv] <hidden = true, optimize = false>;

    AlignRead(16);

    struct
    {
        int NameStringOffset <hidden = true>;
        int DataOffset <hidden = true>;
        
        uint enable24hSH : 1 <hidden = true>;
        uint enableWeatherSH : 1 <hidden = true>;
        uint enableRelatedLightSH : 1 <hidden = true>;
        uint enableOcclusionMode : 1 <hidden = true>;
        
        local uint NextStartPos = FTell();
            
        FSeek(DataOffset);
        
        local int k;

        if (enable24hSH)
        {
            for (k = 0; k < NumDiv; k++)
                CoefficientSet Weather0(k);
        }
        else
        {
            CoefficientSet Weather0(-1);
        }

        if (enableWeatherSH)
        {
            if (enable24hSH)
            {
                for (k = 0; k < NumDiv; k++)
                    CoefficientSet Weather1(k);
            }
            else
            {
                CoefficientSet Weather1(-1);
            }
        }

        if (enableRelatedLightSH)
        {
            CoefficientSet RelatedLight(-1)[2];
        }

        FSeek(NextStartPos);
    } Probes[NumLightProbes] <read = ReadProbeMetadata(NameStringOffset, enable24hSH, enableWeatherSH, enableRelatedLightSH, enableOcclusionMode), bgcolor = 0xff00ff, optimize = false>;
} LightProbeSHCoefficients <bgcolor = 0x00aaff>;
string ReadProbeMetadata(uint nameStringOffset, uint enable24hSH, uint enableWeatherSH, uint enableRelatedLightSH, uint enableOcclusionMode)
{
    string result = ReadString(nameStringOffset);
    
    if (enable24hSH)
        result += ", enable24hSH";
    if (enableWeatherSH)
        result += ", enableWeatherSH";
    if (enableRelatedLightSH)
        result += ", enableRelatedLightSH";
    if (enableOcclusionMode)
        result += ", enableOcclusionMode";

    return result;
}