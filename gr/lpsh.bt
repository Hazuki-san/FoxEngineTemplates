#include "../common/common.bt"
#include "gr_common.bt"

typedef struct
{
    hfloat r;
    hfloat g;
    hfloat b;
    hfloat skyVisibility;
} ShCoefficients <read=Str("(%f, %f, %f, %f)", r, g, b, skyVisibility)>;

GrHeader Header;

FSeek(Header.MetadataEntriesOffset);

GrMetadataEntries MetadataEntries;

#define LightProbeSHCoefficientsMetadata MetadataEntries.Entry[0]
#define NumDiv LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "numDiv")].Value
#define NumLightProbes LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "numLightProbes")].Value

// Only in GR_FILE_TYPE_LPSH_TRE2_HTRE
#define FormatType LightProbeSHCoefficientsMetadata.Param[GetGrMetadataEntryParamIndex(LightProbeSHCoefficientsMetadata, "formatType")].Value

FSeek(startof(LightProbeSHCoefficientsMetadata) + LightProbeSHCoefficientsMetadata.DataOffset);

struct
{
    uint Times[NumDiv];

    AlignRead(16);

    struct
    {
        int NameStringOffset;
        int DataOffset;
    
        // The following control flow in terms of bit position+value -> outcome is correct. 
        // However, I do not know that these are the correct names. These are the 4 accessors for the TppLightProbe Entity. 
        // The first one definitely seems correct; if 24hSH is disabled, it only uses "1" probe group, but I don't know about the others.
        uint enable24hSH : 1;
        uint enableWeatherSH : 1;
        uint enableRelatedLightSH : 1;
        uint enableOcclusionMode : 1;

        local uint ProbeCount = 1;
        if (enable24hSH)
            ProbeCount = NumDiv;

        if (enableWeatherSH)
            ProbeCount *= 2;

        if (enableRelatedLightSH)
            ProbeCount += 2;

        if (enableOcclusionMode)
            ProbeCount += 1;
    } ProbeMetadata[NumLightProbes] <optimize = true>;

    local int i;
    local int j;
    for (i = 0; i < NumLightProbes; i++)
    {
        FSeek(ProbeMetadata[i].DataOffset);

        struct LightProbe
        {
            for (j = 0; j < ProbeMetadata[i].ProbeCount; j++)
            {
                // Intentionally disable collapsing via loop instead of array
                struct
                {
                    local int cIdx = 0;
                    for (cIdx = 0; cIdx < 9; cIdx++)
                        ShCoefficients coefficients;
                } CoefficientSet <optimize = true>;
            }
        } Probes <optimize=false>;
    }
} LightProbeSHCoefficients <bgcolor=0x00aaff>;