#include "common/common.bt"
#include "common/gr_sh_common.bt"

typedef struct(int selfIndex)
{
    local int SelfIndex = selfIndex;
    
                        // Band   Basis
    VectorShH3 c00; //  0       0

    VectorShH3 c10; //  1      -1
    VectorShH3 c11; //  1       0 
    VectorShH3 c12; //  1       1

    VectorShH3 c20; //  2      -2
    VectorShH3 c21; //  2      -1
    VectorShH3 c22; //  2       0
    VectorShH3 c23; //  2       1
    VectorShH3 c24; //  2       2

    VectorShH3 SunColor;

    // a0 = sqrt(1/(4pi))   = 0.282095
    // a1 = sqrt(3/(4pi))   = 0.488603
    // a2 = sqrt(15/(4pi))  = 1.092548
    // a3 = sqrt(5/(16pi))  = 0.315392
    // a4 = sqrt(15/(16pi)) = 0.546274
    // Stored in SH matrix used in SH_SphereMap.hlsl:
    // [ +a4*c24  , a2*c20/2 , a2*c23/2 , a1*c12/2      ]
    // [ a2*c20/2 , -a4*c24  , a2*c21/2 , a1*c10/2      ]
    // [ a2*c23/2 , a2*c21/2 , 3*a3*c22 , a1*c11/2      ]
    // [ a1*c12/2 , a1*c10/2 , a1*c11/2 , a0*c00-a3*c22 ]
} CoefficientSet <read = ReadCoefficientSetString(SelfIndex < 0 ? 0 : parentof(parentof(this)).Times[SelfIndex], SelfIndex), bgcolor = 0x00ff00, optimize = true>;
string ReadCoefficientSetString(uint time, int index)
{
    return index < 0 ? "" : ReadUInt24HTime(time);
}

typedef struct
{
    local uint numDiv = parentof(this).Parameter[GetFoxDataNodeParamIndex(parentof(this), "numDiv")].Value;
    local uint numWeathers = parentof(this).Parameter[GetFoxDataNodeParamIndex(parentof(this), "numWeathers")].Value;

    uint Times[numDiv] <hidden = true, optimize = true>;

    FAlign(16);

    local int i = 0;
    for (i = 0; i < numWeathers; i++)
    {
        struct
        {
            local uint k;

            for (k = 0; k < numDiv; k++)
                CoefficientSet Times(k);
        } Weathers;
    }
} AtmosphereSHCoefficients <bgcolor = 0x00aaff>;

#define FOX_DATA_PAYLOAD AtmosphereSHCoefficients

#include "common/FoxData_common.bt"

FoxDataHeader Header;
Assert(Header.Version == 1);

FSeek(Header.NodesOffset);

FoxDataNodes Nodes;

FAlign(16);

Assert(FTell() == FileSize());