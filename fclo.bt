LittleEndian();

#define TEXT_COLOR 0xF6F7ED
#define COLOR_HEADER 0xA46026
#define COLOR_SECTION0 0x5399F1
#define COLOR_SECTION2 0x3573C4
#define COLOR_SECTION3 0x1E3556
#define COLOR_SECTION3B 0x018FF1
#define COLOR_SECTION3C 0xA88B04
#define COLOR_SECTION4 0xA741D7
#define COLOR_SECTION5 0x73173A

#include "common/common.bt"

struct SimClothFileHeader
{
	char Signature[4];
	if (Signature == "fclo")
		BigEndian();
	else
		Assert(Signature == "olcf");

	FSkip(12);
	
	uint SimulatedParticleCount;

	uint FixedParticleCount;

	uint TensionLinkCount;

	uint QuadCount;

	uint BodyBoneCount;
} Header <bgcolor = COLOR_HEADER, fgcolor = TEXT_COLOR>;

struct ParticleUnit
{
	Vector3 Position;
	StrCode32 AssociatedBoneName;
};

ParticleUnit SimulatedParticles[Header.SimulatedParticleCount] <bgcolor = COLOR_SECTION0, fgcolor = TEXT_COLOR>;

ParticleUnit FixedParticles[Header.FixedParticleCount] <bgcolor = COLOR_SECTION3C, fgcolor = TEXT_COLOR>;

struct BodyBoneWeightUnit
{
	uint BodyBoneIndices[4];
	float Weights[4];
} BodyBoneWeights[Header.SimulatedParticleCount + Header.FixedParticleCount] <bgcolor = COLOR_SECTION2, fgcolor = TEXT_COLOR>;

struct TensionLinkUnit
{
	uint ParticleAIndex;
	uint ParticleBIndex;
} TensionLinks[Header.TensionLinkCount] <bgcolor = COLOR_SECTION3, fgcolor = TEXT_COLOR>;

struct QuadUnit
{
	uint ParticleAIndex;
	uint ParticleBIndex;
	uint ParticleCIndex;
	uint ParticleDIndex;
} Quads[Header.QuadCount] <bgcolor = COLOR_SECTION3B, fgcolor = TEXT_COLOR>;

StrCode32 BodyBones[Header.BodyBoneCount] <bgcolor = COLOR_SECTION5>;