#ifndef ANIM_COMMON_BT
#define ANIM_COMMON_BT

typedef struct
{
	ushort value <hidden = true>;
} AnimHalf <read = ReadAnimHalf>;
string ReadAnimHalf(AnimHalf& half)
{
	local uint sign = (half.value & 0x8000) >> 8;
	local uint exponent = half.value & 0x7C00;
	if (exponent > 0)
		exponent = exponent + 0x1DC00 >> 3;
	local uint mantissa = (half.value & 1023) << 5;

	local ubyte value[4];
	value[0] = 0;
	value[1] = mantissa & 0xFF;
	value[2] = exponent & 0x80 | (mantissa >> 8) & 0xFF;
	value[3] = sign | exponent >> 8 & 0xFF;

	float result = ConvertBytesToFloat(value);

	return Str("%f", result);
}

typedef struct
{
	AnimHalf x;
	AnimHalf y;
	AnimHalf z;
} VectorAnimH3 <read = Str("(%s, %s, %s)", ReadAnimHalf(x), ReadAnimHalf(y), ReadAnimHalf(z))>;

typedef struct
{
	AnimHalf x;
	AnimHalf y;
	AnimHalf z;
	AnimHalf w;
} VectorAnimH4 <read = Str("(%s, %s, %s, %s)", ReadAnimHalf(x), ReadAnimHalf(y), ReadAnimHalf(z), ReadAnimHalf(w))>;

typedef struct
{
	ubyte data[5];
} QuatAnim13;

typedef struct
{
	ubyte data[6];
} QuatAnim15;

typedef struct
{
	uint EntryCount <hidden = true>;

	uint SubEntryCount;

	uint Unknown;

	uint FrameCount;

	uint Unknown1;

	uint EntryOffsets[EntryCount] <hidden = true>;

	local uint trkIdx;
	for (trkIdx = 0; trkIdx < EntryCount; trkIdx++)
	{
		FSeek(startof(this) + EntryOffsets[trkIdx]);

		struct AnimTrack
		{
			// For SAND, hash of the sub object, like a bone, ie SKL_000_WAIST
			enum <uint> TrackNameStrCode32
			{
				// CANI, UIA, etc.
				ROTATE          = 283103795,
				SCALE           = 2236677358,
				TRANSLATE       = 2739596730,
				COLOR           = 1662570759,

				// 
			} Name;

			ubyte SegmentCount <hidden = true>;

			enum <ushort> AnimTrackFlags
			{
				ANIM_TRACK_FLAGS_TYPED_TRACK = 0x1, //Appears in gz gani
				ANIM_TRACK_FLAGS_NO_FRAMES = 0x4,
			} Flags <read = (this == 0 ? "" : ((this & ANIM_TRACK_FLAGS_TYPED_TRACK) ? ((this & ANIM_TRACK_FLAGS_NO_FRAMES) ? "ANIM_TRACK_FLAGS_NO_FRAMES | ANIM_TRACK_FLAGS_TYPED_TRACK" : "ANIM_TRACK_FLAGS_TYPED_TRACK") : ((this & ANIM_TRACK_FLAGS_NO_FRAMES) ? "ANIM_TRACK_FLAGS_NO_FRAMES" : "")))>; Assert((Flags & ~(ANIM_TRACK_FLAGS_TYPED_TRACK | ANIM_TRACK_FLAGS_NO_FRAMES)) == 0);

			ubyte Padding <hidden = true>; Assert(Padding == 0);

			struct SegmentHeader
			{
				int DataOffset;

				short MotionSegmentId; // .fsm DEMO chunk motion segment id
				
				if (Flags & ANIM_TRACK_FLAGS_TYPED_TRACK)
				{
					enum <ubyte> AnimSegmentHeaderType
					{
						ANIM_SEGMENT_HEADER_TYPE_ROTATION = 0,
						ANIM_SEGMENT_HEADER_TYPE_POSITION = 3,
						ANIM_SEGMENT_HEADER_TYPE_ROOT_ROT = 5,
						ANIM_SEGMENT_HEADER_TYPE_ROOT_POS = 6,
					} Type : 3;
				}
				else
				{
					ubyte ComponentCount : 3;
				}

				ubyte Padding : 4 <hidden = true>; Assert(Padding == 0);

				ubyte HasNextEntry : 1;

				ubyte ComponentBitSize;

				struct AnimKeyframe
				{
					if (Flags & ANIM_TRACK_FLAGS_TYPED_TRACK)
					{
						switch (Type)
						{
							case ANIM_SEGMENT_HEADER_TYPE_ROTATION:
								if (ComponentBitSize == 13)
									QuatAnim13 Value;
								else
									Assert(false);
								break;
							case ANIM_SEGMENT_HEADER_TYPE_POSITION:
								if (ComponentBitSize == 32)
									Vector3 Value;
								else
									Assert(false);
								break;
							case ANIM_SEGMENT_HEADER_TYPE_ROOT_ROT:
								if (ComponentBitSize == 15)
									QuatAnim15 Value;
								else
									Assert(false);
								break;
							case ANIM_SEGMENT_HEADER_TYPE_ROOT_POS:
								if (ComponentBitSize == 32)
									Vector3 Value;
								else
									Assert(false);
								break;
							default:
								Printf("@%Lx Unknown component count: %u\n", FTell(), DataOffset);
								Assert(false);
								break;
						}
					}
					else
					{
						switch (ComponentCount)
						{
							case 1:
								if (ComponentBitSize == 16)
									AnimHalf Value;
								else if (ComponentBitSize == 32)
									float Value;
								else
									Assert(false);
								break;
							case 3:
								if (ComponentBitSize == 16)
									VectorAnimH3 Value;
								else if (ComponentBitSize == 32)
									Vector3 Value;
								else
									Assert(false);
								break;
							case 4:
								if (ComponentBitSize == 16)
									VectorAnimH4 Value;
								else if (ComponentBitSize == 32)
									Vector4 Value;
								else
									Assert(false);
								break;
							default:
								Printf("@%Lx Unknown component count: %u\n", FTell(), DataOffset);
								Assert(false);
								break;
						}
					}
				};

				if (DataOffset != 0)
				{
					FSeek(startof(this) + DataOffset);

					AnimKeyframe InitFrame;

					if ((Flags & ANIM_TRACK_FLAGS_NO_FRAMES) == 0)
					{
						local uint frameIndex = 0;
						do
						{
							struct AnimKey
							{
								ubyte FrameCount;

								AnimKeyframe Frame;
							} Key;

							frameIndex += Key.FrameCount;
						}
						while (frameIndex < FrameCount);
					}

					FSeek(startof(this) + 8);
				}
			} SegmentHeaders[SegmentCount] <read = ((parentof(this).Flags & ANIM_TRACK_FLAGS_TYPED_TRACK) ? EnumToString(Type) : Str("%u, %u", ComponentCount, ComponentBitSize)), optimize = false>;
		} Track;
	}
} AnimTracks <bgcolor = 0x8ADEF3>;

#endif