#ifndef FOXDATA_COMMON_BT
#define FOXDATA_COMMON_BT

#include "common/common.bt"

// For TRAP, the FoxDataHeader string hash is known to be a StrCode32. So globally overriding for stuff like GeoNameHashes, which may literally not exist at all outside of material names, may not be right.
#ifndef FOX_DATA_HASH_TYPE
	#define FOX_DATA_HASH_TYPE StrCode32
#endif

enum <ushort> FOX_DATA_NODE_ENTRY_PARAM_TYPE
{
	FOX_DATA_NODE_ENTRY_PARAM_TYPE_UINT = 0,
	FOX_DATA_NODE_ENTRY_PARAM_TYPE_STRING = 1,
	FOX_DATA_NODE_ENTRY_PARAM_TYPE_FLOAT = 2,
};

typedef struct
{
	FOX_DATA_HASH_TYPE Hash;
    uint StringOffset;
} FoxDataString <read = ReadFoxDataString>;
string ReadFoxDataString(FoxDataString& str)
{
#ifdef FOX_DATA_RESOLVE_HASH_FUNC
	local string resolvedName = FOX_DATA_RESOLVE_HASH_FUNC(str.Hash);
	if (resolvedName != "")
		return resolvedName;
#endif
	if (str.StringOffset == 0)
		if (str.Hash.hash == 3205930904 || str.Hash.hash == 0) // Empty string hash
			return "null";
		else
			return Str("%u", str.Hash.hash);
	else if (str.Hash.hash == 2283831924 || str.Hash.hash == 4127755893 || str.Hash.hash == 981817376) // Hack for ObjectBrush (.obr, not .obrb), AtmosphereSHCoefficients (.atsh), and LightProbeSHCoefficients (.lpsh) which use an absolute string offset for this particular string for some reason
		return ReadString(str.StringOffset);
	else
		return ReadString(startof(str) + str.StringOffset);
}

typedef struct
{
    FOX_DATA_NODE_ENTRY_PARAM_TYPE Type;
    short NextParameterOffset;
	FoxDataString Name;
	switch (Type)
	{
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_UINT:
		uint Value;
		break;
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_STRING:
    	FoxDataString Value;
		break;
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_FLOAT:
    	float Value;
		break;
	default:
		Assert(false, "Unknown parameter type.");
		break;
	}
} FoxDataNodeParameter <read = ReadFoxDataNodeParameter>;
string ReadFoxDataNodeParameter(FoxDataNodeParameter& param)
{
	switch (param.Type)
	{
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_UINT:
		return Str("uint %s = %u", ReadFoxDataString(param.Name), param.Value);
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_STRING:
		return Str("string %s = %s", ReadFoxDataString(param.Name), ReadFoxDataString(param.Value));
	case FOX_DATA_NODE_ENTRY_PARAM_TYPE_FLOAT:
		return Str("float %s = %f", ReadFoxDataString(param.Name), param.Value);
	default:
		return "null";
	}

	return result;
}

struct FoxDataNode;

typedef struct 
{
	FoxDataNode Node;

	if (Node.NextNodeOffset != 0)
	{
		local long nodeStartPos = startof(Node) + Node.NextNodeOffset;
		
		do
		{
			FSeek(nodeStartPos);

			FoxDataNode Node;

			nodeStartPos += Node.NextNodeOffset;
		} while (Node.NextNodeOffset != 0);
	}
} FoxDataNodes <bgcolor = 0x7E846B>;

typedef struct
{
	FoxDataString Name <hidden = true>;
    uint Flags <hidden = true>; // Unknown. Greatest diversity is in GEOM and HTRE nodes. Most other formats have 0 or 1 (see their asserts for details).
    int DataOffset <hidden = true>; // 0 means no data
    uint DataSize <hidden = true>; // 0 means no data
    int ParentNodeOffset <hidden = true>; // Surmised based on confirmation of ChildNodeOffset and behavior (if slightly wonky; see htre.bt for details) in HTRE V3 format.
    int ChildNodeOffset <hidden = true>; // Confirmed thanks to PES SO
    int PreviousNodeOffset <hidden = true>; // 0 means no previous nodes
    int NextNodeOffset <hidden = true>; // 0 means no more nodes
    int ParametersOffset <hidden = true>; // 0 means no params
    uint Padding0 <hidden = true>; Assert(Padding0 == 0);
    uint Padding1 <hidden = true>; Assert(Padding1 == 0);

	if (ChildNodeOffset != 0)
	{
		FSeek(startof(this) + ChildNodeOffset);

		FoxDataNodes Children;
	}

#ifndef FOX_DATA_NO_USE_PARAMS // For some reason, TRAP files hack this to use as the entry count
	if (ParametersOffset != 0)
	{
		local long paramStartPos = startof(this) + ParametersOffset;

		do
		{
			FSeek(paramStartPos);

			FoxDataNodeParameter Parameter;

			paramStartPos += Parameter.NextParameterOffset;
		} while(Parameter.NextParameterOffset != 0);
	}
#endif

#ifdef FOX_DATA_PAYLOAD
#ifdef FOX_DATA_FLAG_IS_HAS_PAYLOAD
	if (DataOffset != 0 && (Flags == 1 || DataSize != 0))
#else
	if (DataSize != 0 && DataOffset != 0)
#endif
	{
		FSeek(startof(this) + DataOffset);

		FOX_DATA_PAYLOAD Payload;
	}
#endif
} FoxDataNode <read = Str("%s, Flags: %u", ReadFoxDataString(Name), Flags)>;

int GetFoxDataNodeParamIndex(FoxDataNode& node, string name)
{
	local uint pIdx;
	for (pIdx = 0; exists(node.Parameter[pIdx]); pIdx++)
	{
		if (Strcmp(ReadFoxDataString(node.Parameter[pIdx].Name), name) == 0)
			return pIdx;
	}

    return -1;
}

int GetFoxDataNodeIndex(FoxDataNodes& nodes, string name)
{
	local uint nIdx;
	for (nIdx = 0; exists(nodes.Node[nIdx]); nIdx++)
	{
		if (Strcmp(ReadFoxDataString(nodes.Node[nIdx].Name), name) == 0)
			return nIdx;
	}

    return -1;
}

typedef struct
{
	if (ReadUShort() == 0 || ReadUInt() == 372637195 || ReadUInt() == 1144389900) // 201209110, 201406020
		BigEndian();
	else
		LittleEndian();

    uint Version;
    uint NodesOffset;
    uint FileSize;
	FoxDataString Name;

	uint Flags;

	uint64 Unknown;
} FoxDataHeader <read = Str("Version: %d, Name: %s", Version, ReadFoxDataString(Name)), bgcolor = 0xaaaaaa>;

#endif