#include "common/common.bt"
#include "common/FoxData_common.bt"

#define C_HEADER 0x527f4b
#define C_ROOT 0x81d17d
#define C_UNIT 0xF7BEC3
#define C_SUBENTRY 0xFF4F8A
#define C_FOOTER 0xbce896

struct FdesHeader
{
    char Signature[4] <hidden = true>;
    char Version[4] <hidden = true>;
    uint FileSize;
    uint Padding[2] <hidden = true>; Assert(Padding[0] == 0 && Padding[1] == 0);
    uint DataOffset; Assert(DataOffset == 32);
    uint RootNodeCount;
    uint NameTableOffset;
} Header <hidden = true, bgcolor = C_HEADER>;

enum <uint> FDES_SHAPE_TYPE
{
    FDES_SHAPE_TYPE_NONE = 0,
	FDES_SHAPE_TYPE_SPHERE = 1,
	FDES_SHAPE_TYPE_BOX = 2,
	FDES_SHAPE_TYPE_CYLINDER = 3,
	FDES_SHAPE_TYPE_CAPSULE = 4,
	FDES_SHAPE_TYPE_POLYHEDRON = 5,
};

struct QuadDef
{
    uint A;
    uint B;
    uint C;
    uint D;
};

typedef struct
{
    // See: PhShape and PhShapeParam
    Vector3 Offset; uint Padding0 <hidden = true>;
    Quaternion Rotation;
    Vector3 Size; uint Padding1 <hidden = true>;

    FDES_SHAPE_TYPE ShapeType;

    uint VertexBufferOffset;
    uint VertexCount;
    FSeek(startof(this) + VertexBufferOffset);
    Vector4 Vertex[VertexCount];
    FSeek(startof(VertexCount) + sizeof(VertexCount));

    uint QuadDefTableOffset;
    uint QuadCount;
    FSeek(startof(this) + QuadDefTableOffset);
    QuadDef Quad[QuadCount];
    FSeek(startof(QuadCount) + sizeof(QuadCount));

    FAlign(16);
} FdesShapeDef <read = EnumToString(ShapeType), bgcolor = C_SUBENTRY>;

typedef struct
{
    Matrix4 MatrixA;
    Matrix4 MatrixB;

    uint NameIndex <hidden = true>;

    uint Padding <hidden = true>; Assert(Padding == 0);

    uint ShapeDefsOffset <hidden = true>;
    uint ShapeDefCount <hidden = true>;
    FSeek(startof(this) + ShapeDefsOffset);
    FdesShapeDef ShapeDef[ShapeDefCount] <optimize = true>;
    FSeek(startof(ShapeDefCount) + sizeof(ShapeDefCount));
} FdesNode <bgcolor = C_UNIT, read = NameTable.Name[NameIndex].CString>;

typedef struct
{
    FdesNode Node <bgcolor = C_ROOT>;
    uint ChildNodesOffset <hidden = true>;
    uint ChildNodeCount <hidden = true>;
    
    uint Padding[2] <hidden = true>;
    
    FdesNode ChildNodes[Root.ChildNodeCount] <optimize=false>;
} FdesRootNode <bgcolor = C_ROOT, read = NameTable.Name[Node.NameIndex].CString>;
    
FSeek(Header.DataOffset);
local uint rIdx = 0;
for (rIdx = 0; rIdx < Header.RootNodeCount; rIdx++)
{
    FdesRootNode Root;
    
    //then another array of two or three or a lot of vectors and some 8 integers 
    //60 weird integers at the end too
}

typedef struct
{
    StrCode32 Hash;
    uint Length;
    string CString;
} FdesNodeName <read = CString>;

FSeek(Header.NameTableOffset);
struct FdesNodeNameTable
{
    uint Count <hidden = true>;
    uint Offsets[Count] <hidden = true>;
    local uint i = 0;
    for (i = 0; i < Count; i++)
    {
        FSeek(startof(this) + Offsets[i]);
        FdesNodeName Name;
    }
} NameTable <hidden = true, bgcolor = C_FOOTER>;