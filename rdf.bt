// RDF - RadioDataFile
// By RLC - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/RDF
// Special thanks to Joey for the flag parsing parts!
LittleEndian();

struct Header
{
	ubyte version;
	
	if (version == 3)	//TPP
	{
		ubyte dialogueEventCount;
		
		ushort groupCount;		
		// short groupCount;		
		// if (groupCount<0)
		// {
			// BigEndian();
			// groupCount ?
		// }
		// If one were to make it check for endianness, it would need to check if this signed short is negative
		// but how does one tun the short value back into a positive short?
		ushort groupSetCount;
		ushort labelGroupCount;
		
		ubyte charaCount;
	}
	else if (version == 1)
	{
		FSkip(1);
		ushort groupCount;	
		uint offsetToGzSection1;
	}
	
} header <bgcolor=0x69626D, hidden=true>;

enum <ubyte> RadioType {
    real_time=0,
    espionage=1,
    optional=2,
    game_over=3,
    map=4,
    mission_image=4,
};

enum <ubyte> PhaseType {
    Sneak=0x1,
    Caution=0x2,
    Evasion=0x4,
    Clearing=0x8,
    Alert=0x10,
};

string ReadPhase(PhaseType &phase)
{
    local string str="";
    if (phase&Sneak)
    {
        str+="Sneak, ";
    };
    if (phase&Caution)
    {
        str+="Caution, ";
    };
    if (phase&Evasion)
    {
        str+="Evasion, ";
    };
    if (phase&Clearing)
    {
        str+="Clearing, ";
    };
    if (phase&Alert)
    {
        str+="Alert";
    };
	return str;
};

if (header.version == 3) // if TPP
{
	uint dialogueEventId[header.dialogueEventCount] <bgcolor=0xBCAF9C>; // The name of the Dynamic Dialogue event
				// fnv132: dd_ etc
	uint charas[header.charaCount] <bgcolor=0xBCAF9C>; //The state name of the "chara" state group in the Dynamic Dialogue event
				// fnv132:
				// miller = 3140691722 0A 27 33 BB
				// ocelot = 469355457 C1 CB F9 1B
				// cdtk = 3786002599 A7 D0 A9 E1
				// huey = 2975838118 A6 AF 5F B1

	typedef struct{
		uint condition;	//Either a state name of the "condition" state group in the Dynamic Dialogue event or variation set name
		//fnv321: very often, if not always, is just tolower of the subtitle/msgId: ie abcd1000_101010
		ubyte dialogueEventIndex <read=Str("%u",dialogueEventId[this])>;	// Can be 255/invalid
		ubyte charaIndex <read=Str("%u",charas[this])>; // Can be 255/invalid
		ubyte IsVariationSet : 1;
		ubyte padding : 3 <hidden=true>; Assert(padding==0);
		//RadioParameterTable - TppRadioCommand.RegisterIntervalNextLabelTable
		
        enum <ubyte> IntervalNextLabelType {
            Interval_400=0,
            Interval_100=1,
            Interval_200=2,
            Interval_300=3,
            Interval_600=4,
            Interval_750=5,
            Interval_900=6,
            Interval_1100=7,
            Interval_1500=8,
            Interval_2000=9,
            Interval_2500=10,
            Interval_3000=11,
            Interval_500=12,
            Interval_4000=13,
            Interval_5000=14,
            Interval_6000=15
        } intervalNextLabelId : 4; //seems to correlate with pause length?
		//local intervalNextLabelTable={400,100,200,300,600,750,900,1100,1500,2e3,2500,3e3,500,4e3,5e3,6e3}
							
	} LabelPart <read = Str("%u",condition)>;

	struct RadioGroup2{
		uint name; //strcode32, found in lua, ex "f1000_rtrg1010"
				
		// Byte 0
		ubyte flag0_1 : 1; Assert(flag0_1==0); // never on
		ubyte flag0_2 : 1; // most always on in more than half of cases
		ubyte flag0_4 : 1; // not on with the rest in 3838406372, Set_s0082_oprg0020, s0082
		ubyte flag0_8 : 1; // not on with the rest in 3368279276, s0040 and s0240_rtrg5000
		ubyte flag1_1 : 1; Assert(flag1_1==0); //unused?
				
        //tpp::gm::radio::RadioGroup2::GetRadioType	
		RadioType radioType : 3;
					
		// Byte 1
		//allow to play in phase:
        //tpp::gm::radio::RadioGroup2::GetPhase
        PhaseType phase : 5 <read=ReadPhase>;

        // tpp::gm::radio::RadioGroup2::GetInvalidTime
        //RadioParameterTable - TppRadioCommand.RegisterInvalidTimeTable
        //local invalidTimeTable={0,1,5,10,15,20,25,30,0,0,0,0,0,0,0,0}
        //id in the table here of the pause time from start of play til next available play
        enum <ubyte> InvalidTimeType {
            Invalid_0=0,
            Invalid_1=1,
            Invalid_5=2,
            Invalid_10=3,
            Invalid_15=4,
            Invalid_20=5,
            Invalid_25=6,
            Invalid_30=7,
        } invalidTimeId : 3;
					
		// Byte 2
		//Read bits 1-6 of the byte as the label count:
        //tpp::gm::radio::RadioGroup2::GetCalledLabelCount
		ubyte labelPartCount : 6 <hidden=true>; 
		//priority? labels with lower value will not interrupt and will not use interrupt "huh"
		ubyte unknown : 2;
					
		// Byte 3
		//all never off
        //tpp::gm::radio::RadioGroupSet2::GetMostPriority
		
        enum <byte> PriorityType {
            Prio_0=0,
            Prio_30=1,
            Prio_40=2,
            Prio_50=3,
            Prio_60=4,
            Prio_70=5,
            Prio_80=6,
            Prio_90=7,
            Prio_98=8,
            Prio_255=9,
            Prio_55=10,
        } priority : 4; Assert(priority<=10);
					
		enum <ubyte> PlayType{
            PlayType_Step=1, //play voices one at a time, overrides sequence? if all four are 0 then also true????
		    PlayType_RepeatLast=2, //during step sequence mode, after playing last step, repeat using last step
		    PlayType_PlayAll=4, //tpp::gm::radio::RadioGroup2::GetCalledLabelCount - if not on, only 1 label will play
		    PlayType_RandomUnknown=8, //play random repeatStartId to repeatEndId labels after all have been played in sequence
        } playType : 4;
					
		//on repeated play of step mode, with which to start and with which to end
		ubyte repeatStartId;
		ubyte repeatEndId;
					
		LabelPart labelPart[labelPartCount] <optimize=false>;
					
	} group2[header.groupCount] <bgcolor=0xCBBEB3, optimize=false, read=Str("%u",name)>;

	struct RadioGroupSet2{
		uint name;
		ubyte labelsCount <hidden=true>;
		uint labelName[labelsCount] <optimize=false>;
		//lua assigns sets to memory, and each label plays in order when the radio button is pressed with no intel radio target picked
	} groupSet[header.groupSetCount] <bgcolor=0xD9BDC5, optimize=false, read=Str("%u",name)>;

	struct RadioLabelGroup2
	{
		uint name;
		ubyte variationClipsCount <hidden=true>;
		LabelPart labelPart[variationClipsCount] <optimize=false>;
		// Here's an example
					
		// RadioData_comn1000.rdf
		// label D7 5E 23 63
		// variationSetName A4 0E 86 4F
		// sbpVoiceId 85 72 1E 84 - That's it. You've made it out of the hot zone.
		// sbpVoiceId 73 8A 37 41 - No sign of the enemy. Mission complete, Boss.
		// variationSetName 76 19 01 B6
		// sbpVoiceId 72 8A 37 41 - All right. You're out of the hot zone.
		// sbpVoiceId CC DF 48 49 - No enemy forces in pursuit. Mission complete.
					
		// The label randomly picks one of the variation sets
	} labelGroup2[header.labelGroupCount] <optimize=false, bgcolor=0xE8C7DE, read=Str("%u",name)>;

}
else if (header.version == 1) // if GZ
{

	struct RadioHead{
		uint labelName;		// StrCode32 hash of label name used by lua, ex "e0010_rtrg0090"
		uint labelOffset;	// Global
	} radioHead[header.groupCount] <optimize=false, hidden=true, fgcolor=0xBCAF9C>;
				
	local int radioIndex <hidden=true>;
	radioIndex=-1;
	struct RadioBody{
		RadioType radioType;
		//0 - real-time
		//1 - espionage
		//2 - optional
		//3 - game over
					
		ubyte u1;
		//1
		//2
		//4
		//8
		ushort invalidTime; //10000 on same stuff that has long invalidtime in tpp
		short padding <hidden=true>; Assert(padding==0);
		ushort unk2; //usually 2400 - delay?
					
		ubyte u2;
		ubyte u3;

		ubyte priority; //0-64
		ubyte voiceClipCount <hidden=true>;
		ubyte repeatStartId;
		ubyte repeatEndId;
		short padding <hidden=true>; Assert(padding==0);
					
		struct GzVoice{
			uint dialogueEvent;	// .sbp HIRC.dat voice clip list, value before 0x6402
			uint chara; // .sbp HIRC.dat voice clip list, top entry
			uint condition; // .sbp HIRC.dat voice clip id
			ubyte weight;			// Usually 0x64 (looks like wwise probabilty weight)
			ubyte intervalNextLabelId;			// Sometimes 0x00, sometimes 0x02, sometimes 0x04
			short padding <hidden=true>; Assert(padding==0);
						
		} gzVoice[voiceClipCount] <optimize=false, read=Str("%u",condition)>;

		local int thisIndex <hidden=true>;
		thisIndex=radioIndex+1;
		radioIndex++;

	} radioBody[header.groupCount] <optimize=false, bgcolor=0xBCAF9C, read=Str("%u",radioHead[thisIndex].labelName)>;
			
	Assert(header.offsetToGzSection1==FTell(),"Offset to GzSection 1 is wrong!!");

	ubyte optionalSetsCount;

	short padding <hidden=true>; Assert(padding==0);
	ubyte padding <hidden=true>; Assert(padding==0);
	radioIndex=-1;
	struct OptionalSetHead{
		uint optionalSetName;				// Not sure what these are, some sort of radio label sets?
		uint optionalSetOffset;		// Local (Section 2 start) offset to Section 3 entry
	} optionalSetHead[optionalSetsCount] <optimize=false, hidden=true, fgcolor=0xD9BDC5>;
					
	struct OptionalSetGz{
		ushort optionalLabelCount <hidden=true>;
		short padding <hidden=true>; Assert(padding==0);
		uint optionalRadioLabelOffset[optionalLabelCount] <optimize=false>;
		local int thisIndex <hidden=true>;
		thisIndex=radioIndex+1;
		radioIndex++;		
	} optionalSet[optionalSetsCount] <optimize=false, bgcolor=0xD9BDC5, read=Str("%u",optionalSetHead[thisIndex].optionalSetName)>;

};

// Special thanks to BobDoleOwndU and OldBanana and Joey!
if (FTell() % 16 != 0)
{
	FSkip(16 - (FTell() % 16));
    Assert(FTell() == FileSize(), "Failed  to reach EoF.");
}