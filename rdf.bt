// RDF - RadioDataFile
// By RLC - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/RDF
// Special thanks to Joey for the flag parsing parts!
LittleEndian();

struct Header
{
	ubyte version;
	
	if (version == 3)	//TPP
	{
		ubyte dialogueEventCount;
		
		ushort radioCount;		
		// short radioCount;		
		// if (radioCount<0)
		// {
			// BigEndian();
			// radioCount ?
		// }
		// If one were to make it check for endianness, it would need to check if this signed short is negative
		// but how does one tun the short value back into a positive short?
		ushort optionalGroupSetCount;
		ushort variationSetCount;
		
		ubyte charaCount;
	}
	else if (version == 1)
	{
		FSkip(1);
		ushort radioCount;	
		uint offsetToGzSection1;
	}
	
} header <bgcolor=0x69626D>;

if (header.version == 3) // if TPP
{
	if (header.dialogueEventCount+header.charaCount > 0)
	{
		struct tppSection0
		{
			uint dialogueEventId[header.dialogueEventCount];	// These values are followed up by 64 02 in the HIRC.dat file in the .sbp
			// fnv132: dd_ etc
			uint charas[header.charaCount]; // These values are at the start of the lists, between the list entries and the sbpValue0 values
			// fnv132:
			// miller = 3140691722 0A 27 33 BB
			// ocelot = 469355457 C1 CB F9 1B
			// cdtk = 3786002599 A7 D0 A9 E1
			// huey = 2975838118 A6 AF 5F B1
			
		} sbpSection <bgcolor=0xBCAF9C>;
	}

	if (header.radioCount > 0)
	{
		struct tppSection1
		{
			struct Radio
			{
				uint radioId;
				//strcode32, found in lua
			
				// Byte 0
				ubyte flag0_1 : 1; // never on
				ubyte flag0_2 : 1; // most always on in more than half of cases
				ubyte flag0_4 : 1; // not on with the rest in 3838406372, Set_s0082_oprg0020, s0082
				ubyte flag0_8 : 1; // not on with the rest in 3368279276, s0040 and s0240_rtrg5000
                ubyte flag1_1 : 1; //unused?
                
				ubyte radioType : 3;
                // 0 - real-time
                // 1 - espionage
                // 2 - optional
                // 3 - game over
                // 4 - map
                // 5 - mission image
				
				// Byte 1
                //allow in phase:
				ubyte isSneak : 1;//SNEAK
				ubyte isCaution : 1;//CAUTION
				ubyte isEvasion : 1;//EVASION
				ubyte isClearing : 1;//CLEARING?
				ubyte isAlert : 1;//ALERT
                //RadioParameterTable - TppRadioCommand.RegisterInvalidTimeTable
				ubyte invalidTimeId : 3;
                //local invalidTimeTable={0,1,5,10,15,20,25,30,0,0,0,0,0,0,0,0}
                //id in the table here of the pause time from start of play til next available play
				
				// Byte 2
				//Read bits 1-6 of the byte as the label count:
				ubyte labelClipCount : 6;
                //priority? labels with lower value will not interrupt and will not use interrupt "huh"
				ubyte priority : 2; // unknown but used bits
				
				// Byte 3
                //all never off
                ubyte flag2_1 : 1;//never on by itself
                ubyte flag2_2 : 1;
                ubyte flag2_4 : 1;
				ubyte flag2_8 : 1;
                
                ubyte step : 1; //play voices one at a time, overrides sequence? if all four are 0 then also true????
                ubyte repeatLast : 1; //during step sequence mode, after playing last step, repeat using last step
                ubyte sequence : 1; //play all in order
				ubyte random : 1; //play random stuff whatever
				
                //on repeated play of step mode, with which to start and with which to end
				ubyte repeatStartId;
				ubyte repeatEndId;
				
				struct voiceClipSubEntry
				{
					uint voiceId;	// Sometimes isn't a voice clip id, but a variationSetName; check section 3
					//fnv321: very often, if not always, is just tolower of the subtitle/msgId: ie abcd1000_101010
					ubyte dialogueEventIndex;	// Can be 255/invalid
					ubyte charaIndex; // Can be 255/invalid
					ubyte IsVariationSet : 4;
                    //RadioParameterTable - TppRadioCommand.RegisterIntervalNextLabelTable
					ubyte intervalNextLabelId : 4; //seems to correlate with pause length?
                    //local intervalNextLabelTable={400,100,200,300,600,750,900,1100,1500,2e3,2500,3e3,500,4e3,5e3,6e3}
						
				} voiceClipSubEntries[labelClipCount] <optimize=false>;
				
			} radioLabels[header.radioCount] <optimize=false>;
			
		} labelsSection <bgcolor=0xCBBEB3>;
	}

	if (header.optionalGroupSetCount > 0)
	{
		struct tppSection2
		{
			struct optionSet
			{
				uint setName;
				ubyte labelsCount;
				struct voiceClip
				{
					uint labelName;
					
				} voiceClips[labelsCount] <optimize=false>;
				
				//lua assigns sets to memory, and each label plays in order when the radio button is pressed with no intel radio target picked
				
			} optionSets[header.optionalGroupSetCount] <optimize=false>;
			
		} optionalSection <bgcolor=0xD9BDC5>;
	}

	if (header.variationSetCount > 0)
	{
		struct tppSection3
		{
			struct variationSetEntry
			{
				uint variationSetName;
				ubyte variationClipsCount;
				struct variationVoiceClip
				{
					uint sbpVoiceId;
					ubyte dialogueEventIndex;
					ubyte charaIndex;
                    ubyte isVariationSet : 4;
					ubyte intervalNextLabelId : 4;
				} variationVoiceClips[variationClipsCount] <optimize=false>;
				
				// Here's an example
				
				// RadioData_comn1000.rdf
				// label D7 5E 23 63
				// variationSetName A4 0E 86 4F
				// sbpVoiceId 85 72 1E 84 - That's it. You've made it out of the hot zone.
				// sbpVoiceId 73 8A 37 41 - No sign of the enemy. Mission complete, Boss.
				// variationSetName 76 19 01 B6
				// sbpVoiceId 72 8A 37 41 - All right. You're out of the hot zone.
				// sbpVoiceId CC DF 48 49 - No enemy forces in pursuit. Mission complete.
				
				// The label randomly picks one of the variation sets
				
			} variationSetEntries[header.variationSetCount] <optimize=false>;
			
		} variationSection <bgcolor=0xE8C7DE>;
	}
}
else if (header.version == 1) // if GZ
{
	if (header.radioCount>0)
	{
		struct gzSection0
		{
			struct labelNameAndOffset
			{
				uint labelName;		// StrCode32 hash of label name used by lua, ex "e0010_rtrg0090"
				uint labelOffset;	// Global
				
			} labelOffsets[header.radioCount] <optimize=false>;
			
			struct labelParamEntry
			{
				ubyte radioType;
                //0 - real-time
                //1 - espionage
                //2 - optional
                //3 - game over
                
				ubyte u1;
                //1
                //2
                //4
                //8
				ushort invalidTime; //10000 on same stuff that has long invalidtime in tpp
				short padding <hidden=true>; Assert(padding==0);
				ushort unk2;
				
				ubyte u2a : 4;
				ubyte u2b : 4;
				ubyte u3a : 4;
				ubyte u3b : 4;
				ubyte u4;
				ubyte voiceClipCount;
				ubyte repeatStartId;
				ubyte repeatEndId;
				short padding <hidden=true>; Assert(padding==0);
				
				struct gzVoiceClipEntry
				{
					uint dialogueEventObjectId;	// .sbp HIRC.dat voice clip list, value before 0x6402
					uint chara; // .sbp HIRC.dat voice clip list, top entry
					uint condition; // .sbp HIRC.dat voice clip id
					ubyte weight;			// Usually 0x64 (looks like wwise probabilty weight)
					ubyte intervalNextLabelId;			// Sometimes 0x00, sometimes 0x02, sometimes 0x04
				    short padding <hidden=true>; Assert(padding==0);
					
				} gzVoiceClips[voiceClipCount] <optimize=false>;
				
			} labelEntries[header.radioCount] <optimize=false>;
			
		} labelNamesAndOffsets <bgcolor=0xBCAF9C>;
		
		struct GzOptionalSets
		{
			Assert(header.offsetToGzSection1==FTell(),"Offset to GzSection 1 is wrong!!");
			ubyte optionalSetsCount;
			if (optionalSetsCount>0)
			{
				short padding <hidden=true>; Assert(padding==0);
				ubyte padding <hidden=true>; Assert(padding==0);
				struct OptionalSetDef
				{
					uint optionalSetName;				// Not sure what these are, some sort of radio label sets?
					uint optionalSetOffset;		// Local (Section 2 start) offset to Section 3 entry
					
				} optionalSetDef[optionalSetsCount] <optimize=false>;
				
				struct OptionalSet
				{
					ushort optionalLabelCount;
				    short padding <hidden=true>; Assert(padding==0);
					uint optionalRadioLabelOffset[optionalLabelCount] <optimize=false>;
					
				} optionalSet[optionalSetsCount] <optimize=false>;
				
			};
			
		} optionalSets <bgcolor=0xD9BDC5>;
		
	}
};

// Special thanks to BobDoleOwndU and OldBanana and Joey!
if (FTell() % 16 != 0)
{
	FSkip(16 - (FTell() % 16));
    Assert(FTell() == FileSize(), "Failed  to reach EoF.");
}