// VFXLB - Video Effects Locator Binary File
// Template by RLC, based on documentation by Morbidslinky - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/VFXLB

#define COLOR_MS_BLU 0xFBB700
#define COLOR_MS_RED 0x3F00D0
#define COLOR_MS_BLK 0x000007

#include "common/common.bt"

enum <uint> FxLocatorHeaderFlags
{
	FXLB_HDR_0_1 		= 0x1,
	FXLB_HDR_0_2 		= 0x2,
	FXLB_HDR_SOMEINT	= 0x4, //s10010_s03_FxLocators.vfxlb
	FXLB_HDR_0_8 		= 0x8,
	
	FXLB_HDR_ID			= 0x10,
	FXLB_HDR_SOME_HASH	= 0x20,
	FXLB_HDR_EXTRA		= 0x40,
	FXLB_HDR_CHILDREN	= 0x80,
	
	FXLB_HDR_HIDE_SCALE		= 0x100,
	FXLB_HDR_HIDE_ROT		= 0x200,
	FXLB_HDR_ADD_TRANSFORM	= 0x400,
	FXLB_HDR_HIDE_IN_ADD 	= 0x800,
	
	FXLB_HDR_3_1 		= 0x1000, //twice in s10130_area02_FxLocators.vfxlb on locator, many times in mafr_flowStation_FxLocators.vfxlb, in locators
	FXLB_HDR_IS_LOCATOR = 0x2000,
	FXLB_HDR_3_4 		= 0x4000,
	FXLB_HDR_3_8 		= 0x8000,
};

enum <uint> FxLocatorExtraParametersFlags
{
	FXLB_EXT_0_1 = 0x1,
	FXLB_EXT_0_2 = 0x2,
	FXLB_EXT_0_4 = 0x4,
	FXLB_EXT_0_8 = 0x8,
	
	FXLB_EXT_1_1 = 0x10,
	FXLB_EXT_1_2 = 0x20,
	FXLB_EXT_1_4 = 0x40,
	FXLB_EXT_1_8 = 0x80,
	//maybe what defines the parameters?
	FXLB_EXT_2_1 = 0x100,
	FXLB_EXT_2_2 = 0x200,
	FXLB_EXT_2_4 = 0x400,
	FXLB_EXT_2_8 = 0x800,
	
	FXLB_EXT_3_1 = 0x1000,
	FXLB_EXT_3_2 = 0x2000,
	FXLB_EXT_3_4 = 0x4000,
	FXLB_EXT_3_8 = 0x8000,
	
	FXLB_EXT_4_1 = 0x10000,
	FXLB_EXT_4_2 = 0x20000,
	FXLB_EXT_4_4 = 0x40000,
	FXLB_EXT_4_8 = 0x80000,
	
	FXLB_EXT_5_1 = 0x100000,
	FXLB_EXT_5_2 = 0x200000,
	FXLB_EXT_5_4 = 0x400000,
	FXLB_EXT_5_8 = 0x800000,
	
	FXLB_EXT_6_1 = 0x1000000,
	FXLB_EXT_6_2 = 0x2000000,
	FXLB_EXT_6_4 = 0x4000000,
	FXLB_EXT_6_8 = 0x8000000,
	
	FXLB_EXT_7_1 = 0x10000000,
	FXLB_EXT_7_2 = 0x20000000,
	FXLB_EXT_7_4 = 0x40000000,
	FXLB_EXT_7_8 = 0x80000000,
};

typedef struct 
{
	PathCode64 VfxFile <comment="PathCode64+Extension hash", fgcolor=0x000007>;
	FxLocatorHeaderFlags flags : 16;
	uint padding1 : 16 <hidden=true>; Assert(padding1==0);
	uint padding2 <hidden=true>; Assert(padding2==0);
	
	if (flags&FXLB_HDR_3_1)
		Printf("@%d FXLB_HDR_3_1\n",FTell());
	
	if (!(flags&FXLB_HDR_HIDE_SCALE))
		Vector3 scale;
	if (!(flags&FXLB_HDR_HIDE_ROT))
		Quaternion rotation;
	Vector3 translation;
	if (flags&FXLB_HDR_ADD_TRANSFORM)
	{
		if ((flags&FXLB_HDR_HIDE_IN_ADD)&&!(flags&FXLB_HDR_HIDE_SCALE))
			Vector3 scale;
		if ((flags&FXLB_HDR_HIDE_IN_ADD)&&!(flags&FXLB_HDR_HIDE_ROT))
			Quaternion rotation;
		Vector3 translation;
	}
	
	if (flags&FXLB_HDR_ID)
		StrCode32 name <comment="StrCode32 hash of TppDataUtility handle">;
	if (flags&FXLB_HDR_SOME_HASH)
		StrCode32 somehash;
	if (flags&FXLB_HDR_CHILDREN)
	{
		ushort childCount <hidden=true>;
		ushort childLocatorIndex[childCount];
	}
	if (flags&FXLB_HDR_EXTRA)
	{
		uint parameterCount <hidden=true>;
		StrCode32 parameterHash[parameterCount];
		FxLocatorExtraParametersFlags extraParamFlags[parameterCount];
		local uint paramIdx <hidden=true>;
		for (paramIdx = 0; paramIdx < parameterCount; paramIdx++)
		{
			//This is not consistent at all. I thought it was simple.
			/* if (extraParamFlags[paramIdx]&FXLB_EXT_2_1)
				float param;
			if (extraParamFlags[paramIdx]&FXLB_EXT_2_2)
				int param;
			if (extraParamFlags[paramIdx]&FXLB_EXT_2_4)
				StrCode32 param; */
		};
	}
	
	if (flags&FXLB_HDR_SOMEINT) //s10010_s03_FxLocators.vfxlb
		int someInt;
} FxLocatorHeader;

struct Header
{
	char sign[5]; Assert(sign=="VFXLB");
	byte version;
	ushort locatorCount <fgcolor=COLOR_MS_RED>;
	ushort groupCount <fgcolor=COLOR_MS_BLU>;
	uint locatorOffsets[locatorCount] <fgcolor=COLOR_MS_RED>;
	uint groupOffsets[groupCount] <fgcolor=COLOR_MS_BLU>;
	local uint endOfHeader; endOfHeader = FTell();
} header <bgcolor=COLOR_MS_BLK, hidden=true>;

//FSeek tomfoolery to work around unfinished extra parameters
if (header.locatorCount>0)
	local uint locIdx <hidden=true>;
	for (locIdx = 0; locIdx < header.locatorCount; locIdx++)
	{
		FSeek(header.endOfHeader+header.locatorOffsets[locIdx]);
		FxLocatorHeader LocatorData <bgcolor=COLOR_MS_RED>;
	};

if (header.groupCount>0)
	local uint grpIdx <hidden=true>;
	for (grpIdx = 0; grpIdx < header.groupCount; grpIdx++)
	{
		FSeek(header.endOfHeader+header.groupOffsets[grpIdx]);
		FxLocatorHeader LocatorGroup <bgcolor=COLOR_MS_BLU>;
	};

//Assert(FTell() == FileSize(), "Failed to reach EoF.");

//1 0001 - Exclude Scale
//2 0010 - Exclude Rotation
//4 0100 - Include second transform
//8 1000 - Hide something in the second transform?
/* enum <uint> TransformType
{
	FXLB_TTYPE_SRT=0,
	FXLB_TTYPE_RT=1,
	FXLB_TTYPE_ST=2,
	FXLB_TTYPE_T=3,
	FXLB_TTYPE_SRTSRT=4, // second transform is definitely an offset, same elsewhere
	FXLB_TTYPE_SRTT=12,	// \s10130\s10130_area_fpkd\Assets\tpp\level\location\mafr\block_large\lab\s10130_area_FxLocators
	FXLB_TTYPE_RTRT=13,	// s10280_d14_FxLocators
	FXLB_TTYPE_TT=15,	// \s10070\s10070_d01_fpkd\Assets\tpp\level\mission2\story\s10150\s10070_d01_FxLocators
};

enum <uint> ParamType
{
	FXLB_PTYPE_ID=1,//s10020_d01_FxLocators.vfxlb, hash of argument of TppDataUtility.CreateEffectFromId/DestroyEffectFromId, ex FxLocator_fx_tpp_flrdia03_s1
	FXLB_PTYPE_SOMEHASH=2,//cypr_s_stage_02_FxLocators.vfxlb ???
	FXLB_PTYPE_SUBENTRIES=4,//afgh_130_147_FxLocators.vfxlb ???
	FXLB_PTYPE_ARRAY=8,//group s10010_l01_FxLocators.vfxlb, hash of argument of TppDataUtility.SetVisibleEffectFromGroupId, ex FxLocatorGroup_fx_tpp_dstwhtviw01_s2VD
}; */
/* 	uint flags0 : 4; //I think mafr_145_124_FxLocators.vfxlb gets affected by this when it's 14, 8 doesn't affect it or 2
	ParamType paramsFlags : 4 <comment="Bitfield of four types of param sets">;
	TransformType transformType : 4 <comment="Enum of transform set type">;
	uint flags3 : 4; if (flags3!=2&&flags3!=0&&flags3!=3) {Printf("@%d Flags3 isn't 2 or 0 or 3!! It's %d\n",FTell(),flags3);} //2 in locators, 0 in groups, 3 twice in s10130_area02_FxLocators.vfxlb on locator, many times in mafr_flowStation_FxLocators.vfxlb
	uint param4 : 4 <hidden=true>; if (param4!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param4);}
	uint param5 : 4 <hidden=true>; if (param5!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param5);}
	uint param6 : 4 <hidden=true>; if (param6!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param6);}
	uint param7 : 4 <hidden=true>; if (param4!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param7);} */
/* typedef struct
{
	uint flags0 : 4 <hidden=true>; if (flags0!=0) {Printf("@%d flags0 isn't 0!! It's %d\n",FTell(),flags0);}
	uint flags1 : 4 <hidden=true>; if (flags1!=0) {Printf("@%d flags1 isn't 0!! It's %d\n",FTell(),flags1);}
	uint flags2 : 4;
	uint flags3 : 4 <hidden=true>; if (flags3!=0) {Printf("@%d flags3 isn't 0!! It's %d\n",FTell(),flags3);}
	uint flags4 : 4;
	uint flags5 : 4;
	uint flags6 : 4;
	uint flags7 : 4 <hidden=true>; if (flags7!=0) {Printf("@%d flags7 isn't 0!! It's %d\n",FTell(),flags7);}
} FxLocatorExtraParametersFlags; */