// VFXLB - Video Effects Locator Binary File
// Template by RLC, based on documentation by Morbidslinky - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/VFXLB

// BigEndian();

// Regardless of endianness
BitfieldRightToLeft();

#define COLOR_MS_BLU 0xFBB700
#define COLOR_MS_RED 0x3F00D0
#define COLOR_MS_BLK 0x000007

#include "common/common.bt"

enum <uint> FxLocatorHeaderFlags
{
	FX_LOCATOR_HEADER_FLAGS_0		= 0x1,
	FX_LOCATOR_HEADER_FLAGS_1		= 0x2,
	FX_LOCATOR_HEADER_FLAGS_SOMEINT = 0x4, //s10010_s03_FxLocators.vfxlb
	FX_LOCATOR_HEADER_FLAGS_3 	= 0x8,

	FX_LOCATOR_HEADER_FLAGS_ID		   = 0x10,
	FX_LOCATOR_HEADER_FLAGS_SOMEHASH   = 0x20,
	FX_LOCATOR_HEADER_FLAGS_PARAMETERS = 0x40,
	FX_LOCATOR_HEADER_FLAGS_CHILDREN   = 0x80,

	FX_LOCATOR_HEADER_FLAGS_NO_SCALE = 0x100,
	FX_LOCATOR_HEADER_FLAGS_NO_ROT	 = 0x200,

	FX_LOCATOR_HEADER_FLAGS_TRANSFORM2				= 0x400,
	FX_LOCATOR_HEADER_FLAGS_TRANSFORM2_NO_SCALE	    = 0x800,
	FX_LOCATOR_HEADER_FLAGS_TRANSFORM2_NO_ROT		= 0x1000, //twice in s10130_area02_FxLocators.vfxlb on locator, many times in mafr_flowStation_FxLocators.vfxlb, in locators

	FX_LOCATOR_HEADER_FLAGS_D = 0x2000,
	FX_LOCATOR_HEADER_FLAGS_E		   = 0x4000,
	FX_LOCATOR_HEADER_FLAGS_F		   = 0x8000,
};

typedef struct 
{
	PathCode64 VfxFile <fgcolor=0x000007>;

	FxLocatorHeaderFlags Flags; Assert(Flags < 0x10000);

	uint Padding <hidden=true>; Assert(Padding == 0);
	
	if (!(Flags & FX_LOCATOR_HEADER_FLAGS_NO_SCALE))
		Vector3 Scale;
	if (!(Flags & FX_LOCATOR_HEADER_FLAGS_NO_ROT))
		Quaternion Rotation;
	Vector3 Translation;

	if (Flags & FX_LOCATOR_HEADER_FLAGS_TRANSFORM2)
	{
		if (!(Flags & FX_LOCATOR_HEADER_FLAGS_TRANSFORM2_NO_SCALE))
			Vector3 Scale2;
		if (!(Flags & FX_LOCATOR_HEADER_FLAGS_TRANSFORM2_NO_ROT))
			Quaternion Rotation2;
		Vector3 Translation2;
	}
	
	if (Flags & FX_LOCATOR_HEADER_FLAGS_ID)
		StrCode32 TppDataUtilityHandleName; // StrCode32 hash of TppDataUtility handle

	if (Flags & FX_LOCATOR_HEADER_FLAGS_SOMEHASH)
		StrCode32 SomeHash;

	if (Flags & FX_LOCATOR_HEADER_FLAGS_CHILDREN)
	{
		ushort ChildCount <hidden=true>;
		ushort ChildLocatorIndex[ChildCount];
	}

	if (Flags & FX_LOCATOR_HEADER_FLAGS_PARAMETERS)
	{
		uint ParameterCount <hidden = true>;

		StrCode32 ParameterName[ParameterCount];
		
		struct FxVfxInstanceParameterDesc
		{
			uint Unknown : 8; Assert(Unknown == 0);
			uint Type : 8;
			uint Offset : 16;
		} ParameterDesc[ParameterCount] <optimize = false, hidden = true>;

		local uint pmIdx;
		for (pmIdx = 0; pmIdx < ParameterCount; pmIdx++)
		{
			FSeek(startof(this) + ParameterDesc[pmIdx].Offset);
			switch (ParameterDesc[pmIdx].Type)
			{
			case 0:
				int Param;
				break;
			case 1:
				float Param;
				break;
			case 6:
				StrCode32 Param;
				break;
			default:
				Assert(false);
				break;
			}
		};
	}
	
	if (Flags & FX_LOCATOR_HEADER_FLAGS_SOMEINT) //s10010_s03_FxLocators.vfxlb
		int SomeInt;
} FxLocatorCommonHeader;

struct FxLocatorBinaryHeader
{
	char Signature[5]; Assert(Signature == "VFXLB");

	byte Version;

	ushort LocatorCount <fgcolor = COLOR_MS_RED>;
	ushort GroupCount <fgcolor = COLOR_MS_BLU>;

	uint LocatorOffsets[LocatorCount] <fgcolor = COLOR_MS_RED>;
	uint GroupOffsets[GroupCount] <fgcolor = COLOR_MS_BLU>;
} Header <bgcolor = COLOR_MS_BLK, hidden = true>;

if (Header.LocatorCount > 0)
{
	local uint lcIdx;
	for (lcIdx = 0; lcIdx < Header.LocatorCount; lcIdx++)
	{
		FSeek(10 + 4*(Header.LocatorCount + Header.GroupCount) + Header.LocatorOffsets[lcIdx]);
		
		FxLocatorCommonHeader LocatorData <bgcolor = COLOR_MS_RED>;
	};
}

if (Header.GroupCount > 0)
{
	local uint gpIdx;
	for (gpIdx = 0; gpIdx < Header.GroupCount; gpIdx++)
	{
		FSeek(10 + 4*(Header.LocatorCount + Header.GroupCount) + Header.GroupOffsets[gpIdx]);
		
		FxLocatorCommonHeader LocatorGroup <bgcolor = COLOR_MS_BLU>;
	};
}

//Assert(FTell() == FileSize(), "Failed to reach EoF.");

//1 0001 - Exclude Scale
//2 0010 - Exclude Rotation
//4 0100 - Include second transform
//8 1000 - Hide something in the second transform?
/* enum <uint> TransformType
{
	FXLB_TTYPE_SRT=0,
	FXLB_TTYPE_RT=1,
	FXLB_TTYPE_ST=2,
	FXLB_TTYPE_T=3,
	FXLB_TTYPE_SRTSRT=4, // second transform is definitely an offset, same elsewhere
	FXLB_TTYPE_SRTT=12,	// \s10130\s10130_area_fpkd\Assets\tpp\level\location\mafr\block_large\lab\s10130_area_FxLocators
	FXLB_TTYPE_RTRT=13,	// s10280_d14_FxLocators
	FXLB_TTYPE_TT=15,	// \s10070\s10070_d01_fpkd\Assets\tpp\level\mission2\story\s10150\s10070_d01_FxLocators
};

enum <uint> ParamType
{
	FXLB_PTYPE_ID=1,//s10020_d01_FxLocators.vfxlb, hash of argument of TppDataUtility.CreateEffectFromId/DestroyEffectFromId, ex FxLocator_fx_tpp_flrdia03_s1
	FXLB_PTYPE_SOMEHASH=2,//cypr_s_stage_02_FxLocators.vfxlb ???
	FXLB_PTYPE_SUBENTRIES=4,//afgh_130_147_FxLocators.vfxlb ???
	FXLB_PTYPE_ARRAY=8,//group s10010_l01_FxLocators.vfxlb, hash of argument of TppDataUtility.SetVisibleEffectFromGroupId, ex FxLocatorGroup_fx_tpp_dstwhtviw01_s2VD
}; */
/* 	uint flags0 : 4; //I think mafr_145_124_FxLocators.vfxlb gets affected by this when it's 14, 8 doesn't affect it or 2
	ParamType paramsFlags : 4 <comment="Bitfield of four types of param sets">;
	TransformType transformType : 4 <comment="Enum of transform set type">;
	uint flags3 : 4; if (flags3!=2&&flags3!=0&&flags3!=3) {Printf("@%d Flags3 isn't 2 or 0 or 3!! It's %d\n",FTell(),flags3);} //2 in locators, 0 in groups, 3 twice in s10130_area02_FxLocators.vfxlb on locator, many times in mafr_flowStation_FxLocators.vfxlb
	uint param4 : 4 <hidden=true>; if (param4!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param4);}
	uint param5 : 4 <hidden=true>; if (param5!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param5);}
	uint param6 : 4 <hidden=true>; if (param6!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param6);}
	uint param7 : 4 <hidden=true>; if (param4!=0) {Printf("@%d param4 isn't 0!! It's %d\n",FTell(),param7);} */
/* typedef struct
{
	uint flags0 : 4 <hidden=true>; if (flags0!=0) {Printf("@%d flags0 isn't 0!! It's %d\n",FTell(),flags0);}
	uint flags1 : 4 <hidden=true>; if (flags1!=0) {Printf("@%d flags1 isn't 0!! It's %d\n",FTell(),flags1);}
	uint flags2 : 4;
	uint flags3 : 4 <hidden=true>; if (flags3!=0) {Printf("@%d flags3 isn't 0!! It's %d\n",FTell(),flags3);}
	uint flags4 : 4;
	uint flags5 : 4;
	uint flags6 : 4;
	uint flags7 : 4 <hidden=true>; if (flags7!=0) {Printf("@%d flags7 isn't 0!! It's %d\n",FTell(),flags7);}
} FxLocatorExtraParametersFlags; */