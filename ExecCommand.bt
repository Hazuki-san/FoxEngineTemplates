//first intparam
struct Header{
    short version;
    enum <short> Flags {
        DISABLE=0x1,
        SKIP=0x2,
    } flags;
} header;

//second intparam
struct HeaderB{
    short intIndexToEventParamCount;
    short valuePerParamCount;
} headerB;

//2.5th intparam
if ( header.flags & SKIP )
{
    struct TimeSection{
        int startFrame;
        int endFrame;
    } timeSection;
};

//third intparam
FSeek(headerB.intIndexToEventParamCount*4);
struct ParamInfo{
    short intIndexToIntValues;
    short paramCount;//??? sometimes there actually are event params when this is 0
} paramInfo;

//event param definitions
FSeek(paramInfo.intIndexToIntValues*4);
local int index;
for (index = 0; index < paramInfo.paramCount; index++)
{
    FSeek(paramInfo.intIndexToIntValues*4+index*8);
    struct Param{
        short valueIndex;
        enum <ubyte> PropertyType {
            Int8 = 0,
            UInt8 = 1,
            Int16 = 2,
            UInt16 = 3,
            Int32 = 4,
            UInt32 = 5,
            Int64 = 6,
            UInt64 = 7,
            Float = 8,
            Double = 9,
            Bool = 10,
            String = 11,
            Path = 12,
            EntityPtr = 13,
            Vector3 = 14,
            Vector4 = 15,
            Quat = 16,
            Matrix3 = 17,
            Matrix4 = 18,
            Color = 19,
            FilePtr = 20,
            EntityHandle = 21,
            EntityLink = 22,
            PropertyInfo = 23,
            WideVector3 = 24
        } paramType;
        ubyte flag;//?
        uint paramName;
    } param;    
}

//integer values
for (index = paramInfo.paramCount; index-- > 0; index)
{
    switch(param[index].paramType)
    {
        case Int8:
        case UInt8:
        case Int16:
        case UInt16:
        case Int32:
        case UInt32:
        case Bool:
            uint value;
            break;
        default:
            break;
    };
}