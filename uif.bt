LittleEndian();

/* Color defines. */
#define COLOR_HEADER 0x85CFCA
#define COLOR_UIMODELDATA 0x8CBA80
#define COLOR_SECTION_1 0x9C8E65
#define COLOR_STRCODE32 0x634651

#include "common/common.bt"

local uint MaterialParamOffsetArray[4] = 
{
	8u,
	12u,
	16u,
	20u
};

struct UiModelFileHeader
{
	char Signature[4] <hidden=true>;
	
	ubyte Unknown0;
	ubyte Unknown1;

	ushort Unknown2;

	ubyte ReferencesResolutionFlags; Assert(ReferencesResolutionFlags == 2); // 2 == No preload
	ubyte Unknown4;

	ushort NodeCount;
	ushort StrCode32Count;
	ushort PathCode64Count;

	int NodesOffset;

	int StrCode32sRelativeOffset;
	int PathCode64sRelativeOffset;

	int BuffersSectionOffset;
		  
	int VerticesRelativeOffset;    // Relative offset from footer
	int VertexAttributesRelativeOffset;               // Relative offset from footer
	int IndicesRelativeOffset;
	int StrCodesRelativeOffset;   // From footer; StrCode hashes used for meshes (examples: fox_2d_Basic_LyBL)
} Header <bgcolor=COLOR_HEADER>;

enum <ushort> UI_MODEL_NODE_TYPE
{
	UI_MODEL_NODE_TYPE_DUMMY = 0,
	UI_MODEL_NODE_TYPE_NULL = 1,
	UI_MODEL_NODE_TYPE_MESH = 2,
	UI_MODEL_NODE_TYPE_TEXT = 3,
	UI_MODEL_NODE_TYPE_STENCIL = 4,
	UI_MODEL_NODE_TYPE_UNKNOWN = 5,
	UI_MODEL_NODE_TYPE_INVALID = 6
};

enum <uint> UI_MODEL_NODE_BLEND
{
	UI_MODEL_NODE_BLEND_OFF = 0,
	UI_MODEL_NODE_BLEND_ALPHA = 1,
	UI_MODEL_NODE_BLEND_ADD = 2,
};

struct UI_MODEL_NODE_FLAGS
{
	uint UI_MODEL_NODE_FLAGS_USE_PALETTE : 1;

	UI_MODEL_NODE_BLEND UI_MODEL_NODE_FLAGS_BLEND_MODE : 2 <read = EnumToString(this)>;

	uint UI_MODEL_NODE_FLAGS_AAAA : 1;

	uint UI_MODEL_NODE_FLAGS_BAAA : 1;

	uint UI_MODEL_NODE_FLAGS_BBAA : 1;

	uint UI_MODEL_NODE_FLAGS_BBBA : 1;

	uint UI_MODEL_NODE_FLAGS_BCAA : 1;

	uint UI_MODEL_NODE_FLAGS_ROTATION_TYPE_QUAT : 1;
	uint UI_MODEL_NODE_FLAGS_USE_PALETTE_SUB_A : 1;
	uint UI_MODEL_NODE_FLAGS_USE_PALETTE_SUB_B : 1;

	uint UI_MODEL_NODE_FLAGS_U1 : 5;

	uint UI_MODEL_NODE_FLAGS_MESH_UV_AND_COLOR : 1;

	uint UI_MODEL_NODE_FLAGS_U2 : 7;

	uint UI_MODEL_NODE_FLAGS_NO_USE_UI_ANIM: 1;
	uint UI_MODEL_NODE_FLAGS_NO_USE_SHADER_ANIM : 1;
};

struct UiModelNodeBase
{
	short NameStrCode32Index;

	hfloat Priority;

	UI_MODEL_NODE_FLAGS Flags;

	Vector3 Scale; 
	float UnknownScaleW; Assert(UnknownScaleW == 1);

	if ((Flags.UI_MODEL_NODE_FLAGS_ROTATION_TYPE_QUAT) != 0)
	{
		Quaternion RotationQuaterion;
	}
	else
	{
		Vector3 RotationEuler; 
		float UnknownRotationEulerW; Assert(UnknownRotationEulerW == 1);
	}

	Vector3 Translate;
	float UnknownTranslateW; Assert(UnknownTranslateW == 0);

	Vector4 Color;
};

struct UiModelNode
{
	UiModelNodeBase Base;

	short UnknownSecondaryNameStrCode32Index; // Probably a name; no exe hits. Examples: "mb" (UI_mb_cmn_pop_cmn_body)
	short PaletteColorNameStrCode32Index;            // Examples: "cmn-mb-txt-base"

	/*if (flags != 0)
	{
		Vector4 v1;
		Vector4 v2;
		Vector4 scale2;
		ushort hashIndex2;          // Examples: "sys", "cmn", "mb"
		ushort fontNameHashIndex;   // Examples: "cmn-mb-sys-M"

		ubyte f3;
		ubyte f3a;
		short n4;
		short o5;
		short n6;
	}*/
};

struct UiModelDummy
{
};

struct UiModelNull
{
	UiModelNode Base;
};

struct UiModelMesh
{
	UiModelNull Base;

	ushort VertexCountA;

	short VertexCountB;
	
	int VertexIndicesOffset	;

	int VertexIndicesRelativeOffsetA;
	int AttributeIndicesRelativeOffsetA;

	int VertexIndicesRelativeOffsetB;
	int AttributeIndicesRelativeOffsetB;

	short SubEntry0Count;
	short SubEntry1Count;
	int SubEntry0Offset;
	int SubEntry1Offset;

	short MaterialInstanceNameStrCode32Index;
	short MaterialTypeNameStrCodeIndex;
	short TextureParamCount;
	short MaterialParamCount;
	int TextureParamsOffset;
	int MaterialParamsOffset;

	int UnknownOffsetBBBA;
	
	local long position = FTell();

	if (SubEntry0Count != 0)
	{
		FSeek(SubEntry0Offset);
		struct SubEntry0
		{
			short UnknownStrCode32Index;
			ubyte uu1;
			ubyte uu2;
			int IndicesRelativeOffset;
		} SubEntry0s[SubEntry0Count];
	}

	if (SubEntry1Count != 0)
	{
		FSeek(SubEntry1Offset);
		struct SubEntry1
		{
			short UnknownStrCode32Index;
			ubyte uu1;
			ubyte uu2;
			int IndicesRelativeOffset;
			Vector4 v1;
		} SubEntry1s [SubEntry1Count];
	}

	if (TextureParamsOffset != -1)
	{
		FSeek(TextureParamsOffset);
		struct TextureParam
		{
			// Examples: Base_Texture, Mask_Texture, Screen_Texture
			short TypeHashIndex;
			// Index into the textures list
			short NamePathCode64Index;
		} textureParams[TextureParamCount];
	}

	if (MaterialParamsOffset != -1)
	{
		FSeek(MaterialParamsOffset);
		struct MaterialParam
		{
			// indexes into MaterialParamOffsetArray to skip to next section (is it a float, float2, float3, etc.) but we just use an array of floats instead and hack this exe array index into a counter
			ushort MaterialParamOffsetArrayIndex <hidden = true>; Assert(MaterialParamOffsetArrayIndex >= 0 && MaterialParamOffsetArrayIndex < 4);

			// Examples: UCenter_BaseTex, VCenter_BaseTex, UShift_BaseTex
			short NameStrCode32HashIndex;

			float Values[MaterialParamOffsetArrayIndex + 1];
		} MaterialParams[MaterialParamCount] <optimize = false>;
	}

	FSeek(position);
};

struct UiModelText
{
	UiModelNull Base;

	// if (base.Flags != 0)
	// {
	// 	Vector4 v1;
	// 	Vector4 v2;
	// 	Vector4 scale2;
	// 	ushort colorHashIndex2;         // Examples: "cmn-sys-txt-base", "hud", "cmn"
	// 	ushort fontNameHashIndex;       // Examples: "cmn-mb-sys-L", "cmn-hud-art-M"
		
	// 	ubyte n3;
	// 	ubyte n4;
	// }

	// if (base.Flags != 0)
	// {
	// 	ushort n5;
	// 	ushort n6;
	// 	ushort n7;
	// }
};

struct UiModelStencil
{
	UiModelNull Base;

	ushort n3;
	ushort n4;
	uint o5;
	uint o6;
	uint o7;
	uint o8;
	uint o9;

	ushort n10;
	ushort n11;

	uint u12;
	uint o13;
	ushort n14;
	ushort n15;
	uint o16;
	uint textureTypeHashIndex;  // Examples: "Base_Texture"
	ushort n18;
	ubyte n19;
	ubyte n20;
	uint n21;
	uint n22;

	Vector4 v1;
	Vector4 v2;
	Vector4 v3;
	Vector4 v4;
	Vector4 v5;
	Vector4 v6;
	Vector4 v7;
	Vector4 v8;
};

struct UiModelNodeHeader
{
	// Not fully unique; some files share them
	short NameStrCode32Index;
	UI_MODEL_NODE_TYPE Type;
	uint DataOffset;
	
	local long position = FTell();

	FSeek(DataOffset);

	switch (Type)
	{
	case UI_MODEL_NODE_TYPE_DUMMY:
		UiModelDummy Node;
		break;
	case UI_MODEL_NODE_TYPE_NULL:
		UiModelNull Node;
		break;
	case UI_MODEL_NODE_TYPE_MESH:
		UiModelMesh Node;
		break;
	case UI_MODEL_NODE_TYPE_TEXT:
		UiModelText Node;
		break;
	case UI_MODEL_NODE_TYPE_STENCIL:
		UiModelStencil Node;
		break;
	case UI_MODEL_NODE_TYPE_UNKNOWN:
		Assert(false);
		break;
	case UI_MODEL_NODE_TYPE_INVALID:
		Assert(false);
		break;
	}

	FSeek(position);
} Nodes[Header.NodeCount] <read = EnumToString(this.Type), bgcolor = COLOR_SECTION_1, optimize = false>;

FSeek(Header.BuffersSectionOffset);

if (Header.VerticesRelativeOffset != -1)
{
	Assert(FTell() == Header.BuffersSectionOffset + Header.VerticesRelativeOffset);
	Vector4 Vertices[(Header.VertexAttributesRelativeOffset - Header.VerticesRelativeOffset) / sizeof(Vector4)] <bgcolor = 0xAB862E>;
}

if (Header.VertexAttributesRelativeOffset != -1)
{
	Assert(FTell() == Header.BuffersSectionOffset + Header.VertexAttributesRelativeOffset);
	Vector4 VertexAttributes[(Header.IndicesRelativeOffset - Header.VertexAttributesRelativeOffset) / sizeof(Vector4)] <bgcolor = COLOR_STRCODE32>;
}

if (Header.IndicesRelativeOffset != -1)
{
	Assert(FTell() == Header.BuffersSectionOffset + Header.IndicesRelativeOffset);
	ushort Indices[(Header.StrCode32sRelativeOffset - Header.IndicesRelativeOffset) / sizeof(ushort)] <bgcolor = 0xAB862E>;
}

/* The first hash is the filename without extension (e.g., for UI_sys_end_layout.uif,
the first hash is UI_sys_end_layout. */

if (Header.StrCode32sRelativeOffset != -1)
{
	//Assert(FTell() == Header.BuffersSectionOffset + Header.StrCode32sRelativeOffset);
	FSeek(Header.BuffersSectionOffset + Header.StrCode32sRelativeOffset);
	StrCode32 StrCode32s[Header.StrCode32Count] <bgcolor=COLOR_STRCODE32, fgcolor=0xFFFFFF>;
}

FAlign(8);

if (Header.StrCodesRelativeOffset != -1)
{
	Assert(FTell() == Header.BuffersSectionOffset + Header.StrCodesRelativeOffset);
	while (FTell() < (Header.BuffersSectionOffset + Header.PathCode64sRelativeOffset) && ReadUInt64() != 0)
		StrCode StrCodes <bgcolor=0x866A66, fgcolor=0xFFFFFF>;
}

if (Header.PathCode64sRelativeOffset != -1)
{
	Assert(FTell() == Header.BuffersSectionOffset + Header.PathCode64sRelativeOffset);
	PathCode64 PathCode64s[Header.PathCode64Count] <bgcolor=COLOR_STRCODE32, fgcolor=0xFFFFFF>;
}