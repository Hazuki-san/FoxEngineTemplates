// https://github.com/oldbanana12/GeomsParser/blob/master/Geoms.cs

// =================
// | Version 3.8 |
// =================

LittleEndian();

#define COLOR_HEADER 0xDFEFAA
#define COLOR_ENTRY 0x7DE39E
#define COLOR_ENTRYSUBSECTION1 0x00AAFF
#define COLOR_CHUNK11 0xAED2E8
#define COLOR_ENTRYMATERIALSECTION 0xB9E8DD
#define COLOR_BOUNDINGBOXCHUNK 0xF7F205

typedef struct
{
    uint hash<format=hex>;
} StrCode32 <read=(hash)>;

typedef struct 
{
    uint hash<format=hex>;
} MtrCode32 <read=(hash)>;

typedef struct
{
	float x;
	float y;
	float z;
} Float3 <read=Str("(%g, %g, %g)", x, y, z)>;

typedef struct
{
	float x;
	float y;
	float z;
	float w;
} Float4 <read=Str("(%g, %g, %g, %g)", x, y, z, w)>;

typedef struct
{
	ushort indices[4];
} Quad <read=Str("(%d, %d, %d, %d)", indices[0], indices[1], indices[2], indices[3])>;

void EntryCollisionFlag()
{
	uint64 CollisionFlags<format=binary, bgcolor=0xFF00FF, fgcolor=0x00FF00>;
}

struct SubVerticesChunk
{
	uint VertexCountPlusOne;

	if ( ( FTell() + (VertexCountPlusOne * 16) + 32 - 4 ) > header.FileSize )
	{
		Printf("External geometry reference detected.");
		return;
	}
	
	uint UnknownUInts[3] <comment="Most often they are 1, 1 and 0.">;
	
	local long CurrentPos = FTell();
	
	uint VertexOffset;
	FSeek( CurrentPos + VertexOffset );
	
	Float4 Vertices[VertexCountPlusOne - 1];
};

// Slightly incorrect because this does not flip based on endian-ness.
typedef struct
{
    enum <ubyte> DATA_CHUNK_TYPE
    {
        DATA_CHUNK_TYPE_UNKNOWN0 = 0,
        DATA_CHUNK_TYPE_UNKNOWN1 = 1,
        DATA_CHUNK_TYPE_INDICES = 2,
        DATA_CHUNK_TYPE_UNKNOWN3 = 3,
        DATA_CHUNK_TYPE_BOUNDING_BOX = 4,
        DATA_CHUNK_TYPE_UNKNOWN5 = 5,
        DATA_CHUNK_TYPE_UNKNOWN6 = 6,
        DATA_CHUNK_TYPE_UNKNOWN7 = 7,
        DATA_CHUNK_TYPE_UNKNOWN8 = 8,
        DATA_CHUNK_TYPE_UNKNOWN11 = 11,
    } Type;
    
    ushort UnknownFlags <format=binary>; // The exe checks if 0x200 isn't set. If it isn't, it does something. mgsvtpp.exe!141bdc492
    ubyte QuadCount;
} DataChunkInfo <read=(EnumToString(Type))>;

struct DataChunk
{
	local long dataChunkRelativeStartPosition = FTell();

    DataChunkInfo Info<bgcolor=0x0080ff>;

	if (Info.Type == DATA_CHUNK_TYPE_BOUNDING_BOX) 
	{
        SetBackColor(COLOR_BOUNDINGBOXCHUNK);
        {
            // NEED MORE INVESTIGATION
	        uint LinesOffsetToNextDataChunk <comment="Number of lines left until next DataChunk (FaceChunk excluded). For the first DataChunk of a Section it's always 0">;
	        uint Flag;
        
            uint UnknownAlways4; Assert(UnknownAlways4 == 4);
        
	        EntryCollisionFlag();
        
	        uint64 Padding0 <hidden = true>; Assert(Padding0 == 0);
	        
	        Float4 BoundingBoxRadii <bgcolor=0xDBC48F, comment="Width/2, Height/2, Depth/2">;
	        Float4 BoundingBoxCenter <bgcolor=0xDBC48F>;
        }
        SetBackColor(cNone);
	}
	else if (Info.Type == DATA_CHUNK_TYPE_INDICES)
	{
	    uint64 Padding0 <hidden = true>; Assert(Padding0 == 0);
	    uint Padding1 <hidden = true>; Assert(Padding1 == 0);
	    
	    EntryCollisionFlag();
		
		// HWL just experimenting. this seems to be correct.
		// EDIT: no it's not damn it!
		uint UnknownValueSometimesFloat;
		
	    uint LinesOffsetToVertices <comment="The amount of lines left until we hit the sub vertices chunk">;
    
	    local uint _i;
	    for (_i = 0; _i < Info.QuadCount; _i++)
	    {
		    Quad QuadIndices;
		    short UnknownOffset <comment="Always negative.">;
	    }
		
	    // 16-byte alignment - THIS SKIPS DATA
        FSeek(((FTell() - 1) | 15) + 1);
	    
	    local long posBeforeVertices = FTell();
	    
	    // HWL removed a very old if check as of v3.6.5.
    
	    // HWL a cleaner implementation of the sub vertices chunk, as of v3.6.3.
	    // instead of checking if the number of vertices is too ridiculous, we
	    // instead use the line_offset_to_vertices variable. then, the template
	    // "snaps" to that sub vertices chunk, and after it's done, it returns
	    // to the previous position.
	    // note: this doesn't happen if the sub vertices chunk is right underneath
	    // this face chunk.
	    if (LinesOffsetToVertices > 0)
	    {
		    local long subVerticesChunkStartPos = (dataChunkRelativeStartPosition + (LinesOffsetToVertices * 16) );
		    
		    FSeek(subVerticesChunkStartPos);
		    SubVerticesChunk Subverticeschunk;
		    
		    // HWL very important check so that we don't accidently declare a new data chunk
		    // inside the sub vertices section.
		    if (subVerticesChunkStartPos != posBeforeVertices)
			    // return to the previous position.
			    FSeek(posBeforeVertices);
	    }
	}
    else
    {
        Assert(false, "Unknown DataChunk Type Detected!");
    }
};

struct ShortPairs
{
	short SS1;
	short SS2;
};

struct EntryDataChunkDefinition
{
	byte IsFinalEntry;

	byte DataChunkCount;
	ushort TotalDataChunksSizeInBytes;
	
	ushort OffsetToBoundingBoxOrSubvertices <comment="This offset is from the start of this part">;
	FSkip(2);
	
	ushort OffsetToBoundingBoxOrSubvertices <comment="This offset is also from the start of this part">;
	FSkip(2);
	
	uint OffsetToSubvertices <comment="NOTE: this offset starts from the beginning of geom properties subsection2, and NOT this specific part">;
	uint OffsetToBoundingBoxChunk;
	uint NextSectionOffset;
	
	EntryCollisionFlag();
};

struct EntryDataChunkDefinitions
{
    local uint localStartPos = FTell();

    while(!ReadUByte())
	{
		EntryDataChunkDefinition Entry;
	};

    FSkip(32);
};

struct EntryMaterialsSection
{
	byte MagicByte <hidden=true>;
    Assert(MagicByte == 0);
	
	byte InfoTriplet[3] <comment="(Material Count+1, Material Count+1, 1).">;
    Assert(InfoTriplet[0] == InfoTriplet[1]);
    Assert(InfoTriplet[2] == 1);
	
    local uint i = 0;
    for (i = 0; i < (InfoTriplet[0] - 1); i++)
    {
		MtrCode32 MaterialNameHash;
		FSkip(8);
    }

	// Align to nearest 16-byte boundary, then skip 32 more bytes.
	//FSeek(((FTell() - 1) | 15) + 1);
	//FSkip(32);
};

enum GEOM_SECTION_TYPE
{
	GEOM_SECTION_TYPE_0 = 0,
	GEOM_SECTION_TYPE_6 = 6,
};

struct EntrySubsection1
{
	Float3 EntryBoundingBoxCorner;
	ushort ShortPairsTotalSizeInBytes;
	ushort Section2Count;
	Float3 EntryBoundingBoxExtents;
	uint Section2Offset;

	Float3 Vector;
	uint UI1;
	
	uint UI2;
	uint UI2;
	
	EntryCollisionFlag();
	
	// HWL are they actually pairs?
	ShortPairs Pairs[ShortPairsTotalSizeInBytes / sizeof(ShortPairs)];
};

struct EntrySecondaryHeaderSection
{
	StrCode32 Hash1;
	
	uint Padding0<hidden=true>; Assert(Padding0 == 0);
	
	GEOM_SECTION_TYPE Type;
	Assert((SecondaryHeaderSection.Type == GEOM_SECTION_TYPE_0) || (SecondaryHeaderSection.Type == GEOM_SECTION_TYPE_6), "Unknown Entry section detected!");
	
    uint NextSectionOffset;
	
	uint SizeOfRemainingEntryData;
};

struct EntryHeaderSection
{
    StrCode32 Hash1;
	
	uint Padding0<hidden=true>; Assert(Padding0 == 0);

	uint UnknownOffset;

	uint64 Padding1<hidden=true>; Assert(Padding1 == 0);
	uint Padding2<hidden=true>; Assert(Padding2 == 0);
	
	uint SecondaryHeaderOffset; // Size of the header + padding
	
	int PreviousEntryOffset; // The value stored is positive, but it's for jumping backwards in list.
	
	uint NextEntryOffset; // Size of the entry + padding
};

struct Entry
{
	local long entryRelativeStartPosition = FTell();
	
	EntryHeaderSection HeaderSection;

	entryRelativeStartPosition += HeaderSection.SecondaryHeaderOffset;
	FSeek(entryRelativeStartPosition);
	EntrySecondaryHeaderSection SecondaryHeaderSection;

	// No more sections in the entry
	if (SecondaryHeaderSection.NextSectionOffset == 0)
		break;

	// Next section
	entryRelativeStartPosition += SecondaryHeaderSection.NextSectionOffset;
	FSeek(entryRelativeStartPosition);
	
	if (SecondaryHeaderSection.Type == GEOM_SECTION_TYPE_0)
	{
		EntrySubsection1 Section1<bgcolor=COLOR_ENTRYSUBSECTION1>;
	
		// Next section
		entryRelativeStartPosition += Section1.Section2Offset;
		FSeek(entryRelativeStartPosition);
	}
	
	local long Subsection2_StartPos = FTell();
	
	EntryDataChunkDefinitions Section2<bgcolor=COLOR_CHUNK11>;
	EntryMaterialsSection Materials<bgcolor=COLOR_ENTRYMATERIALSECTION>;
	
	// HWL fix for the padding between Materials and DataChunks.
	FSeek(Subsection2_StartPos + Section2.Entry[0].OffsetToBoundingBoxChunk);
	
    struct DataChunks
    {
	    local uint i = 0;
		
		local long curDataChunkArrayStartPos = 0;
	    while(!Section2.Entry[i].IsFinalEntry)
	    {
			curDataChunkArrayStartPos = FTell();
			Printf("Current subsection2: %u\n", i);
		    for (j = 0; j < Section2.Entry[i].DataChunkCount; j++)
		    {
				Printf("Current subsection2 entry: %u\n", j);
				
				//Printf("FTell - curDataChunkArrayStartPos = %u\n", FTell() - curDataChunkArrayStartPos);
				
				//Printf(">> IF CHECK RESULT: %u < %u\n", FTell() - curDataChunkArrayStartPos, Section2.Entry.TotalDataChunksSizeInBytes);
				
				// HWL this is just a temporary if check. it fixes part of the problem of too many
				// data chunks being declared, but it causes issues elsewhere. in some geom files, such as
				// afgh_gate002.geom, the opposite issue happens: too few data chunks. and yes, this
				// specific too few data chunks problem doesn't happen if this if check doesn't exist.
				if (FTell() - curDataChunkArrayStartPos < Section2.Entry.TotalDataChunksSizeInBytes) 
					DataChunk Chunk;
		    }
		    i++;
			//Printf("i == %u\n", i);
	    }
    } Data;
};

struct Header
{
	uint Version;
	uint Size;
	uint FileSize;

	uint u1 <hidden=true>; Assert(u1 == 7050094);

	uint64 Padding0<hidden=true>; Assert(Padding0 == 0);

	StrCode32 Hash1;
	StrCode32 Hash2;
} header <bgcolor=COLOR_HEADER>;

local long startPosition = header.Size;
local long nextEntry = -1;

while (nextEntry != 0)
{
	startPosition = FTell();
	Entry entry <bgcolor=COLOR_ENTRY>;
	nextEntry = entry.HeaderSection.NextEntryOffset;

	FSeek(startPosition + nextEntry);
}