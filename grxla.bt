#include "common/common.bt"

#define COLOR_HEADER_RED 0x8284F2
#define COLOR_ENTRY_YELL 0x81C9F7

struct FGxHeader
{
	char FGxL[4] <hidden = true>;
	uint Padding <hidden = true>; Assert(Padding == 0);
	int DataOffset; //0x10
	uint Version; Assert(Version == 1);
} Header <hidden = true, bgcolor = COLOR_HEADER_RED>;

FSeek(Header.DataOffset);

typedef struct
{
	StrCode Hash;

	local int64 rewindPos = FTell();

	uint StringOffset;
	
	uint Padding <hidden = true>; Assert(Padding == 0);

	if (StringOffset > 0)
	{
		FSeek(rewindPos + StringOffset);
		string String;
		FAlign(4);
	}

	FSeek(rewindPos + 8);
} GrxString <read = (StringOffset == 0 ? Hash.hash : String)>;

typedef struct
{
	char TypeName[4];
	uint SelfSize;
} FGxLightCommonHeader;

typedef struct
{
	GrxString Name;
} CommonLight;

typedef struct
{
	// StrCode lightNameHash;
	// int offsetToString; // Different in GZ
	// uint flags1; // Different in GZ
	
	GrxString Name;

	uint lightFlags;

	uint UnknownFlags; // Sometimes different in GZ?

	uint LightAreaOffset <hidden = true>;

	Vector3 translation;
	half outerRange;
	half innerRange;
	half dimmer;
	VectorH4 color;
	half temperature;
	half colorDeflection;

	FAlign(4);

	float lumen;
	half lightSize;
	half shadowBias;
	half lodShadowDrawRate;
	half lodFarSize;
	half lodNearSize;

	FAlign(4);

	int lodRadiusLevel;
	int lodFadeType;

	uint IrraditationPointOffset <hidden = true>;
	
	if (LightAreaOffset != 0)
	{
		FSeek(startof(LightAreaOffset) + LightAreaOffset);

		Transform lightArea;
	}
	if (IrraditationPointOffset != 0)
	{
		FSeek(startof(IrraditationPointOffset) + IrraditationPointOffset);

		Transform irradiationPoint;
	}
} PointLight;

typedef struct
{
	// StrCode lightNameHash;
	// int offsetToString; // Different in PS3
	// uint flags1; // Different in PS3
	
	GrxString Name;

	uint lightFlags;

	uint UnknownFlags;

	uint LightAreaOffset <hidden = true>;

	Vector3 translation;
	Vector3 reachPoint;
	Vector4 rotation;
	half outerRange;
	half innerRange;
	half umbraAngle;
	half penumbraAngle;
	half attenuationExponent;
	half dimmer;
	VectorH4 color;
	half temperature;
	half colorDeflection;
	float lumen;
	half lightSize;
	half shadowUmbraAngle;
	half shadowPenumbraAngle;
	half shadowAttenuationExponent;
	half shadowBias;
	half viewBias;
	half lodShadowDrawRate;
	half lodFarSize;
	half lodNearSize;

	FAlign(4);

	int lodRadiusLevel;
	int lodFadeType;

	uint IrraditationPointOffset <hidden = true>;
	
	if (LightAreaOffset != 0)
	{
		FSeek(startof(LightAreaOffset) + LightAreaOffset);

		Transform lightArea;
	}
	if (IrraditationPointOffset != 0)
	{
		FSeek(startof(IrraditationPointOffset) + IrraditationPointOffset);

		Transform irradiationPoint;
	}
} SpotLight;

typedef struct
{
	// StrCode lightNameHash;
	// int offsetToString;
	// uint flags1;

	GrxString Name;

	uint localFlags;
	
	ushort shapeType;

	FAlign(4);

	half innerScaleXPositive;
	half innerScaleYPositive;
	half innerScaleZPositive;
	half innerScaleXNegative;
	half innerScaleYNegative;
	half innerScaleZNegative;

	Transform transform;

	uint InnerAreaOffset <hidden = true>;

	short priority;
	ushort relatedLightCount;
	ushort relatedLightsStartIndex;
	ushort drawRejectionLevelsAndShDataIndex;
	
	float occlusionModeOpenRate;
	
	if (InnerAreaOffset != 0)
	{
		FSeek(startof(InnerAreaOffset) + InnerAreaOffset);

		Transform innerArea;
	}
} LightProbe;

typedef struct
{
	int valsOcc_1;
	int offsetToEdges;
	int edgesCount;
	int offsetToNodes;
	int nodesCount;
	Vector4 nodes[nodesCount];
	struct Face
	{
		short value1;
		short value2;
		short vertexIndex;
		short size;
	} faces[edgesCount];
} Occluder;

local int hasEntry = 1;
while (hasEntry)
{
	struct LightArrayEntry
	{
		FGxLightCommonHeader Header;

		switch (Header.TypeName)
		{
		case "CM00": //rlc Header entry type; at the start of every file
			CommonLight Light;
			break;
		case "\0\0\0\0": // rlc Terminator Entry; this will be at the end of every file
			hasEntry = 0;
			return;
		case "DL00": // rlc Directional Light - does it even exist?
			Assert(false," DirectionalLight: Unsupported.");
			break;
		case "PL01": // rlc PointLight GZ TPP
		case "PL02":
		case "PL03":
			PointLight Light;
			break;
		case "SL01": // rlc SpotLight GZ TPP
		case "SL02":
		case "SL03":
			SpotLight Light;
			break;
		case "LP00": // rlc Light Probe - unlike LightProbe?
			Assert(false,"LightProbe: Unsupported.");
			break;
		case "EP00": // rlc LightProbe
			LightProbe Light;
			break;
		case "OC00": // Occluder entry (.grxoc)
			Occluder Light;
			break;
		default: 
			Assert(false,"Unknown LightType!");
			break;
		}

		FSeek(startof(this) + Header.SelfSize);
	} Entry <optimize = false, bgcolor = COLOR_ENTRY_YELL>;
}