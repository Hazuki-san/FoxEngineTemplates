// SBP - SoundBank Package
// By RLC and Half Way Lambda, based on: https://wiki.xentax.com/index.php/Wwise_SoundBank_(*.bnk) https://github.com/secaproject/SBP_tool

enum <byte> ObjectType {
	Settings=1,
	Sound=2,
	EventAction=3,
	Event=4,
	SequenceContainer=5, // or random container
	SwitchContainer=6,
	ActorMixer=7,
	AudioBus=8,
	BlendContainer=9,
	MusicSegment=10,
	MusicTrack=11,
	MusicSwitchContainer=12,
	MusicPlaylistContainer=13,
	Attenuation=14,
	DialogueEvent=15,
	MotionBus=16,
	MotionFX=17,
	Effect=18,
	Custom=19,
	AuxillaryBus=20,
};

// HWL import all the other files we need, just for the sake of decreasing
// the size of this template
#include "../common/types.bt"
#include "common.bt"

#include "soundstructure.bt"
#include "obj_settings.bt"
//#include "obj_sound.bt"
#include "obj_eventaction.bt"
#include "obj_audiobus.bt"
#include "obj_musicswitchcontainer.bt"
#include "obj_musicsegment.bt"

#include "info_print.bt"

#include "sbp_sab.bt"
#include "sbp_laddie.bt"

#define soundBankHeader_color 0x636F13
#define BankHeader_color 0x3CCAE0
#define Hierarchy_color 0x1342F3
#define StreamId_color 0x5B2F3E
#define DataIndex_color 0x558CEA
#define STMG_color 0xFFAA00

// HWL there appears to be some differences between the sound banks TPP has and
// the ones WWise 2013 generates. when this happens, the template will use this
// bool to enable that behavior. this should be TEMPORARILY set to false when
// creating your own sound banks.
local Boolean is_game_soundbank = true;	   

struct BankHeader
{
	int sectionSize;
	local int startOfSection = FTell();
	int soundBankVersion <comment="TPP is 88">;
	uint soundBankId <comment="FNV132 hash of the .sbp name">; 
	int unknown0 <comment="12 in TPP/MGO vox/SSD, 0 in MGO bgm/GZ/PT?">;
	int unknown1 <comment="Usually 1?">;
	int unknown2 <comment="Varies?">;
	FSkip( (sectionSize + startOfSection) - FTell() ); // Different with more padding in PS3 vox_hideo? Unreasonably huge padding size in PT/sh soundbanks
};

struct Object
{
	ObjectType objectType <bgcolor=0xffab00>;
	int objectSize;
	uint objectId <comment="FNV132 hash", bgcolor=0xabff00>;

	// HWL for printing useful info at the console
	printType(objectType);
	openBracket();
	Printf( "Obj ID: " );
	Printf( "%u", objectId );
	Printf("\n");

	switch (objectType)
	{
		case Settings:
			byte settingsCount;
			ObjectSettingsType settingType[settingsCount];
			float settingValue[settingsCount];
			break;

		case Sound:
			SourceInfo sourceinfo;
			SoundStructure soundStructure <optimize=false>;
			break;

		case EventAction:
			//ScopeEventAction scope_of_event_action;
			ActionType action_type;

			printActionType(action_type);
			uint id_of_game_obj_referenced_above <comment="This is zero if there is no game object." , bgcolor=0xD8C5EA>;
			// Always zero, according to the wiki
			ubyte unknown;
			ubyte additional_params;

			// AkPropBundle<AkPropValue>::SetInitialParams() 
			if (additional_params > 0)
			{
				EventParameterType parameterTypes[additional_params];
				uint parameterValues[additional_params];
			}

			// AkPropBundle<RANGED_MODIFIERS<AkPropValue>_>::SetInitialParams() 
			ubyte propsCount;
			if (propsCount > 0)
			{
				ubyte unknowns[propsCount];
				uint64 unknown64s[propsCount];
			}

			if (action_type == AkActionType_Play || action_type == AkActionType_PlayAndContinue)
			{
				ubyte unknown; // sets up some unknown flags again
				uint fileID;
			}
			// Resume or pause action types
			else if (action_type >= 514 && action_type <= 777)
			{
				// NOTE: in the place of this ubyte is actually a uint if we're changing the state or switch
				// or a state/switch group. but i can't find the code that differentiates those cases...
				// EDIT: it's the virtual function that does it
				ubyte unknown_count <hidden=true>; // some unknown flags are updated based on this value
				ubyte resume_or_pause_unknown;
				ExceptionParams exceptionparams;
			}
			else if (action_type == AkActionType_SetState || action_type == AkActionType_SetSwitch)
			{
				uint state_switch_group_ID;
				uint target_switch_state_ID;
			}
			// set pitch and set volume, based on my own observations
			else if (action_type == AkActionType_SetPitch_M || action_type == AkActionType_SetPitch_O ||
				action_type == AkActionType_SetVolume_M || action_type == AkActionType_SetVolume_O)
			{
				ubyte unknown;
				// not sure if this is what it actually means
				enum <ubyte> AbsoluteOrRelative
				{
					Relative,
					Absolute
				} absoluteorrelative;
				float valueSetting;
			}
			else if (action_type == AkActionType_SetGameParameter || action_type == AkActionType_SetGameParameter_O)
			{
				FSkip(1); // appears to be more correct this way? this weird 0x4 appears very frequently after propsCount
				enum <ubyte> AkValueMeaning
				{
					AkValueMeaning_Default,
					AkValueMeaning_Indepentent,
					AkValueMeaning_Offset
				} valueMeaning;
				Vector3 position;
			}
			else if (action_type == AkActionType_BypassFX_M || action_type == AkActionType_BypassFX_O)
			{
				Boolean is_bypass;
				uint targetMask;

				// breaks parsing, commented out for now
				//ExceptionParams exceptionparams;
			}
			// seek action types
			else if (action_type >= 7682 && action_type <= 7689)
			{
				Boolean isSeekRelativeToDuration;
				Vector3 position;
				Boolean snapToNearestMarker;
				ExceptionParams exceptionparams;
			}

			/*
			if (action_type == SET_STATE || action_type == SET_SWITCH)
			{
				uint state_group_id;
				uint state_id;
			}
			else // HWL as of v2.6.3
			{
				Curve_Shape_Byte csb;
			}
			*/
			break;

		case Event:
			uint num_event_actions;
			local int i;
			for (i = 0; i < num_event_actions; ++i)
			{
				uint event_action_ID <bgcolor=0x66D1FF>;
	
				Printf("Event #");
				Printf("%u", i);
				Printf(" --> ");
				Printf("%u", event_action_ID);
				Printf("\n");
			}
			break;

		// as of v2.5
		case SequenceContainer:
			SoundStructure soundstructure;
			break;
	
		// as of v2.5
		case SwitchContainer:
			SoundStructure soundstructure;
			break;

		case ActorMixer: // HWL According to PS3 files. This is ugly.
			SoundStructure soundstructure;
			uint childrenCount;
			uint children[childrenCount];

			break;

		case AudioBus:
			uint parentObjectId <bgcolor=0xDED272>;

			AudioBus_Parameters audiobus_parameters;

			Boolean enable_positioning;
			Boolean enable_panner;

			Advanced_Settings_AudioBus advancedsettingsaudiobus;
			Channel_Configuration channelconfiguration;
			HDR hdr;
			Auto_Ducking autoducking;

			// HWL this one works differently than the usual
			// effect struct found in SoundStructure, but it
			// is cleaner and works better.
			// EDIT: no, it isn't.
			/*
			struct EffectStruct
			{
				ubyte effectsCount;
				if (effectsCount > 0)
				{
					BitMask bitmask;
					byte unknown;
					uint effect_object_ID;
					FSkip(2);
				}
			} effectstruct;
			*/
			Effects effects;

			//FSkip(4);

			// HWL i like how these two switch positions compared to
			// how it is in the SoundStructure you usually have.
			// what the hell WWise??
			RTPC rtpc;
			States states;

			break;

		case BlendContainer:
			SoundStructure soundstructure;
			break;

		case DialogueEvent:
			struct DialogueEventObject{
				byte unknown0;
				uint argumentsCount;
	
				uint arguments[argumentsCount] <comment="Definitely an object ID, so an FNV132 hash">;
				//RLC: Real-time radio notes;
				// 434268486 chara
				// 3703962904 condition
	
				GroupType groupType[argumentsCount] <optimize=false>;
	
				uint sizeOfEntryArray;
	
				byte unknown7;
	
				struct GroupDefinition
				{
					uint groupName;
					ushort firstEntryIndex <comment="Minus the amount of groups">;
					ushort childrenCount;
					ushort weight;
					ushort probability;
		
				};
	
				GroupDefinition groupDefiniton <comment="Default state">;
	
				GroupDefinition groupDefinitions[groupDefiniton.childrenCount] <optimize=false>; 
	
				struct Path
				{
					uint stateId;
					uint soundObjectId;
					ushort weight;
					ushort probability;
				};
	
				local int i;
				local int pathCollections[groupDefiniton.childrenCount] <optimize=false>;
				for (i = 0; i < groupDefiniton.childrenCount; ++i)
				{
					pathCollections[i]=groupDefinitions[i].childrenCount;
				};
	
				local int j = 0;
				struct Paths
				{
					Path path[pathCollections[j]] <optimize=false>;
					j+=1;

				} paths[groupDefiniton.childrenCount] <optimize=false>;
	
			} dialogueEventObject;
			break;

		case MusicSegment:
			SoundStructure soundstructure;
			MusicNodeParams musicnodeparams;
			double duration;
			if (duration != 0)
			{
				Markers markers;
			}
			break;
	
		case MusicTrack:
			uint count;
			// there's a weird for loop for the count in the integration demo code, apparently there can
			// be multiple sourceinfo objects??
			SourceInfo sourceinfo[count];

			// i would've preferred to put this in another .bt file, but due to it using the soundstructure
			// i can't
			struct Tracks
			{
				uint trackSrcCounter;
				if (trackSrcCounter > 0)
				{
					local int i;
					for (i = 0; i < trackSrcCounter; i++)
					{
						uint trackID, sourceID;
						double playAt, beginTrimOffset, endTrimOffset, srcDuration;
					}
					uint numOfSubTracks;
					// only goes here if CAkMusicTrack::SetPlaylist() has been executed without errors
					// ClipAutomationArray::Term(&this->m_arClipAutomation);
					uint clipAutomationCount;
					// reserve space for an AkArray based on the size of clipAutomationCount, fail if it's unable to
					if (clipAutomationCount > 0)
					{
						local int j;
						for (j = 0; j < clipAutomationCount; j++)
						{
							struct ClipAutomation
							{
								uint clipIndex;
								enum AutomationType
								{
									AutomationType_Volume,
									AutomationType_LPF,
									AutomationType_FadeIn,
									AutomationType_FadeOut
								} automationtype <optimize=false>;
								uint arraySize; // used for some kind of seconds to samples calculations
												// in a for loop after being used for the array graphs
							} clipauto <optimize=false>;
							// if clipauto.arraySize > 0, calls CAkClipAutomation::Set()
							if (clipauto.arraySize > 0)
							//	FSkip(clipauto.arraySize * 0xc);
							{
								struct ArrayGraphs
								{
									struct ArrayGraphPoints
									{
										float From, To;
										Curve_Shape Interp;
									} graphpoints[clipauto.arraySize];
								} arraygraphs;
							}
						}
					}
					SoundStructure soundstructure;

					// the following two integers are only read when the object has just been created in memory
					// so it didn't exist before we started reading this object
					enum <uint> AkMusicTrackRanSeqType
					{
						AkMusicTrackRanSeqType_Normal,
						AkMusicTrackRanSeqType_Random,
						AkMusicTrackRanSeqType_Sequence
					} random_seq_type <fgcolor=0xFF0000>;
					uint musicTrackLookAheadTime <fgcolor=0xFF0000>; // later gets converted to samples, but first it is multiplied
																	// by CAkMusicRenderer::StreamingLookAheadRatio() 
				}
			} tracks;
			break;

		case MusicSwitchContainer:
			SoundStructure soundstructure;
			MusicNodeParams musicnodeparams;
			Transitions transitions;
			Boolean is_continue_playback;
			//uint treeUDepth;

			// the integration demo skips this part, which is actually the state/switch groups that
			// the music switch container uses.
			//FSkip(treeUDepth * 5);
			StateSwitchGroupList stateswitchgrouplist;
			DecisionTree decisiontree;
			// i don't know why, but after all the reading's done a lot of
			// skipping's done to the data pointer. i ignore it here, since
			// there's no more to this object
			//FSkip(decisionTreeArgument1);
			break;
		case MusicPlaylistContainer: // early implementation
			SoundStructure soundstructure;

			uint unknown_count;
			uint unknown_array[unknown_count];

			// HWL adding this FSkip as of v2.4
			// HWL 11-NOV-2021 delete this BS below
			/*
			FSkip(4);

			uint num_of_music_segments <comment="Music Segments that are part of this playlist">;
			if (num_of_music_segments < 256) // magic number for cases that this would break
				uint music_segment_IDs[num_of_music_segments];
			*/
	
			//MSC_GeneralSettings msc_gs;

			break;

		case AuxillaryBus:
			uint parentObjectId <bgcolor=0xDED272>;
	
			AudioBus_Parameters audiobus_parameters;

			Boolean enable_positioning;
			Boolean enable_panner;

			// why are they here twice???
			Boolean override_parent_channel_configuration;
			Boolean override_parent_channel_configuration;

			if (override_parent_channel_configuration[0] == is_true)
			{
				// ushort instead of uint...the hell WWise???
				enum <ushort> Channel_Configuration_Short
				{
					_Parent = 0,
					_One_point_zero = 4, // 1.0
					_Two_point_zero = 3, // 2.0
					_Three_point_zero = 7, // 3.0
					_Four_point_zero = 51, // 4.0
					_Five_point_one = 63, // 5.1
					_Seven_point_one = 1599 // 7.1
				} channelconfigurationshort;
				FSkip(1);
	
				Channel_Configuration channelconfiguration;
			}
			else 
				FSkip(4 + 3); // HWL i don't know why there's such a huge gap here.
				// there's literally no other setting that exists within an
				// Auxillary Bus..

			HDR hdr_parent <comment="Probably the settings of a parent, given that these don't exist in auxiliary busses">;
			Auto_Ducking autoducking_parent <comment="Probably the settings of a parent, given that these don't exist in auxiliary busses">;

			Effects effects;
			RTPC rtpc;
			States states;

			break;
        case Attenuation:
            /*local int startOfObject = FTell();
            while (FTell()<startOfObject+objectSize)
            {
                struct AttenPoint
                {
                    uint attenType;
                    float x;
                    float y;
                };
                struct AttenGroup
                {
                    byte groupEntryCount;
                    if (groupEntryCount<0)
                    {
                        byte unknown20;
                        byte unknown21;
                    }
                    if (groupEntryCount>0)
                    {
                        short something;
                        float xGr;
                        float yGr;
                        AttenPoint attenPoints[something-1] <optimize=false>;
                        uint unknown15;
                    }
                };
                struct AttenGroupGroup
                {
                    byte attencount3;
                    if (attencount3>0)
                    {
                        AttenGroup attenGroups[attencount3] <optimize=false>;
                        
                    }
                };
                AttenGroupGroup attenGroup1 <optimize=false>;
            };*/
            break;
	}

	// HWL for printing to console purposes
	closeBracket();

};

struct Hierarchy
{
	int sectionSize;
	int objectCount;

	local long startObjectPos = FTell();
	local int curObj;

	// HWL i renamed this to curObj instead of i, because 010 is
	// dumb and would reset the number i because the same name is
	// reused in other structures...
	for (curObj = 0; curObj < objectCount; ++curObj)
	{
		Object object <optimize=false>;
	
		// HWL it's +5 since there always appears to be 5 empty
		// bytes between every object.
		FSeek(startObjectPos + object.objectSize + 5);
		startObjectPos = FTell();
	}
};

struct StreamId
{
	int sectionSize;
	int unknown0;
	int streamIdsCount;
	struct StreamIds
	{
		uint streamId <comment="FNV132 hash of the following string">; 
		ubyte streamIdStringLength;
		char streamIdString[streamIdStringLength];
	
	} streamIds[streamIdsCount] <optimize=false>;

};

struct StreamedPackage
{
	char sign[4];
	short wemCount;
	byte hasLipSync;
	FSkip(1);

	struct StreamedWemDefiniton
	{
		uint streamedPackageId <comment="FNV132 hash?">;
		int offsetToWem;
		if (hasLipSync==1)
			int offsetToLip;
	
	} streamedWemDefinition[wemCount] <optimize=false>;

	if (FTell() % 16 != 0)
		FSkip(16 - (FTell() % 16));

	local int index = 0;
	struct RiffStreamed
	{
		local int preLipIndexCheck = FTell();
		if (hasLipSync==1)
		{
			if ((streamedWemDefinition[index].offsetToWem-streamedWemDefinition[index].offsetToLip)>0)
				Laddie lipFile;
			Assert(FTell()-(streamedWemDefinition[index].offsetToWem-streamedWemDefinition[index].offsetToLip)==preLipIndexCheck,"Laddie didn't parse all!!!");
		}
	
		local int size = 0;
		if (index + 1 < wemCount)
			if (hasLipSync == 1)
				size = (streamedWemDefinition[index+1].offsetToLip - streamedWemDefinition[index].offsetToWem);
			else
				size = (streamedWemDefinition[index+1].offsetToWem - streamedWemDefinition[index].offsetToWem);
		else
			size = (endOfStp - streamedWemDefinition[index].offsetToWem);
	
		char riffData[size];
	
		index += 1;
	
	} riffStreamed[wemCount] <optimize=false>;
};

struct DataIndex
{
	int offsetsSize;
	struct EmbeddedWemDefinition
	{
		uint wemName <comment="FNV132 hash?">;
		int offsetToStart;
		int size;
	
	} embeddedWemDefiniton[offsetsSize / 12];
	// DATA + garbage4bytes only appears if the definitions don't end up with an aligned stream????
	if (FTell() % 16 != 0)
		FSkip(16 - (FTell() % 16));

	local int index = 0;
	local int startOfArray = FTell();
	struct RiffEmbed
	{
		// ok seems to be inconsistent between GZ, TPP and SBP_Tool output as to whether it wants to align te stream
		// so this might leave the riff files with empty bytes at the start
		FSkip( (startOfArray+embeddedWemDefiniton[index].offsetToStart) - FTell() );
	
		char riffData[embeddedWemDefiniton[index].size];
	
		index += 1;
	
	} riffEmbed[offsetsSize / 12] <optimize=false>;
};

// STMG is found only in Init.bnk, and contains useful information about project settings as well as the Switch Groups,
// State Groups and Game Parameters
struct STMG_struct
{
	uint offsetsSize;
	float volumeThreshold;

	ushort maxVoiceInstances;
	uint num_of_state_groups;

	local int curStateGroup;
	local int curCTT;
	for (curStateGroup = 0; curStateGroup < num_of_state_groups; ++curStateGroup)
	{
		struct stateGroup
		{
			uint state_group_ID;

			Printf("State Group ID: %u", state_group_ID);
			//Printf(%u, stateGroup);
			Printf("\n");

			uint default_transition_time <comment="in milliseconds">;
			uint num_of_custom_transition_times;

			// HWL yes, this is a bit ugly, but i did it this way because you
			// click through less menus in 010 when done like this
			for (curCTT = 0; curCTT < num_of_custom_transition_times; ++curCTT)
			{
				struct customTransitionTimes_struct
				{
					uint ID_of_from_state;
					uint ID_of_to_state;
					uint transition_time <comment="in milliseconds">;
				} customTransition_times_struct;
			}
		} stategroups;
	}

	uint num_of_switch_groups <comment="these set the current Switch based on a game parameter">;

	local int curSwitchGroup;
	local int curPoints;
	for (curSwitchGroup = 0; curSwitchGroup < num_of_switch_groups; ++curSwitchGroup)
	{
		struct switchGroup
		{
			uint switchGroup_ID;

			Printf("Switch Group ID: %u", switchGroup_ID);
			Printf("\n");

			uint game_parameter <comment="this game parameter determines currently set Switch">;
			uint num_of_points;

			// again the same ugly 'hack' as before
			for (curPoints = 0; curPoints < num_of_points; ++curPoints)
			{
				struct switchGroupPoint
				{
					float value_of_game_param;
					uint switch_ID <comment="id of Switch that is set when Game Parameter >= given value">;
					uint shape_of_curve <comment="always set to 9">;
				} switchGroupPoints;
			}

		} switchGroups;
	}

	uint num_of_game_params;
	local int curGameParam;
	for (curGameParam = 0; curGameParam < num_of_game_params; ++curGameParam)
	{
		struct gameParameter
		{
			uint game_param_ID;

			Printf("Game Parameter ID: %u", game_param_ID);
			Printf("\n");

			float default_value_of_game_param;
		} gameParameters;
	}
};																												   
// HWL custom soundbanks don't have any SBPL (or SBPB) section
local int has_soundbankheader = 0;
if ( (ReadUInt() == 1280328275) || (ReadUInt() == 1112556115) ) // == "SBPL" or "SBPB"
	has_soundbankheader = 1;

struct SoundBankHeader
{
	char sign[4];

	switch (sign)
	{
		case "SBPL":
			LittleEndian();
			break;
		case "SBPB":
			BigEndian();
			break;
	}

	if (sign != "BKHD")
	{
		ubyte sectionCount;
		ubyte bytesToSectionDefinitions;
		FSkip(2);
		struct SectionDefinition
		{
			char sign[4]; // "bnk" or "sab" or "stp"
			int offsetToSection;
			int sectionSize;

		} sectionDefinition[sectionCount];
	
		Assert(bytesToSectionDefinitions==FTell(),"SectionDefinitions size incorrect!!!");
	}

};

if (has_soundbankheader == 1)
{
	SoundBankHeader soundBankHeader <bgcolor=soundBankHeader_color>;

	if (FTell() % 16 != 0)
	FSkip(16 - (FTell() % 16));
}

local int currentSection = 0;
local int startOfSection = FTell();
local int endOfStp = 0;

struct Section0 {
	char sign[4];

	switch (sign)
	{
		case "BKHD":
			BankHeader bankHeader <bgcolor=BankHeader_color, comment="Bank Header">;
			break;
		case "HIRC":
			Hierarchy hierarchy <bgcolor=Hierarchy_color, comment="Object Hierarchy">;
			break;
		case "STID":
			StreamId streamId <bgcolor=StreamId_color, comment="Stream Ids">;
			break;
		case "DIDX":
			DataIndex dataIndex <bgcolor=DataIndex_color, comment="Embedded .wem sounds">;
			break;
		case "STMG":
			STMG_struct stmg <bgcolor=STMG_color, comment="Found only in Init.bnk">;
			break;
		default:
			Assert(2+2==5,"Unknown section!!!!!");
			break;
	}


};

struct Sections
{
	local long startOfSection = FTell();
    
	Assert(soundBankHeader.sectionDefinition[currentSection].offsetToSection==FTell(),"Offset to start of Section is incorrect!!!!");

	if (soundBankHeader.sectionDefinition[currentSection].sign == "bnk")
	{
		while (FTell() < startOfSection + soundBankHeader.sectionDefinition[currentSection].sectionSize)
			Section0 section0;
	
		if (FTell() % 16 != 0)
			FSkip(16 - (FTell() % 16));
	
	}
	else if (soundBankHeader.sectionDefinition[currentSection].sign == "sab")
	{
		StreamAnimationLip streamAnimationLip;
	}
	else if (soundBankHeader.sectionDefinition[currentSection].sign == "stp")
	{
		endOfStp = soundBankHeader.sectionDefinition[currentSection].sectionSize;
		struct Section2
		{
			StreamedPackage streamedPackage <bgcolor=StreamId_color, comment="Streamed .wem sounds">;

		} section2;
	};

	currentSection += 1;
};


if (has_soundbankheader == 1)
	Sections sections[soundBankHeader.sectionCount] <optimize=false>;
else
	while (FTell()<FileSize()) // HWL i don't know how many section0s there are, so just make new
	// ones until we get to the end of the file.
	Section0 section0 <optimize=false>;
