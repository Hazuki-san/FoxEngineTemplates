// SBP - SoundBank Package
// By RLC and Half Way Lambda, based on: https://wiki.xentax.com/index.php/Wwise_SoundBank_(*.bnk) https://github.com/secaproject/SBP_tool


// ALWAYS UPDATE THIS VERSION NUMBER WHEN THIS TEMPLATE GETS UPDATED!
//===============================
//        Version 2.4.1
//===============================

enum <byte> ObjectType{
	Settings=1,
	Sound=2,
	EventAction=3,
	Event=4,
	SequenceContainer=5, // or random container
	SwitchContainer=6,
	ActorMixer=7,
	AudioBus=8,
	BlendContainer=9,
	MusicSegment=10,
	MusicTrack=11,
	MusicSwitchContainer=12,
	MusicPlaylistContainer=13,
	Attenuation=14,
	DialogueEvent=15,
	MotionBus=16,
	MotionFX=17,
	Effect=18,
	SoundEffect=19,
	AuxillaryBus=20,
};

// HWL import all the other files we need, just for the sake of decreasing
// the size of this template
#include "soundstructure.bt"
#include "obj_settings.bt"
#include "obj_sound.bt"
#include "obj_eventaction.bt"

#include "info_print.bt"

#include "sbp_sab.bt"
#include "sbp_laddie.bt"

#define soundBankHeader_color 0x636F13
#define BankHeader_color 0x3CCAE0
#define Hierarchy_color 0x1342F3
#define StreamId_color 0x5B2F3E
#define DataIndex_color 0x558CEA
#define STMG_color 0xFFAA00						   

struct BankHeader
{
	int sectionSize;
	local int startOfSection = FTell();
	int soundBankVersion <comment="TPP is 88">;
	uint soundBankId <comment="FNV132 hash of the .sbp name">; 
	int unknown0 <comment="12 in TPP/MGO vox/SSD, 0 in MGO bgm/GZ/PT?">;
	int unknown1 <comment="Usually 1?">;
	int unknown2 <comment="Varies?">;
	FSkip( (sectionSize + startOfSection) - FTell() ); // Different with more padding in PS3 vox_hideo? Unreasonably huge padding size in PT/sh soundbanks
};

struct Object
{
	ObjectType objectType <bgcolor=0xffab00>;
	int objectSize;
	uint objectId <comment="FNV132 hash", bgcolor=0xabff00>;
	
	// HWL for printing useful info at the console
	printType(objectType);
	openBracket();
	Printf( "Obj ID: " );
	Printf( "%u", objectId );
	Printf("\n");
	
	switch (objectType)
	{
		case Settings:
			byte settingsCount;
			ObjectSettingsType settingType[settingsCount];
			float settingValue[settingsCount];
			break;
			
		case Sound:
			uint flagsUnknown;
			ObjectSoundEmbedOrStream embedOrStream;
			uint audioFileId;
			uint sourceId <comment="If streamed, same as audioFileId. If embedded, the soundBankId.">;
			
			Printf("Audio File ID: %u\n", audioFileId);
			Printf("Source File ID: %u", sourceId);
			Printf("\n");
			if (embedOrStream==Embedded)
			{
				int offsetToSoundFile;
				int lengthOfSoundFile;
			}
			ObjectSoundType soundType;
			SoundStructure soundStructure <optimize=false>;
			break;
			
		case EventAction:
			ScopeEventAction scope_of_event_action;
			ActionType action_type;
			
			printActionType(action_type);
			uint id_of_game_obj_referenced_above <comment="This is zero if there is no game object." , bgcolor=0xD8C5EA>;
			// Always zero, according to the wiki
			FSkip(1);
			ubyte additional_params;
			
			local int i;
			for (i = 0; i < additional_params; ++i)
			{
				EventParameterType parameter_type;
				if (parameter_type == DELAY || parameter_type == PLAY)
					uint milliseconds;
				else if (parameter_type == PROBABILITY)
					float probability;
			}
			// Always zero, according to the xentax wiki
			FSkip(1);
			
			if (action_type == SET_STATE || action_type == SET_SWITCH)
			{
				uint state_group_id;
				uint state_id;
			}
			break;
			
		case Event:
			uint num_event_actions;
			local int i;
			for (i = 0; i < num_event_actions; ++i)
			{
				uint event_action_ID <bgcolor=0x66D1FF>;
				
				Printf("Event #");
				Printf("%u", i);
				Printf(" --> ");
				Printf("%u", event_action_ID);
				Printf("\n");
			}
			break;

		case ActorMixer: // HWL According to PS3 files. This is ugly.
			ubyte u1;
			ubyte u2;
			uint unknown0;
			
			FSkip(3);
			
			// These two are usually the same?
			ubyte u3;
			ubyte u4;
			
			FSkip(1);
			ubyte bytes[4];
			
			ubyte u5;
			uint unknown1;
			uint unknown2;
			ushort u55;
			
			ubyte u6;
			ubyte u7;
			uint unknown3;
			uint unknown4;
			
			FSkip(2);
			ubyte u8;
			
			FSkip(2);
			ushort u9;
			ubyte u10;
			
			uint parentObjectId <bgcolor=0xDED272>;
			
			// HWL can't remember why i commented this out..i guess it went out of range?
			/*
			FSkip(15);
			uint wems_counter;
			
			// Just a fail safe.
			if ( (wems_counter & 0x0000FFFF) > 0)
			{
				uint wem_IDs_with_offset[wems_counter] <comment="These wem IDs are +2 of their wem ID from what I can tell.">;
			}
			*/
			break;
			
		case DialogueEvent:
			struct DialogueEventObject{
				byte unknown0;
				uint argumentsCount;
				
				uint arguments[argumentsCount] <comment="Definitely an object ID, so an FNV132 hash">;
				//RLC: Real-time radio notes;
				// 434268486 chara
				// 3703962904 condition
				
				enum <byte> GroupType
				{
					SwitchGroup = 0x00,
					StateGroup = 0x01,
					
				} groupType[argumentsCount] <optimize=false>;
				
				uint sizeOfEntryArray;
				
				byte unknown7;
				
				struct GroupDefinition
				{
					uint groupName;
					ushort firstEntryIndex <comment="Minus the amount of groups">;
					ushort childrenCount;
					ushort weight;
					ushort probability;
					
				};
				
				GroupDefinition groupDefiniton <comment="Default state">;
				
				GroupDefinition groupDefinitions[groupDefiniton.childrenCount] <optimize=false>; 
				
				struct Path
				{
					uint stateId;
					uint soundObjectId;
					ushort weight;
					ushort probability;
				};
				
				local int i;
				local int pathCollections[groupDefiniton.childrenCount] <optimize=false>;
				for (i = 0; i < groupDefiniton.childrenCount; ++i)
				{
					pathCollections[i]=groupDefinitions[i].childrenCount;
				};
				
				local int j = 0;
				struct Paths
				{
					Path path[pathCollections[j]] <optimize=false>;
					j+=1;
						
				} paths[groupDefiniton.childrenCount] <optimize=false>;
				
			} dialogueEventObject;
			break;
			
		case MusicSegment:
			SoundStructure soundstructure;
			
			// HWL adding this as of v2.4
			FSkip(4);
			
			uint children_count;
			if (children_count < 256) // doing this in case it breaks
				uint children_IDs[children_count];
			
			// HWL NOTE: commented this out because the sound structure has corruption
			// problems..
			
			//if (children_count > 0)
				//uint children_IDs[children_count];
			
			FSkip(5); // HWL god i hope this doesn't break anything..
			// EDIT: oh it sure does! but i can't find any other
			// good fix as of now..
			
			//while ( ReadUByte() == 0 )
			//{
			//	FSkip(1);
			//}
			
			uint num_of_music_tracks;
			//uint music_track_obj_ids[num_of_music_tracks];
			
			
			double d1;
			uint64 uint64_1;
			
			float tempo;
			byte signature_one;
			byte signature_two;
			
			uint u1;
			byte b1;
			
			// i think this skip is also needed here
			//FSkip(4);
			double time_length;
			
			uint u2;
			uint u3;
			uint64 uint64_2;
			uint u4;
			uint u5;
			
			double time_length_next;
			uint u6;
			
			// HWL according to WolvenKit, the rest is ignored if
			// more stuff exists
			
			break;
			
			
		// as v2.2
		case MusicTrack:
			uint WEM_counter;
			ushort unknown_short0;
			ushort unknown_short1;
			uint unknown2;
			
			// this is mentioned twice
			struct WemIDs
			{
				uint WEM_ID_1;
				uint WEM_ID_2;
			};
			WemIDs wem_ids[WEM_counter] <fgcolor=0x00FF00>;
			
			FSkip(1);
			
			break;
			
		// as v2.2
		case MusicSwitchContainer:
			SoundStructure soundstructure;
			
			// HWL just for the sake of ignoring the soundstructure issues,
			// i'm skipping stuff.
			// NOTE: this is according to the xentax wiki. WolvenKit
			// doesn't seem to parse this at all
			
			// Very f**king ugly hack, but it works.
			// EDIT: deleting this hack because it doesn't work!
			FSkip(4);
			
			uint num_of_children;
			uint child_OBJs[num_of_children];
			
			// 4 zero bytes, even though they're not zero
			uint apparently_zero;
			float f1;
			FSkip(8);
			
			float tempo;
			byte time_signature_1;
			byte time_signature_2; // usually 4/4
			byte magic01;
			FSkip(4);
			
			uint num_of_transitions;
			//uint unknown;	
		
			local uint curTransition;
			for (curTransition = 0; curTransition < num_of_transitions; ++curTransition)
			{
				struct Transition
				{
					byte unknown[62];
					
					while ( (ReadByte( FTell() )) == 0 )
						FSkip(1);
				} transitions;
			}
		
			/*
			local uint curTransition;
			for (curTransition = 0; curTransition < num_of_transitions; ++curTransition)
			{
				struct Transition
				{
					enum <int> sourceOBJ
					{
						Any = 0xFFFFFFFF//,
						//Nothing = 0
					} source_object;
					//sourceOBJ source_object;
					int fadeOutTime;
					uint shape_source_fade_out_curve;
					int source_fadeOut_offset;
					
					enum <uint> exitSource
					{
						Immediate = 0,
						Next_Grid = 1,
						Next_Bar = 2,
						Next_Beat = 3,
						Next_Cue = 4,
						New_Custom_cue = 5,
						Exit_Cue = 7
					} exit_source;
					
					// may be included?
					uint next_custom_cue <comment="MAY BE included">;
					enum <byte> checkBox0
					{
						//Nothing = 0,
						Play_post_exit_section = 0xFF
					} checkbox0;
					
					int destination_fade_in_time;
					uint shape_of_destination_fadeIn_curve;
					int destination_fade_in_offset;
					
					uint ID_of_match_for_custom_cue_filter <comment="Any = 0">;
					uint jmp_playlist_item_ID <comment="It's 0 if destination isn't playlist container">;
					
					enum <uint16> Sync
					{
						Entry_Cue = 0,
						Same_As_Playing_Segment = 1,
						Random_Cue = 2,
						Random_Custom_cue = 3 // see custom cue filter
					} sync_to;
					
					enum <byte> checkBox1
					{
						//Nothing = 0,
						Play_pre_entry_section_of_destination_obj = 1
					} checkbox1;
					
					// may be included
					byte custom_cue_filter <comment="Match source cue name = 1">;
					
					Boolean transition_has_transition_object_specified;
					uint transition_object_ID <comment="0 if no transition object">;
					
					int transition_fadeIn_time <comment="In milliseconds">;
					uint shape_of_transition_fadeIn_curve;
					int transition_fadeIn_offset <comment="In milliseconds">;
					int transition_fadeOut_time <comment="In milliseconds">;
					uint shapeOf_transition_fadeOut_curve;
					int transition_fadeOut_offset;
					
					enum <byte> checkBox2
					{
						//Nothing = 0,
						Play_pre_entry_section_of_transition_object = 0xFF
					} checkbox2;
					enum <byte> checkBox3
					{
						//Nothing = 0,
						Play_post_exit_section_of_transition_object = 0xFF
					} checkbox3;
					
				} transitions;
			}
			*/
			
			enum <uint> switchType
			{
				cur_switch_determines_which_musicPlay = 0,
				cur_state_determines_which_musicPlay = 0x01000000
			} switch_type;
			// THANK GOD this exists here (but of course it would exist)!
			uint switch_or_state_group_obj_ID;
			uint default_switch_or_state_ID <comment="0 if it's state 'None'">;
			Boolean continue_playing_on_switch_change;
			
			uint num_of_switches_or_states;
			local uint curSwitchOrState;
			
			/*
			for (curSwitchOrState = 0; curSwitchOrState < num_of_switches_or_states; ++curSwitchOrState)
			{
				struct SwitchOrState
				{
					uint switch_or_state_ID;
					uint music_obj_ID_played_when_this_is_set;
				} switch_or_state_settings;
			}
			*/			
			
			break;
		case MusicPlaylistContainer: // early implementation
			SoundStructure soundstructure;
			
			// HWL adding this FSkip as of v2.4
			FSkip(4);
			uint num_of_music_segments <comment="Music Segments that are part of this playlist">;
			if (num_of_music_segments < 256) // magic number for cases that this would break
				uint music_segment_IDs[num_of_music_segments];
			
			// HWL NOTE: disabling this because of issues with the sound structure destroying
			// everything
			
			//if (num_of_music_segments > 0)
			//	uint segment_IDs[num_of_music_segments];
			
			// Xentax article for the following 2:
			//FSkip(4);
			//float unknown;
			
			break;
	}
	
	// HWL for printing to console purposes
	closeBracket();
	
};

struct Hierarchy
{
	int sectionSize;
	int objectCount;
	
	local long startObjectPos = FTell();
	local int curObj;
	
	// HWL i renamed this to curObj instead of i, because 010 is
	// dumb and would reset the number i because the same name is
	// reused in other structures...
	for (curObj = 0; curObj < objectCount; ++curObj)
	{
		Object object <optimize=false>;
		
		// HWL it's +5 since there always appears to be 5 empty
		// bytes between every object.
		FSeek(startObjectPos + object.objectSize + 5);
		startObjectPos = FTell();
	}
};

struct StreamId
{
	int sectionSize;
	int unknown0;
	int streamIdsCount;
	struct StreamIds
	{
		uint streamId <comment="FNV132 hash of the following string">; 
		ubyte streamIdStringLength;
		char streamIdString[streamIdStringLength];
		
	} streamIds[streamIdsCount] <optimize=false>;
	
};

struct StreamedPackage
{
	char sign[4];
	short wemCount;
	byte hasLipSync;
	FSkip(1);
	
	struct StreamedWemDefiniton
	{
		uint streamedPackageId <comment="FNV132 hash?">;
		int offsetToWem;
		if (hasLipSync==1)
			int offsetToLip;
		
	} streamedWemDefinition[wemCount] <optimize=false>;
	
	if (FTell() % 16 != 0)
		FSkip(16 - (FTell() % 16));
	
	local int index = 0;
	struct RiffStreamed
	{
		local int preLipIndexCheck = FTell();
		if (hasLipSync==1)
		{
			if ((streamedWemDefinition[index].offsetToWem-streamedWemDefinition[index].offsetToLip)>0)
				Laddie lipFile;
			Assert(FTell()-(streamedWemDefinition[index].offsetToWem-streamedWemDefinition[index].offsetToLip)==preLipIndexCheck,"Laddie didn't parse all!!!");
		}
		
		local int size = 0;
		if (index + 1 < wemCount)
			if (hasLipSync == 1)
				size = (streamedWemDefinition[index+1].offsetToLip - streamedWemDefinition[index].offsetToWem);
			else
				size = (streamedWemDefinition[index+1].offsetToWem - streamedWemDefinition[index].offsetToWem);
		else
			size = (endOfStp - streamedWemDefinition[index].offsetToWem);
		
		char riffData[size];
		
		index += 1;
		
	} riffStreamed[wemCount] <optimize=false>;
};

struct DataIndex
{
	int offsetsSize;
	struct EmbeddedWemDefinition
	{
		uint wemName <comment="FNV132 hash?">;
		int offsetToStart;
		int size;
		
	} embeddedWemDefiniton[offsetsSize / 12];
	// DATA + garbage4bytes only appears if the definitions don't end up with an aligned stream????
	if (FTell() % 16 != 0)
		FSkip(16 - (FTell() % 16));
	
	local int index = 0;
	local int startOfArray = FTell();
	struct RiffEmbed
	{
		// ok seems to be inconsistent between GZ, TPP and SBP_Tool output as to whether it wants to align te stream
		// so this might leave the riff files with empty bytes at the start
		FSkip( (startOfArray+embeddedWemDefiniton[index].offsetToStart) - FTell() );
		
		char riffData[embeddedWemDefiniton[index].size];
		
		index += 1;
		
	} riffEmbed[offsetsSize / 12] <optimize=false>;
};

// STMG is found only in Init.bnk, and contains useful information about project settings as well as the Switch Groups,
// State Groups and Game Parameters
struct STMG_struct
{
	uint offsetsSize;
	float volumeThreshold;
	
	ushort maxVoiceInstances;
	uint num_of_state_groups;
	
	local int curStateGroup;
	local int curCTT;
	for (curStateGroup = 0; curStateGroup < num_of_state_groups; ++curStateGroup)
	{
		struct stateGroup
		{
			uint state_group_ID;
			
			Printf("State Group ID: %u", state_group_ID);
			//Printf(%u, stateGroup);
			Printf("\n");
			
			uint default_transition_time <comment="in milliseconds">;
			uint num_of_custom_transition_times;
			
			// HWL yes, this is a bit ugly, but i did it this way because you
			// click through less menus in 010 when done like this
			for (curCTT = 0; curCTT < num_of_custom_transition_times; ++curCTT)
			{
				struct customTransitionTimes_struct
				{
					uint ID_of_from_state;
					uint ID_of_to_state;
					uint transition_time <comment="in milliseconds">;
				} customTransition_times_struct;
			}
		} stategroups;
	}
	
	uint num_of_switch_groups <comment="these set the current Switch based on a game parameter">;
	
	local int curSwitchGroup;
	local int curPoints;
	for (curSwitchGroup = 0; curSwitchGroup < num_of_switch_groups; ++curSwitchGroup)
	{
		struct switchGroup
		{
			uint switchGroup_ID;
			
			Printf("Switch Group ID: %u", switchGroup_ID);
			Printf("\n");
			
			uint game_parameter <comment="this game parameter determines currently set Switch">;
			uint num_of_points;
			
			// again the same ugly 'hack' as before
			for (curPoints = 0; curPoints < num_of_points; ++curPoints)
			{
				struct switchGroupPoint
				{
					float value_of_game_param;
					uint switch_ID <comment="id of Switch that is set when Game Parameter >= given value">;
					uint shape_of_curve <comment="always set to 9">;
				} switchGroupPoints;
			}
			
		} switchGroups;
	}
	
	uint num_of_game_params;
	local int curGameParam;
	for (curGameParam = 0; curGameParam < num_of_game_params; ++curGameParam)
	{
		struct gameParameter
		{
			uint game_param_ID;
			
			Printf("Game Parameter ID: %u", game_param_ID);
			Printf("\n");
			
			float default_value_of_game_param;
		} gameParameters;
	}
};																												   
// HWL custom soundbanks don't have any SBPL (or SBPB) section
local int has_soundbankheader = 0;
if ( (ReadUInt() == 1280328275) || (ReadUInt() == 1112556115) ) // == "SBPL" or "SBPB"
	has_soundbankheader = 1;

struct SoundBankHeader
{
	char sign[4];
	
	switch (sign)
	{
		case "SBPL":
			LittleEndian();
			break;
		case "SBPB":
			BigEndian();
			break;
	}
	
	if (sign != "BKHD")
	{
		ubyte sectionCount;
		ubyte bytesToSectionDefinitions;
		FSkip(2);
		struct SectionDefinition
		{
			char sign[4]; // "bnk" or "sab" or "stp"
			int offsetToSection;
			int sectionSize;
			
		} sectionDefinition[sectionCount];
		
		Assert(bytesToSectionDefinitions==FTell(),"SectionDefinitions size incorrect!!!");
	}
	
};

if (has_soundbankheader == 1)
{
	SoundBankHeader soundBankHeader <bgcolor=soundBankHeader_color>;
	
	if (FTell() % 16 != 0)
	FSkip(16 - (FTell() % 16));
}

local int currentSection = 0;
local int startOfSection = FTell();
local int endOfStp = 0;

struct Section0 {
	char sign[4];
	
	switch (sign)
	{
		case "BKHD":
			BankHeader bankHeader <bgcolor=BankHeader_color, comment="Bank Header">;
			break;
		case "HIRC":
			Hierarchy hierarchy <bgcolor=Hierarchy_color, comment="Object Hierarchy">;
			break;
		case "STID":
			StreamId streamId <bgcolor=StreamId_color, comment="Stream Ids">;
			break;
		case "DIDX":
			DataIndex dataIndex <bgcolor=DataIndex_color, comment="Embedded .wem sounds">;
			break;
		case "STMG":
			STMG_struct stmg <bgcolor=STMG_color, comment="Found only in Init.bnk">;
			break;
		default:
			Assert(2+2==5,"Unknown section!!!!!");
			break;
	}
	
	
};

struct Sections
{
	startOfSection = FTell();

	Assert(soundBankHeader.sectionDefinition[currentSection].offsetToSection==FTell(),"Offset to start of Section is incorrect!!!!");
	
	if (soundBankHeader.sectionDefinition[currentSection].sign == "bnk")
	{
		while (FTell() < startOfSection + soundBankHeader.sectionDefinition[currentSection].sectionSize)
			Section0 section0;
		
		if (FTell() % 16 != 0)
			FSkip(16 - (FTell() % 16));
		
	}
	else if (soundBankHeader.sectionDefinition[currentSection].sign == "sab")
	{
		StreamAnimationLip streamAnimationLip;
	}
	else if (soundBankHeader.sectionDefinition[currentSection].sign == "stp")
	{
		endOfStp = soundBankHeader.sectionDefinition[currentSection].sectionSize;
		struct Section2
		{
			StreamedPackage streamedPackage <bgcolor=StreamId_color, comment="Streamed .wem sounds">;
			
		} section2;
	};
	
	currentSection += 1;
};


if (has_soundbankheader == 1)
	Sections sections[soundBankHeader.sectionCount] <optimize=false>;
else
	while (true) // HWL i don't know how many section0s there are, so just make new
	// ones until we get to the end of the file.
	Section0 section0 <optimize=false>;
