LittleEndian();

#define COLOR_TEXT 0xe1e1e1
#define COLOR_HEADER 0x2c3940
#define COLOR_1 0x4e6c84
#define COLOR_2 0x7294a6
#define COLOR_3 0xb0cad9
#define COLOR_4 0xe1e1e1
#define COLOR_5 0xcad2c7
#define COLOR_6 0xa59f71
#define COLOR_7 0x7e6d41

struct Pixel
{
    ubyte r;
    ubyte g;
    ubyte b;
    ubyte a;
};

struct Header
{
    uint version;
    uint block0Offset;
    Assert(block0Offset == 32);

    uint fileBytes;
    uint terrainHighBlockHash;
    uint headerSize;
} header <bgcolor=COLOR_HEADER, fgcolor=COLOR_TEXT>;

FSkip(12);

if (header.version == 3)
{
    // The header is identical in two random afgh and cypr htres.
    struct V3Metadata
    {
        struct TextureParamMetadata
        {
            uint nameHash;
            uint nameStringOffset;
    
            FSkip(4);
    
            uint textureOffset;
            uint textureSizeBytes;
            int editParamOffset;
            int configrationIdsOffset;
    
            int previousBlockOffset;
            int nextBlockOffset;
            int o2;
        };

        struct ScalarParamMetadata
        {
            uint nameHash;
            uint nameStringOffset;
            uint value;
        };

        TextureParamMetadata heightMapMeta;
        FSkip(12);
    
        ScalarParamMetadata pitchMeta;
    
        TextureParamMetadata weightMapMeta;
        FSkip(8);

        TextureParamMetadata editParamMeta;
        FSkip(12);
    
        ScalarParamMetadata maxLodLevelMeta;

        TextureParamMetadata lodParameterMeta;
        FSkip(8);        

        TextureParamMetadata maxHeightMeta;
        FSkip(8);
    
        TextureParamMetadata minHeightMeta;
        FSkip(8);
    
        TextureParamMetadata materialIdsMeta;
        FSkip(8);

        TextureParamMetadata configrationIdsMeta;
        FSkip(8);
        
    } meta <bgcolor=COLOR_HEADER, fgcolor=COLOR_TEXT>;
    
    FSkip(192);
    
    float heightMap[meta.heightMapMeta.textureSizeBytes / sizeof(float)] <bgcolor=COLOR_1, fgcolor=COLOR_TEXT>;
    Pixel materialWeightMap[meta.heightMapMeta.textureSizeBytes / sizeof(Pixel)] <bgcolor=COLOR_2, fgcolor=COLOR_TEXT>;
    float lodParameter[16] <bgcolor=COLOR_3>;
    float maxHeight[4] <bgcolor=COLOR_4>;
    float minHeight[4] <bgcolor=COLOR_5>;
    Pixel materialSelectMap[16 / sizeof(Pixel)] <bgcolor=COLOR_6>;
    Pixel configrationIds[16 / sizeof(Pixel)] <bgcolor=COLOR_7, fgcolor=COLOR_TEXT>;
}
else if (header.version == 4)
{
    struct V4Metadata
    {
        struct TextureParamMetadataV4
        {
            uint nameHash;
            uint nameStringOffset;
            int textureIndexMaybe;
    
            uint textureOffset;
            uint textureSizeBytes;
            int editParamOffset;
            int configrationIdsOffset;
    
            int previousBlockOffset;
            int nextBlockOffset;
            int o2;
        
            int u3;
            int u4;
        };

        struct ScalarParamMetadataV4
        {
            uint nameHash;
            uint nameStringOffset;
            uint value;
        };

        TextureParamMetadataV4 heightMap;
        short u0;
        short u1;

        ScalarParamMetadataV4 pitch;
        short u0;
        short u1;

        ScalarParamMetadataV4 heightFormat;
        short u2;
        short u3;

        ScalarParamMetadataV4 heightRangeMax;
        short u4;
        short u5;

        ScalarParamMetadataV4 heightRangeMin;

        TextureParamMetadataV4 comboTexture;
        short u4;
        short u5;

        ScalarParamMetadataV4 comboFormat;
        TextureParamMetadataV4 editParam;
        short u4;
        short u5;

        ScalarParamMetadataV4 maxLodLevel;
        TextureParamMetadataV4 lodParameter;
        TextureParamMetadataV4 maxHeight;
        TextureParamMetadataV4 minHeight;
        TextureParamMetadataV4 materialIds;
        TextureParamMetadataV4 configrationIds;
        TextureParamMetadataV4 patchDescription;
    } meta <bgcolor=COLOR_HEADER, fgcolor=COLOR_TEXT>;

    // No idea what this is, seems to have texture offsets?
    uint64 patchDescription[14] <bgcolor=COLOR_3>;

    FSeek(672);

    float heightMap[meta.heightMap.textureSizeBytes / sizeof(float)] <bgcolor=COLOR_1, fgcolor=COLOR_TEXT>;
    Pixel comboTexture[meta.comboTexture.textureSizeBytes / sizeof(Pixel)] <bgcolor=COLOR_2, fgcolor=COLOR_TEXT>;
    
    struct LodParameterV4
    {
        float u1[16];
        int u2[4];
    } lodParameter <bgcolor=COLOR_3>;

    float maxHeight[4] <bgcolor=COLOR_4>;
    float minHeight[4] <bgcolor=COLOR_5>;
    Pixel materialSelectMap[16 / sizeof(Pixel)] <bgcolor=COLOR_6>;
    Pixel configrationIds[16 / sizeof(Pixel)] <bgcolor=COLOR_7, fgcolor=COLOR_TEXT>;
}

// terrainHighBlock 2767142850
// heightMap 4283592115
// pitch 1011123561
// editParam 3806600625
// maxLodLevel 443065316
// lodParameter 2901004164
// maxHeight 2170562455
// minHeight 316436384
// materialIds 3214045617
// configrationIds 2104978212