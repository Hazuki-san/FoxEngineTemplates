LittleEndian();

#include "common/common.bt"

struct BoneModelAttachEntry 
{
	short fmdlIndex;
	short frdvIndex;
	short unkIndex0;
	short unkIndex1;
	short simIndex;
	short unkIndex2;
};

struct CnpModelAttachEntry 
{
	uint cnpStrCode32;
	uint emptyStrCode32;
	short fmdlIndex;
	short frdvIndex;
	short unkIndex0;
	short unkIndex1;
	short simIndex;
	short unkIndex2;
};

struct VariableDataSubEntry 
{
	uint meshGroupEntries[parentof(this).meshGroupCount];
	uint textureSwapMaterialInstanceStrCode32s[parentof(this).textureSwapCount];
	uint textureSwapTextureTypeStrCode32s[parentof(this).textureSwapCount];
	short textureSwapTextureIndices[parentof(this).textureSwapCount];
	short textureSwapMaterialParameterIndices[parentof(this).textureSwapCount];
	BoneModelAttachEntry boneModelAttachEntries[parentof(this).boneModelAttachmentCount];
	CnpModelAttachEntry cnpModelAttachEntries[parentof(this).cnpModelAttachmentCount];
};

struct VariableDataEntry 
{
	ubyte typeEnum;
	ubyte unknown0;
	ubyte subEntryCount;
	ubyte meshGroupCount;
	ubyte textureSwapCount;
	ubyte unknown1;
	ubyte boneModelAttachmentCount;
	ubyte cnpModelAttachmentCount;
	
	FSkip(4);

	uint offset;
	
	FSeek(offset);
	VariableDataSubEntry variableDataSubEntries[subEntryCount];
};

struct Fv2Header
{
	char Signature[7] <hidden = true>; Assert(Signature == "FOV2win");

	ubyte Version <hidden = true>; Assert(Version == 1);

	short variableDataSectionOffset;
	short externalFileSectionOffset;
	short variableDataSectionCount;
	short externalFileSectionCount;
	int materialParameterSectionOffset;
	int materialParameterSectionCount;
	short textureCount;

	FSkip(6);

	byte hideMeshGroupCount;
	byte showMeshGroupCount;
	byte textureSwapCount;
	byte unk0;
	byte boneModelAttachmentCount;
	byte cnpModelAttachmentCount;
	
	FSkip(2);

	//Static Data
    if (hideMeshGroupCount>0)
    	uint hideMeshGroupEntries[hideMeshGroupCount];
    if (showMeshGroupCount>0)
	    uint showMeshGroupEntries[showMeshGroupCount];
    if (textureSwapCount>0)
    {
	    uint textureSwapMaterialInstanceStrCode32s[textureSwapCount];
	    uint textureSwapTextureTypeStrCode32s[textureSwapCount];
	    short textureSwapTextureIndices[textureSwapCount];
	    short textureSwapMaterialParameterIndices[textureSwapCount];
    }
    if (boneModelAttachmentCount>0)
	    BoneModelAttachEntry boneModelAttachEntries[boneModelAttachmentCount];
    if (cnpModelAttachmentCount>0)
	    CnpModelAttachEntry cnpModelAttachEntries[cnpModelAttachmentCount];
	
	//Variable Data
	FSeek(variableDataSectionOffset);
    if (variableDataSectionCount>0)
	    VariableDataEntry variableDataEntries[variableDataSectionCount];
	
	//Material Parameter Data
	FSeek(materialParameterSectionOffset);
    if (materialParameterSectionCount>0)
	    Vector4 materialParameterEntries[materialParameterSectionCount];
	
	//External File Data
	FSeek(externalFileSectionOffset);
    if (externalFileSectionCount>0)
	    PathCode64 externalFileEntries[externalFileSectionCount];
} Fv2;